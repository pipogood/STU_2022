
UARTs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcd8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800be70  0800be70  0001be70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be90  0800be90  000201a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800be90  0800be90  0001be90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be98  0800be98  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be98  0800be98  0001be98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be9c  0800be9c  0001be9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800bea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000680  200001a8  0800c044  000201a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000828  0800c044  00020828  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c2c  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002185  00000000  00000000  00033e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  00035f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  000371a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170e6  00000000  00000000  00038318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145cf  00000000  00000000  0004f3fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000932ad  00000000  00000000  000639cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6c7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005114  00000000  00000000  000f6ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001a8 	.word	0x200001a8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800be58 	.word	0x0800be58

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001ac 	.word	0x200001ac
 80001d4:	0800be58 	.word	0x0800be58

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	0000      	movs	r0, r0
	...

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e9c:	b08c      	sub	sp, #48	; 0x30
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea0:	f003 fea8 	bl	8004bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea4:	f000 fbc6 	bl	8001634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea8:	f000 fd8e 	bl	80019c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eac:	f000 fd54 	bl	8001958 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000eb0:	f000 fd26 	bl	8001900 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8000eb4:	f000 fd00 	bl	80018b8 <MX_TIM11_Init>
  MX_SPI3_Init();
 8000eb8:	f000 fc52 	bl	8001760 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000ebc:	f000 fc86 	bl	80017cc <MX_TIM2_Init>
  MX_I2C1_Init();
 8000ec0:	f000 fc20 	bl	8001704 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim11);
 8000ec4:	4896      	ldr	r0, [pc, #600]	; (8001120 <main+0x288>)
 8000ec6:	f008 fcdd 	bl	8009884 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart2, Receive, nbyte);
 8000eca:	4b96      	ldr	r3, [pc, #600]	; (8001124 <main+0x28c>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4995      	ldr	r1, [pc, #596]	; (8001128 <main+0x290>)
 8000ed4:	4895      	ldr	r0, [pc, #596]	; (800112c <main+0x294>)
 8000ed6:	f009 fd15 	bl	800a904 <HAL_UART_Receive_DMA>
  NFgetstate();
 8000eda:	f002 fa29 	bl	8003330 <NFgetstate>
  NFstate = 0x78;
 8000ede:	4a94      	ldr	r2, [pc, #592]	; (8001130 <main+0x298>)
 8000ee0:	2378      	movs	r3, #120	; 0x78
 8000ee2:	7013      	strb	r3, [r2, #0]
  //PWM Generator set
  HAL_TIM_Base_Start(&htim2);
 8000ee4:	4893      	ldr	r0, [pc, #588]	; (8001134 <main+0x29c>)
 8000ee6:	f008 fc73 	bl	80097d0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000eea:	2100      	movs	r1, #0
 8000eec:	4891      	ldr	r0, [pc, #580]	; (8001134 <main+0x29c>)
 8000eee:	f008 fd85 	bl	80099fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000ef2:	2104      	movs	r1, #4
 8000ef4:	488f      	ldr	r0, [pc, #572]	; (8001134 <main+0x29c>)
 8000ef6:	f008 fd81 	bl	80099fc <HAL_TIM_PWM_Start>

  //Encoder set
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000efa:	2201      	movs	r2, #1
 8000efc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f00:	488d      	ldr	r0, [pc, #564]	; (8001138 <main+0x2a0>)
 8000f02:	f004 fdcb 	bl	8005a9c <HAL_GPIO_WritePin>

  movingFlag = 14;
 8000f06:	4a8d      	ldr	r2, [pc, #564]	; (800113c <main+0x2a4>)
 8000f08:	230e      	movs	r3, #14
 8000f0a:	7013      	strb	r3, [r2, #0]
	  static uint64_t timeset = 0;
	  static uint64_t timeset2 = 0;
	  static uint64_t timeset3 = 0;
	  static uint64_t timeStamp = 0;
	  static GPIO_PinState B1State2[2] = {0};
	  B1State2[0]= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8000f0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f10:	488b      	ldr	r0, [pc, #556]	; (8001140 <main+0x2a8>)
 8000f12:	f004 fdab 	bl	8005a6c <HAL_GPIO_ReadPin>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4a8a      	ldr	r2, [pc, #552]	; (8001144 <main+0x2ac>)
 8000f1a:	7013      	strb	r3, [r2, #0]

	  if(AMTcomplete || micros()-timeStamp>dt*1000){
 8000f1c:	4b8a      	ldr	r3, [pc, #552]	; (8001148 <main+0x2b0>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d115      	bne.n	8000f50 <main+0xb8>
 8000f24:	f002 fd08 	bl	8003938 <micros>
 8000f28:	4b88      	ldr	r3, [pc, #544]	; (800114c <main+0x2b4>)
 8000f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2e:	1a84      	subs	r4, r0, r2
 8000f30:	62bc      	str	r4, [r7, #40]	; 0x28
 8000f32:	eb61 0303 	sbc.w	r3, r1, r3
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f38:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000f3c:	f7ff fad2 	bl	80004e4 <__aeabi_ul2d>
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	4b82      	ldr	r3, [pc, #520]	; (8001150 <main+0x2b8>)
 8000f46:	f7ff fd93 	bl	8000a70 <__aeabi_dcmpgt>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d002      	beq.n	8000f56 <main+0xbe>
	  		 AMT222getpos(&rawPos);
 8000f50:	4880      	ldr	r0, [pc, #512]	; (8001154 <main+0x2bc>)
 8000f52:	f002 fa29 	bl	80033a8 <AMT222getpos>
	  		 //Drivemotor(PIDout);
	  	  }

	  switch(State){
 8000f56:	4b80      	ldr	r3, [pc, #512]	; (8001158 <main+0x2c0>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b03      	cmp	r3, #3
 8000f5c:	f000 81f5 	beq.w	800134a <main+0x4b2>
 8000f60:	2b03      	cmp	r3, #3
 8000f62:	dc04      	bgt.n	8000f6e <main+0xd6>
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d062      	beq.n	800102e <main+0x196>
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	f000 821a 	beq.w	80013a2 <main+0x50a>
	  default:
		  case Idle:
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f74:	4872      	ldr	r0, [pc, #456]	; (8001140 <main+0x2a8>)
 8000f76:	f004 fd91 	bl	8005a9c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	4877      	ldr	r0, [pc, #476]	; (800115c <main+0x2c4>)
 8000f80:	f004 fd8c 	bl	8005a9c <HAL_GPIO_WritePin>
			  if (micros() - timeset3 > dt*1000000){ //Read Value while Idle
 8000f84:	f002 fcd8 	bl	8003938 <micros>
 8000f88:	4b75      	ldr	r3, [pc, #468]	; (8001160 <main+0x2c8>)
 8000f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8e:	1a84      	subs	r4, r0, r2
 8000f90:	623c      	str	r4, [r7, #32]
 8000f92:	eb61 0303 	sbc.w	r3, r1, r3
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
 8000f98:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f9c:	f7ff faa2 	bl	80004e4 <__aeabi_ul2d>
 8000fa0:	a359      	add	r3, pc, #356	; (adr r3, 8001108 <main+0x270>)
 8000fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa6:	f7ff fd63 	bl	8000a70 <__aeabi_dcmpgt>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d00c      	beq.n	8000fca <main+0x132>
				  lowpass();
 8000fb0:	f001 fad6 	bl	8002560 <lowpass>
				  Diff_velo();
 8000fb4:	f001 fb74 	bl	80026a0 <Diff_velo>
				  Kalman_filter();
 8000fb8:	f001 fba6 	bl	8002708 <Kalman_filter>
				  timeset3 = micros();
 8000fbc:	f002 fcbc 	bl	8003938 <micros>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4966      	ldr	r1, [pc, #408]	; (8001160 <main+0x2c8>)
 8000fc6:	e9c1 2300 	strd	r2, r3, [r1]
			  }

			  if(setinitial == 1){ // Condition for first start
 8000fca:	4b66      	ldr	r3, [pc, #408]	; (8001164 <main+0x2cc>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d101      	bne.n	8000fd6 <main+0x13e>
				  set_initial();
 8000fd2:	f001 f94d 	bl	8002270 <set_initial>
			  }

			  if(setzero == 1){ // Condition for Set home
 8000fd6:	4b64      	ldr	r3, [pc, #400]	; (8001168 <main+0x2d0>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d101      	bne.n	8000fe2 <main+0x14a>
				  set_home();
 8000fde:	f001 f9af 	bl	8002340 <set_home>
			  }

			  if(update == 1){ //UART Update
 8000fe2:	4b62      	ldr	r3, [pc, #392]	; (800116c <main+0x2d4>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d101      	bne.n	8000fee <main+0x156>
				  MoveToStation();
 8000fea:	f001 f9d5 	bl	8002398 <MoveToStation>
			  }

			  if(stop == 1){
 8000fee:	4b60      	ldr	r3, [pc, #384]	; (8001170 <main+0x2d8>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d105      	bne.n	8001002 <main+0x16a>
					State = Emerstop;
 8000ff6:	4a58      	ldr	r2, [pc, #352]	; (8001158 <main+0x2c0>)
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	7013      	strb	r3, [r2, #0]
					Drivemotor(0);
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f002 f92b 	bl	8003258 <Drivemotor>
				}

			  if(blue == 1){ // Blue Button Switch
 8001002:	4b5c      	ldr	r3, [pc, #368]	; (8001174 <main+0x2dc>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b01      	cmp	r3, #1
 8001008:	f040 82f3 	bne.w	80015f2 <main+0x75a>
				  postotra = 3.14;
 800100c:	4a5a      	ldr	r2, [pc, #360]	; (8001178 <main+0x2e0>)
 800100e:	4b5b      	ldr	r3, [pc, #364]	; (800117c <main+0x2e4>)
 8001010:	6013      	str	r3, [r2, #0]
				  limitOmega = 5;
 8001012:	4a5b      	ldr	r2, [pc, #364]	; (8001180 <main+0x2e8>)
 8001014:	4b5b      	ldr	r3, [pc, #364]	; (8001184 <main+0x2ec>)
 8001016:	6013      	str	r3, [r2, #0]
				  direct = 1;
 8001018:	4a5b      	ldr	r2, [pc, #364]	; (8001188 <main+0x2f0>)
 800101a:	2301      	movs	r3, #1
 800101c:	7013      	strb	r3, [r2, #0]
				  rad_before = current_rad;
 800101e:	4b5b      	ldr	r3, [pc, #364]	; (800118c <main+0x2f4>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	4b5b      	ldr	r3, [pc, #364]	; (8001190 <main+0x2f8>)
 8001024:	601a      	str	r2, [r3, #0]
				  State = Working;
 8001026:	4a4c      	ldr	r2, [pc, #304]	; (8001158 <main+0x2c0>)
 8001028:	2301      	movs	r3, #1
 800102a:	7013      	strb	r3, [r2, #0]
			  }
			  break;
 800102c:	e2e1      	b.n	80015f2 <main+0x75a>

		  case Working:
			blue = 0;
 800102e:	4a51      	ldr	r2, [pc, #324]	; (8001174 <main+0x2dc>)
 8001030:	2300      	movs	r3, #0
 8001032:	7013      	strb	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001034:	2201      	movs	r2, #1
 8001036:	f44f 7100 	mov.w	r1, #512	; 0x200
 800103a:	4841      	ldr	r0, [pc, #260]	; (8001140 <main+0x2a8>)
 800103c:	f004 fd2e 	bl	8005a9c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	2180      	movs	r1, #128	; 0x80
 8001044:	4845      	ldr	r0, [pc, #276]	; (800115c <main+0x2c4>)
 8001046:	f004 fd29 	bl	8005a9c <HAL_GPIO_WritePin>
			if (micros() - timeset > dt*1000000) { //1000 Hz
 800104a:	f002 fc75 	bl	8003938 <micros>
 800104e:	4b51      	ldr	r3, [pc, #324]	; (8001194 <main+0x2fc>)
 8001050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001054:	1a84      	subs	r4, r0, r2
 8001056:	61bc      	str	r4, [r7, #24]
 8001058:	eb61 0303 	sbc.w	r3, r1, r3
 800105c:	61fb      	str	r3, [r7, #28]
 800105e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001062:	f7ff fa3f 	bl	80004e4 <__aeabi_ul2d>
 8001066:	a328      	add	r3, pc, #160	; (adr r3, 8001108 <main+0x270>)
 8001068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106c:	f7ff fd00 	bl	8000a70 <__aeabi_dcmpgt>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 80c4 	beq.w	8001200 <main+0x368>
				lowpass();
 8001078:	f001 fa72 	bl	8002560 <lowpass>
				Diff_velo();
 800107c:	f001 fb10 	bl	80026a0 <Diff_velo>
				Kalman_filter();
 8001080:	f001 fb42 	bl	8002708 <Kalman_filter>
				if(postotra > 0.2){
 8001084:	4b3c      	ldr	r3, [pc, #240]	; (8001178 <main+0x2e0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fa09 	bl	80004a0 <__aeabi_f2d>
 800108e:	a320      	add	r3, pc, #128	; (adr r3, 8001110 <main+0x278>)
 8001090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001094:	f7ff fcec 	bl	8000a70 <__aeabi_dcmpgt>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d010      	beq.n	80010c0 <main+0x228>
					Trajectory(postotra,limitOmega);
 800109e:	4b36      	ldr	r3, [pc, #216]	; (8001178 <main+0x2e0>)
 80010a0:	edd3 7a00 	vldr	s15, [r3]
 80010a4:	4b36      	ldr	r3, [pc, #216]	; (8001180 <main+0x2e8>)
 80010a6:	ed93 7a00 	vldr	s14, [r3]
 80010aa:	eef0 0a47 	vmov.f32	s1, s14
 80010ae:	eeb0 0a67 	vmov.f32	s0, s15
 80010b2:	f001 fe01 	bl	8002cb8 <Trajectory>
					inverse_tran();
 80010b6:	f001 f9cf 	bl	8002458 <inverse_tran>
					CascadeController();
 80010ba:	f000 fd3d 	bl	8001b38 <CascadeController>
 80010be:	e07c      	b.n	80011ba <main+0x322>
						error = tra_velo - velo_diff;
						prevError = error;
					}*/
				}
				else{
					if(tuaall < 0.1){ //short distant 5,10 degree
 80010c0:	4b35      	ldr	r3, [pc, #212]	; (8001198 <main+0x300>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff f9eb 	bl	80004a0 <__aeabi_f2d>
 80010ca:	a313      	add	r3, pc, #76	; (adr r3, 8001118 <main+0x280>)
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	f7ff fcb0 	bl	8000a34 <__aeabi_dcmplt>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00b      	beq.n	80010f2 <main+0x25a>
						if(direct == 1){
 80010da:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <main+0x2f0>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d103      	bne.n	80010ea <main+0x252>
							PIDout = 2100;}
 80010e2:	4a2e      	ldr	r2, [pc, #184]	; (800119c <main+0x304>)
 80010e4:	4b2e      	ldr	r3, [pc, #184]	; (80011a0 <main+0x308>)
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	e063      	b.n	80011b2 <main+0x31a>
						else{
							PIDout = -2100;}
 80010ea:	4a2c      	ldr	r2, [pc, #176]	; (800119c <main+0x304>)
 80010ec:	4b2d      	ldr	r3, [pc, #180]	; (80011a4 <main+0x30c>)
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	e05f      	b.n	80011b2 <main+0x31a>
					}
					else{
						if(direct == 1){
 80010f2:	4b25      	ldr	r3, [pc, #148]	; (8001188 <main+0x2f0>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d158      	bne.n	80011ac <main+0x314>
							PIDout = 1000;}
 80010fa:	4a28      	ldr	r2, [pc, #160]	; (800119c <main+0x304>)
 80010fc:	4b2a      	ldr	r3, [pc, #168]	; (80011a8 <main+0x310>)
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	e057      	b.n	80011b2 <main+0x31a>
 8001102:	bf00      	nop
 8001104:	f3af 8000 	nop.w
 8001108:	00000000 	.word	0x00000000
 800110c:	40c38800 	.word	0x40c38800
 8001110:	9999999a 	.word	0x9999999a
 8001114:	3fc99999 	.word	0x3fc99999
 8001118:	9999999a 	.word	0x9999999a
 800111c:	3fb99999 	.word	0x3fb99999
 8001120:	20000378 	.word	0x20000378
 8001124:	2000001e 	.word	0x2000001e
 8001128:	20000550 	.word	0x20000550
 800112c:	200003c0 	.word	0x200003c0
 8001130:	20000570 	.word	0x20000570
 8001134:	20000330 	.word	0x20000330
 8001138:	40020400 	.word	0x40020400
 800113c:	2000053c 	.word	0x2000053c
 8001140:	40020000 	.word	0x40020000
 8001144:	200007f4 	.word	0x200007f4
 8001148:	20000023 	.word	0x20000023
 800114c:	200007f8 	.word	0x200007f8
 8001150:	40240000 	.word	0x40240000
 8001154:	2000058a 	.word	0x2000058a
 8001158:	200005f7 	.word	0x200005f7
 800115c:	40020800 	.word	0x40020800
 8001160:	20000800 	.word	0x20000800
 8001164:	2000000c 	.word	0x2000000c
 8001168:	200005ac 	.word	0x200005ac
 800116c:	200005f4 	.word	0x200005f4
 8001170:	200005b8 	.word	0x200005b8
 8001174:	200005f5 	.word	0x200005f5
 8001178:	200005ec 	.word	0x200005ec
 800117c:	4048f5c3 	.word	0x4048f5c3
 8001180:	20000014 	.word	0x20000014
 8001184:	40a00000 	.word	0x40a00000
 8001188:	2000002c 	.word	0x2000002c
 800118c:	2000058c 	.word	0x2000058c
 8001190:	200005f0 	.word	0x200005f0
 8001194:	20000808 	.word	0x20000808
 8001198:	200005e4 	.word	0x200005e4
 800119c:	20000628 	.word	0x20000628
 80011a0:	45034000 	.word	0x45034000
 80011a4:	c5034000 	.word	0xc5034000
 80011a8:	447a0000 	.word	0x447a0000
						else{
							PIDout = -1000;}
 80011ac:	4ab8      	ldr	r2, [pc, #736]	; (8001490 <main+0x5f8>)
 80011ae:	4bb9      	ldr	r3, [pc, #740]	; (8001494 <main+0x5fc>)
 80011b0:	6013      	str	r3, [r2, #0]
					}
					tf = 0;
 80011b2:	4ab9      	ldr	r2, [pc, #740]	; (8001498 <main+0x600>)
 80011b4:	f04f 0300 	mov.w	r3, #0
 80011b8:	6013      	str	r3, [r2, #0]
				}
				Drivemotor(PIDout);
 80011ba:	4bb5      	ldr	r3, [pc, #724]	; (8001490 <main+0x5f8>)
 80011bc:	edd3 7a00 	vldr	s15, [r3]
 80011c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c4:	ee17 0a90 	vmov	r0, s15
 80011c8:	f002 f846 	bl	8003258 <Drivemotor>
				tuaall += dt;
 80011cc:	4bb3      	ldr	r3, [pc, #716]	; (800149c <main+0x604>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f965 	bl	80004a0 <__aeabi_f2d>
 80011d6:	a3a8      	add	r3, pc, #672	; (adr r3, 8001478 <main+0x5e0>)
 80011d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011dc:	f7ff f802 	bl	80001e4 <__adddf3>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4610      	mov	r0, r2
 80011e6:	4619      	mov	r1, r3
 80011e8:	f7ff fc82 	bl	8000af0 <__aeabi_d2f>
 80011ec:	4602      	mov	r2, r0
 80011ee:	4bab      	ldr	r3, [pc, #684]	; (800149c <main+0x604>)
 80011f0:	601a      	str	r2, [r3, #0]
				timeset = micros();
 80011f2:	f002 fba1 	bl	8003938 <micros>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	49a9      	ldr	r1, [pc, #676]	; (80014a0 <main+0x608>)
 80011fc:	e9c1 2300 	strd	r2, r3, [r1]
			}

			if(tuaall > tf && setzero == 0){ //End of working should do this condition
 8001200:	4ba6      	ldr	r3, [pc, #664]	; (800149c <main+0x604>)
 8001202:	ed93 7a00 	vldr	s14, [r3]
 8001206:	4ba4      	ldr	r3, [pc, #656]	; (8001498 <main+0x600>)
 8001208:	edd3 7a00 	vldr	s15, [r3]
 800120c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001214:	dd67      	ble.n	80012e6 <main+0x44e>
 8001216:	4ba3      	ldr	r3, [pc, #652]	; (80014a4 <main+0x60c>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d163      	bne.n	80012e6 <main+0x44e>
				if(direct == 1){
 800121e:	4ba2      	ldr	r3, [pc, #648]	; (80014a8 <main+0x610>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d122      	bne.n	800126c <main+0x3d4>
					if(deg > Destination[n]-0.5){
 8001226:	4ba1      	ldr	r3, [pc, #644]	; (80014ac <main+0x614>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f938 	bl	80004a0 <__aeabi_f2d>
 8001230:	4604      	mov	r4, r0
 8001232:	460d      	mov	r5, r1
 8001234:	4b9e      	ldr	r3, [pc, #632]	; (80014b0 <main+0x618>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	4b9e      	ldr	r3, [pc, #632]	; (80014b4 <main+0x61c>)
 800123c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f91b 	bl	800047c <__aeabi_i2d>
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	4b9b      	ldr	r3, [pc, #620]	; (80014b8 <main+0x620>)
 800124c:	f7fe ffc8 	bl	80001e0 <__aeabi_dsub>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4620      	mov	r0, r4
 8001256:	4629      	mov	r1, r5
 8001258:	f7ff fc0a 	bl	8000a70 <__aeabi_dcmpgt>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d026      	beq.n	80012b0 <main+0x418>
						finish = 1;
 8001262:	4a96      	ldr	r2, [pc, #600]	; (80014bc <main+0x624>)
 8001264:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	e021      	b.n	80012b0 <main+0x418>
					}
				}
				else
				{
					if(deg < Destination[n]+0.1){
 800126c:	4b8f      	ldr	r3, [pc, #572]	; (80014ac <main+0x614>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f915 	bl	80004a0 <__aeabi_f2d>
 8001276:	4604      	mov	r4, r0
 8001278:	460d      	mov	r5, r1
 800127a:	4b8d      	ldr	r3, [pc, #564]	; (80014b0 <main+0x618>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	461a      	mov	r2, r3
 8001280:	4b8c      	ldr	r3, [pc, #560]	; (80014b4 <main+0x61c>)
 8001282:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f8f8 	bl	800047c <__aeabi_i2d>
 800128c:	a37c      	add	r3, pc, #496	; (adr r3, 8001480 <main+0x5e8>)
 800128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001292:	f7fe ffa7 	bl	80001e4 <__adddf3>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4620      	mov	r0, r4
 800129c:	4629      	mov	r1, r5
 800129e:	f7ff fbc9 	bl	8000a34 <__aeabi_dcmplt>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <main+0x418>
						finish = 1;
 80012a8:	4a84      	ldr	r2, [pc, #528]	; (80014bc <main+0x624>)
 80012aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ae:	6013      	str	r3, [r2, #0]
					}
				}
				if(finish == 1){
 80012b0:	4b82      	ldr	r3, [pc, #520]	; (80014bc <main+0x624>)
 80012b2:	edd3 7a00 	vldr	s15, [r3]
 80012b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012ba:	eef4 7a47 	vcmp.f32	s15, s14
 80012be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c2:	d110      	bne.n	80012e6 <main+0x44e>
					State = Laser;
 80012c4:	4a7e      	ldr	r2, [pc, #504]	; (80014c0 <main+0x628>)
 80012c6:	2302      	movs	r3, #2
 80012c8:	7013      	strb	r3, [r2, #0]
					NFwriteFlag = 1;
 80012ca:	4a7e      	ldr	r2, [pc, #504]	; (80014c4 <main+0x62c>)
 80012cc:	2301      	movs	r3, #1
 80012ce:	7013      	strb	r3, [r2, #0]
					NFtimeout = HAL_GetTick();
 80012d0:	f003 fcf6 	bl	8004cc0 <HAL_GetTick>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2200      	movs	r2, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	617a      	str	r2, [r7, #20]
 80012dc:	4b7a      	ldr	r3, [pc, #488]	; (80014c8 <main+0x630>)
 80012de:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80012e2:	e9c3 1200 	strd	r1, r2, [r3]
				}
			}

			if(tuaall > 15 && tuaall > tf){ //Condition when moving error
 80012e6:	4b6d      	ldr	r3, [pc, #436]	; (800149c <main+0x604>)
 80012e8:	edd3 7a00 	vldr	s15, [r3]
 80012ec:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80012f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f8:	dd1b      	ble.n	8001332 <main+0x49a>
 80012fa:	4b68      	ldr	r3, [pc, #416]	; (800149c <main+0x604>)
 80012fc:	ed93 7a00 	vldr	s14, [r3]
 8001300:	4b65      	ldr	r3, [pc, #404]	; (8001498 <main+0x600>)
 8001302:	edd3 7a00 	vldr	s15, [r3]
 8001306:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800130a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130e:	dd10      	ble.n	8001332 <main+0x49a>
				State = Laser;
 8001310:	4a6b      	ldr	r2, [pc, #428]	; (80014c0 <main+0x628>)
 8001312:	2302      	movs	r3, #2
 8001314:	7013      	strb	r3, [r2, #0]
				NFwriteFlag = 1;
 8001316:	4a6b      	ldr	r2, [pc, #428]	; (80014c4 <main+0x62c>)
 8001318:	2301      	movs	r3, #1
 800131a:	7013      	strb	r3, [r2, #0]
				NFtimeout = HAL_GetTick();
 800131c:	f003 fcd0 	bl	8004cc0 <HAL_GetTick>
 8001320:	4603      	mov	r3, r0
 8001322:	2200      	movs	r2, #0
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	60fa      	str	r2, [r7, #12]
 8001328:	4b67      	ldr	r3, [pc, #412]	; (80014c8 <main+0x630>)
 800132a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800132e:	e9c3 1200 	strd	r1, r2, [r3]
			}

			if(stop == 1){
 8001332:	4b66      	ldr	r3, [pc, #408]	; (80014cc <main+0x634>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b01      	cmp	r3, #1
 8001338:	f040 815d 	bne.w	80015f6 <main+0x75e>
				State = Emerstop;
 800133c:	4a60      	ldr	r2, [pc, #384]	; (80014c0 <main+0x628>)
 800133e:	2303      	movs	r3, #3
 8001340:	7013      	strb	r3, [r2, #0]
				Drivemotor(0);
 8001342:	2000      	movs	r0, #0
 8001344:	f001 ff88 	bl	8003258 <Drivemotor>
			}
			break;
 8001348:	e155      	b.n	80015f6 <main+0x75e>

		  case Emerstop:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001350:	485f      	ldr	r0, [pc, #380]	; (80014d0 <main+0x638>)
 8001352:	f004 fba3 	bl	8005a9c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	2180      	movs	r1, #128	; 0x80
 800135a:	485e      	ldr	r0, [pc, #376]	; (80014d4 <main+0x63c>)
 800135c:	f004 fb9e 	bl	8005a9c <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8001360:	2064      	movs	r0, #100	; 0x64
 8001362:	f003 fcb9 	bl	8004cd8 <HAL_Delay>
			if(B1State2[1] == GPIO_PIN_SET && B1State2[0] == GPIO_PIN_RESET){
 8001366:	4b5c      	ldr	r3, [pc, #368]	; (80014d8 <main+0x640>)
 8001368:	785b      	ldrb	r3, [r3, #1]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d114      	bne.n	8001398 <main+0x500>
 800136e:	4b5a      	ldr	r3, [pc, #360]	; (80014d8 <main+0x640>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d110      	bne.n	8001398 <main+0x500>
				reset();
 8001376:	f000 ff5b 	bl	8002230 <reset>
				nDestination = 0;
 800137a:	4a58      	ldr	r2, [pc, #352]	; (80014dc <main+0x644>)
 800137c:	2300      	movs	r3, #0
 800137e:	7013      	strb	r3, [r2, #0]
				n = 0;
 8001380:	4a4b      	ldr	r2, [pc, #300]	; (80014b0 <main+0x618>)
 8001382:	2300      	movs	r3, #0
 8001384:	7013      	strb	r3, [r2, #0]
				State = Idle;
 8001386:	4a4e      	ldr	r2, [pc, #312]	; (80014c0 <main+0x628>)
 8001388:	2300      	movs	r3, #0
 800138a:	7013      	strb	r3, [r2, #0]
				stop = 0;
 800138c:	4a4f      	ldr	r2, [pc, #316]	; (80014cc <main+0x634>)
 800138e:	2300      	movs	r3, #0
 8001390:	7013      	strb	r3, [r2, #0]
				setzero = 1;
 8001392:	4a44      	ldr	r2, [pc, #272]	; (80014a4 <main+0x60c>)
 8001394:	2301      	movs	r3, #1
 8001396:	7013      	strb	r3, [r2, #0]
			}
			B1State2[1] = B1State2[0];
 8001398:	4b4f      	ldr	r3, [pc, #316]	; (80014d8 <main+0x640>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4a4e      	ldr	r2, [pc, #312]	; (80014d8 <main+0x640>)
 800139e:	7053      	strb	r3, [r2, #1]
			break;
 80013a0:	e12a      	b.n	80015f8 <main+0x760>

		  case Laser:
			  if (micros() - timeset2 > dt*1000000){ //Read Value while Laser
 80013a2:	f002 fac9 	bl	8003938 <micros>
 80013a6:	4b4e      	ldr	r3, [pc, #312]	; (80014e0 <main+0x648>)
 80013a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ac:	1a84      	subs	r4, r0, r2
 80013ae:	603c      	str	r4, [r7, #0]
 80013b0:	eb61 0303 	sbc.w	r3, r1, r3
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013ba:	f7ff f893 	bl	80004e4 <__aeabi_ul2d>
 80013be:	a332      	add	r3, pc, #200	; (adr r3, 8001488 <main+0x5f0>)
 80013c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c4:	f7ff fb54 	bl	8000a70 <__aeabi_dcmpgt>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00c      	beq.n	80013e8 <main+0x550>
				  lowpass();
 80013ce:	f001 f8c7 	bl	8002560 <lowpass>
				  Diff_velo();
 80013d2:	f001 f965 	bl	80026a0 <Diff_velo>
				  Kalman_filter();
 80013d6:	f001 f997 	bl	8002708 <Kalman_filter>
				  timeset2 = micros();
 80013da:	f002 faad 	bl	8003938 <micros>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	493f      	ldr	r1, [pc, #252]	; (80014e0 <main+0x648>)
 80013e4:	e9c1 2300 	strd	r2, r3, [r1]
			  }
			if(setzero == 1){
 80013e8:	4b2e      	ldr	r3, [pc, #184]	; (80014a4 <main+0x60c>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d108      	bne.n	8001402 <main+0x56a>
				State = Idle;
 80013f0:	4a33      	ldr	r2, [pc, #204]	; (80014c0 <main+0x628>)
 80013f2:	2300      	movs	r3, #0
 80013f4:	7013      	strb	r3, [r2, #0]
				stateI2C = 0;
 80013f6:	4a3b      	ldr	r2, [pc, #236]	; (80014e4 <main+0x64c>)
 80013f8:	2300      	movs	r3, #0
 80013fa:	7013      	strb	r3, [r2, #0]
				reset();
 80013fc:	f000 ff18 	bl	8002230 <reset>
				break;
 8001400:	e0fa      	b.n	80015f8 <main+0x760>
			}

			reset();
 8001402:	f000 ff15 	bl	8002230 <reset>

			// time is not over 5.2sec -> continue laser state.
			if(HAL_GetTick()-NFtimeout < 5200){
 8001406:	f003 fc5b 	bl	8004cc0 <HAL_GetTick>
 800140a:	4603      	mov	r3, r0
 800140c:	2200      	movs	r2, #0
 800140e:	469a      	mov	sl, r3
 8001410:	4693      	mov	fp, r2
 8001412:	4b2d      	ldr	r3, [pc, #180]	; (80014c8 <main+0x630>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	ebba 0802 	subs.w	r8, sl, r2
 800141c:	eb6b 0903 	sbc.w	r9, fp, r3
 8001420:	f241 4350 	movw	r3, #5200	; 0x1450
 8001424:	4598      	cmp	r8, r3
 8001426:	f179 0300 	sbcs.w	r3, r9, #0
 800142a:	f080 80af 	bcs.w	800158c <main+0x6f4>
				switch(stateI2C){
 800142e:	4b2d      	ldr	r3, [pc, #180]	; (80014e4 <main+0x64c>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d002      	beq.n	800143c <main+0x5a4>
 8001436:	2b01      	cmp	r3, #1
 8001438:	d073      	beq.n	8001522 <main+0x68a>
					n = 0;
				}
				stateI2C = 0;
				State = Idle;
			}
			break;
 800143a:	e0dd      	b.n	80015f8 <main+0x760>
					switch(NFenable){
 800143c:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <main+0x650>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d06a      	beq.n	800151a <main+0x682>
 8001444:	2b01      	cmp	r3, #1
 8001446:	f040 80d0 	bne.w	80015ea <main+0x752>
						NFgetstate();
 800144a:	f001 ff71 	bl	8003330 <NFgetstate>
						if( NFwriteFlag && NFstate == 0x78 && (hi2c1.State == HAL_I2C_STATE_READY) ){
 800144e:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <main+0x62c>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d04e      	beq.n	80014f4 <main+0x65c>
 8001456:	4b25      	ldr	r3, [pc, #148]	; (80014ec <main+0x654>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b78      	cmp	r3, #120	; 0x78
 800145c:	d14a      	bne.n	80014f4 <main+0x65c>
 800145e:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <main+0x658>)
 8001460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b20      	cmp	r3, #32
 8001468:	d144      	bne.n	80014f4 <main+0x65c>
							NFcontacton();
 800146a:	f001 ff4b 	bl	8003304 <NFcontacton>
							NFwriteFlag = 0;		// Reached var.
 800146e:	4a15      	ldr	r2, [pc, #84]	; (80014c4 <main+0x62c>)
 8001470:	2300      	movs	r3, #0
 8001472:	7013      	strb	r3, [r2, #0]
						break;
 8001474:	e053      	b.n	800151e <main+0x686>
 8001476:	bf00      	nop
 8001478:	47ae147b 	.word	0x47ae147b
 800147c:	3f847ae1 	.word	0x3f847ae1
 8001480:	9999999a 	.word	0x9999999a
 8001484:	3fb99999 	.word	0x3fb99999
 8001488:	00000000 	.word	0x00000000
 800148c:	40c38800 	.word	0x40c38800
 8001490:	20000628 	.word	0x20000628
 8001494:	c47a0000 	.word	0xc47a0000
 8001498:	200005dc 	.word	0x200005dc
 800149c:	200005e4 	.word	0x200005e4
 80014a0:	20000808 	.word	0x20000808
 80014a4:	200005ac 	.word	0x200005ac
 80014a8:	2000002c 	.word	0x2000002c
 80014ac:	20000594 	.word	0x20000594
 80014b0:	20000544 	.word	0x20000544
 80014b4:	200004d4 	.word	0x200004d4
 80014b8:	3fe00000 	.word	0x3fe00000
 80014bc:	20000600 	.word	0x20000600
 80014c0:	200005f7 	.word	0x200005f7
 80014c4:	20000022 	.word	0x20000022
 80014c8:	20000578 	.word	0x20000578
 80014cc:	200005b8 	.word	0x200005b8
 80014d0:	40020000 	.word	0x40020000
 80014d4:	40020800 	.word	0x40020800
 80014d8:	200007f4 	.word	0x200007f4
 80014dc:	200004d0 	.word	0x200004d0
 80014e0:	20000810 	.word	0x20000810
 80014e4:	20000580 	.word	0x20000580
 80014e8:	20000021 	.word	0x20000021
 80014ec:	20000570 	.word	0x20000570
 80014f0:	200001c4 	.word	0x200001c4
						}else if(NFstate == 0x12 || NFstate == 0x34 || NFstate == 0x56){
 80014f4:	4b45      	ldr	r3, [pc, #276]	; (800160c <main+0x774>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b12      	cmp	r3, #18
 80014fa:	d007      	beq.n	800150c <main+0x674>
 80014fc:	4b43      	ldr	r3, [pc, #268]	; (800160c <main+0x774>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b34      	cmp	r3, #52	; 0x34
 8001502:	d003      	beq.n	800150c <main+0x674>
 8001504:	4b41      	ldr	r3, [pc, #260]	; (800160c <main+0x774>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b56      	cmp	r3, #86	; 0x56
 800150a:	d108      	bne.n	800151e <main+0x686>
							stateI2C = 1;
 800150c:	4a40      	ldr	r2, [pc, #256]	; (8001610 <main+0x778>)
 800150e:	2301      	movs	r3, #1
 8001510:	7013      	strb	r3, [r2, #0]
							NFstate = 0;			// Reset NF fector state for sure.
 8001512:	4a3e      	ldr	r2, [pc, #248]	; (800160c <main+0x774>)
 8001514:	2300      	movs	r3, #0
 8001516:	7013      	strb	r3, [r2, #0]
						break;
 8001518:	e001      	b.n	800151e <main+0x686>
						break;
 800151a:	bf00      	nop
 800151c:	e065      	b.n	80015ea <main+0x752>
						break;
 800151e:	bf00      	nop
					break;
 8001520:	e063      	b.n	80015ea <main+0x752>
					NFgetstate();
 8001522:	f001 ff05 	bl	8003330 <NFgetstate>
					if(NFstate == 0x78){
 8001526:	4b39      	ldr	r3, [pc, #228]	; (800160c <main+0x774>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b78      	cmp	r3, #120	; 0x78
 800152c:	d15f      	bne.n	80015ee <main+0x756>
						n++;
 800152e:	4b39      	ldr	r3, [pc, #228]	; (8001614 <main+0x77c>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	3301      	adds	r3, #1
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4a37      	ldr	r2, [pc, #220]	; (8001614 <main+0x77c>)
 8001538:	7013      	strb	r3, [r2, #0]
						if(n < nDestination){
 800153a:	4b36      	ldr	r3, [pc, #216]	; (8001614 <main+0x77c>)
 800153c:	781a      	ldrb	r2, [r3, #0]
 800153e:	4b36      	ldr	r3, [pc, #216]	; (8001618 <main+0x780>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d203      	bcs.n	800154e <main+0x6b6>
							update = 1;
 8001546:	4a35      	ldr	r2, [pc, #212]	; (800161c <main+0x784>)
 8001548:	2301      	movs	r3, #1
 800154a:	7013      	strb	r3, [r2, #0]
 800154c:	e017      	b.n	800157e <main+0x6e6>
						else if(n == nStation || n == nDestination){
 800154e:	4b31      	ldr	r3, [pc, #196]	; (8001614 <main+0x77c>)
 8001550:	781a      	ldrb	r2, [r3, #0]
 8001552:	4b33      	ldr	r3, [pc, #204]	; (8001620 <main+0x788>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d005      	beq.n	8001566 <main+0x6ce>
 800155a:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <main+0x77c>)
 800155c:	781a      	ldrb	r2, [r3, #0]
 800155e:	4b2e      	ldr	r3, [pc, #184]	; (8001618 <main+0x780>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	429a      	cmp	r2, r3
 8001564:	d10b      	bne.n	800157e <main+0x6e6>
							update = 0;
 8001566:	4a2d      	ldr	r2, [pc, #180]	; (800161c <main+0x784>)
 8001568:	2300      	movs	r3, #0
 800156a:	7013      	strb	r3, [r2, #0]
							Reached = 1;
 800156c:	4a2d      	ldr	r2, [pc, #180]	; (8001624 <main+0x78c>)
 800156e:	2301      	movs	r3, #1
 8001570:	7013      	strb	r3, [r2, #0]
							nDestination = 0;
 8001572:	4a29      	ldr	r2, [pc, #164]	; (8001618 <main+0x780>)
 8001574:	2300      	movs	r3, #0
 8001576:	7013      	strb	r3, [r2, #0]
							n = 0;
 8001578:	4a26      	ldr	r2, [pc, #152]	; (8001614 <main+0x77c>)
 800157a:	2300      	movs	r3, #0
 800157c:	7013      	strb	r3, [r2, #0]
						stateI2C = 0;
 800157e:	4a24      	ldr	r2, [pc, #144]	; (8001610 <main+0x778>)
 8001580:	2300      	movs	r3, #0
 8001582:	7013      	strb	r3, [r2, #0]
						State = Idle;
 8001584:	4a28      	ldr	r2, [pc, #160]	; (8001628 <main+0x790>)
 8001586:	2300      	movs	r3, #0
 8001588:	7013      	strb	r3, [r2, #0]
					break;
 800158a:	e030      	b.n	80015ee <main+0x756>
				n++;
 800158c:	4b21      	ldr	r3, [pc, #132]	; (8001614 <main+0x77c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	3301      	adds	r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	4a1f      	ldr	r2, [pc, #124]	; (8001614 <main+0x77c>)
 8001596:	7013      	strb	r3, [r2, #0]
				if(n < nDestination){
 8001598:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <main+0x77c>)
 800159a:	781a      	ldrb	r2, [r3, #0]
 800159c:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <main+0x780>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d203      	bcs.n	80015ac <main+0x714>
					update = 1;
 80015a4:	4a1d      	ldr	r2, [pc, #116]	; (800161c <main+0x784>)
 80015a6:	2301      	movs	r3, #1
 80015a8:	7013      	strb	r3, [r2, #0]
 80015aa:	e017      	b.n	80015dc <main+0x744>
				else if(n == nStation || n == nDestination){
 80015ac:	4b19      	ldr	r3, [pc, #100]	; (8001614 <main+0x77c>)
 80015ae:	781a      	ldrb	r2, [r3, #0]
 80015b0:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <main+0x788>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d005      	beq.n	80015c4 <main+0x72c>
 80015b8:	4b16      	ldr	r3, [pc, #88]	; (8001614 <main+0x77c>)
 80015ba:	781a      	ldrb	r2, [r3, #0]
 80015bc:	4b16      	ldr	r3, [pc, #88]	; (8001618 <main+0x780>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d10b      	bne.n	80015dc <main+0x744>
					update = 0;
 80015c4:	4a15      	ldr	r2, [pc, #84]	; (800161c <main+0x784>)
 80015c6:	2300      	movs	r3, #0
 80015c8:	7013      	strb	r3, [r2, #0]
					Reached = 1;
 80015ca:	4a16      	ldr	r2, [pc, #88]	; (8001624 <main+0x78c>)
 80015cc:	2301      	movs	r3, #1
 80015ce:	7013      	strb	r3, [r2, #0]
					nDestination = 0;
 80015d0:	4a11      	ldr	r2, [pc, #68]	; (8001618 <main+0x780>)
 80015d2:	2300      	movs	r3, #0
 80015d4:	7013      	strb	r3, [r2, #0]
					n = 0;
 80015d6:	4a0f      	ldr	r2, [pc, #60]	; (8001614 <main+0x77c>)
 80015d8:	2300      	movs	r3, #0
 80015da:	7013      	strb	r3, [r2, #0]
				stateI2C = 0;
 80015dc:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <main+0x778>)
 80015de:	2300      	movs	r3, #0
 80015e0:	7013      	strb	r3, [r2, #0]
				State = Idle;
 80015e2:	4a11      	ldr	r2, [pc, #68]	; (8001628 <main+0x790>)
 80015e4:	2300      	movs	r3, #0
 80015e6:	7013      	strb	r3, [r2, #0]
			break;
 80015e8:	e006      	b.n	80015f8 <main+0x760>
					break;
 80015ea:	bf00      	nop
 80015ec:	e004      	b.n	80015f8 <main+0x760>
					break;
 80015ee:	bf00      	nop
			break;
 80015f0:	e002      	b.n	80015f8 <main+0x760>
			  break;
 80015f2:	bf00      	nop
 80015f4:	e000      	b.n	80015f8 <main+0x760>
			break;
 80015f6:	bf00      	nop
	  }

	  responseUART();
 80015f8:	f002 fb06 	bl	8003c08 <responseUART>
	  rad = current_rad_wrap;
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <main+0x794>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <main+0x798>)
 8001602:	601a      	str	r2, [r3, #0]

	  // Keep this work flow at the bottom of while loop. bo Reached will be reset here.
	  destinationACK();
 8001604:	f002 ff02 	bl	800440c <destinationACK>
  {
 8001608:	e480      	b.n	8000f0c <main+0x74>
 800160a:	bf00      	nop
 800160c:	20000570 	.word	0x20000570
 8001610:	20000580 	.word	0x20000580
 8001614:	20000544 	.word	0x20000544
 8001618:	200004d0 	.word	0x200004d0
 800161c:	200005f4 	.word	0x200005f4
 8001620:	20000538 	.word	0x20000538
 8001624:	2000053b 	.word	0x2000053b
 8001628:	200005f7 	.word	0x200005f7
 800162c:	20000590 	.word	0x20000590
 8001630:	20000540 	.word	0x20000540

08001634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b094      	sub	sp, #80	; 0x50
 8001638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163a:	f107 0320 	add.w	r3, r7, #32
 800163e:	2230      	movs	r2, #48	; 0x30
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f00a fb22 	bl	800bc8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001658:	2300      	movs	r3, #0
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	4b27      	ldr	r3, [pc, #156]	; (80016fc <SystemClock_Config+0xc8>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	4a26      	ldr	r2, [pc, #152]	; (80016fc <SystemClock_Config+0xc8>)
 8001662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001666:	6413      	str	r3, [r2, #64]	; 0x40
 8001668:	4b24      	ldr	r3, [pc, #144]	; (80016fc <SystemClock_Config+0xc8>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001674:	2300      	movs	r3, #0
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	4b21      	ldr	r3, [pc, #132]	; (8001700 <SystemClock_Config+0xcc>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a20      	ldr	r2, [pc, #128]	; (8001700 <SystemClock_Config+0xcc>)
 800167e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <SystemClock_Config+0xcc>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001690:	2302      	movs	r3, #2
 8001692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001694:	2301      	movs	r3, #1
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001698:	2310      	movs	r3, #16
 800169a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800169c:	2302      	movs	r3, #2
 800169e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016a0:	2300      	movs	r3, #0
 80016a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016a4:	2308      	movs	r3, #8
 80016a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80016a8:	2364      	movs	r3, #100	; 0x64
 80016aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016ac:	2302      	movs	r3, #2
 80016ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016b0:	2304      	movs	r3, #4
 80016b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b4:	f107 0320 	add.w	r3, r7, #32
 80016b8:	4618      	mov	r0, r3
 80016ba:	f006 fe91 	bl	80083e0 <HAL_RCC_OscConfig>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016c4:	f002 ff50 	bl	8004568 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c8:	230f      	movs	r3, #15
 80016ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016cc:	2302      	movs	r3, #2
 80016ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	2103      	movs	r1, #3
 80016e4:	4618      	mov	r0, r3
 80016e6:	f007 f8f3 	bl	80088d0 <HAL_RCC_ClockConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80016f0:	f002 ff3a 	bl	8004568 <Error_Handler>
  }
}
 80016f4:	bf00      	nop
 80016f6:	3750      	adds	r7, #80	; 0x50
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40023800 	.word	0x40023800
 8001700:	40007000 	.word	0x40007000

08001704 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001708:	4b12      	ldr	r3, [pc, #72]	; (8001754 <MX_I2C1_Init+0x50>)
 800170a:	4a13      	ldr	r2, [pc, #76]	; (8001758 <MX_I2C1_Init+0x54>)
 800170c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <MX_I2C1_Init+0x50>)
 8001710:	4a12      	ldr	r2, [pc, #72]	; (800175c <MX_I2C1_Init+0x58>)
 8001712:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <MX_I2C1_Init+0x50>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <MX_I2C1_Init+0x50>)
 800171c:	2200      	movs	r2, #0
 800171e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <MX_I2C1_Init+0x50>)
 8001722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001726:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <MX_I2C1_Init+0x50>)
 800172a:	2200      	movs	r2, #0
 800172c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <MX_I2C1_Init+0x50>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001734:	4b07      	ldr	r3, [pc, #28]	; (8001754 <MX_I2C1_Init+0x50>)
 8001736:	2200      	movs	r2, #0
 8001738:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <MX_I2C1_Init+0x50>)
 800173c:	2200      	movs	r2, #0
 800173e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001740:	4804      	ldr	r0, [pc, #16]	; (8001754 <MX_I2C1_Init+0x50>)
 8001742:	f004 f9dd 	bl	8005b00 <HAL_I2C_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800174c:	f002 ff0c 	bl	8004568 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	200001c4 	.word	0x200001c4
 8001758:	40005400 	.word	0x40005400
 800175c:	00061a80 	.word	0x00061a80

08001760 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001764:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <MX_SPI3_Init+0x64>)
 8001766:	4a18      	ldr	r2, [pc, #96]	; (80017c8 <MX_SPI3_Init+0x68>)
 8001768:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <MX_SPI3_Init+0x64>)
 800176c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001770:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001772:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <MX_SPI3_Init+0x64>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <MX_SPI3_Init+0x64>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <MX_SPI3_Init+0x64>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001784:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <MX_SPI3_Init+0x64>)
 8001786:	2200      	movs	r2, #0
 8001788:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <MX_SPI3_Init+0x64>)
 800178c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001790:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001792:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <MX_SPI3_Init+0x64>)
 8001794:	2220      	movs	r2, #32
 8001796:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001798:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <MX_SPI3_Init+0x64>)
 800179a:	2200      	movs	r2, #0
 800179c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <MX_SPI3_Init+0x64>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017a4:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <MX_SPI3_Init+0x64>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <MX_SPI3_Init+0x64>)
 80017ac:	220a      	movs	r2, #10
 80017ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80017b0:	4804      	ldr	r0, [pc, #16]	; (80017c4 <MX_SPI3_Init+0x64>)
 80017b2:	f007 faad 	bl	8008d10 <HAL_SPI_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80017bc:	f002 fed4 	bl	8004568 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000218 	.word	0x20000218
 80017c8:	40003c00 	.word	0x40003c00

080017cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08e      	sub	sp, #56	; 0x38
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e0:	f107 0320 	add.w	r3, r7, #32
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
 80017f8:	615a      	str	r2, [r3, #20]
 80017fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017fc:	4b2d      	ldr	r3, [pc, #180]	; (80018b4 <MX_TIM2_Init+0xe8>)
 80017fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001802:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001804:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <MX_TIM2_Init+0xe8>)
 8001806:	2263      	movs	r2, #99	; 0x63
 8001808:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180a:	4b2a      	ldr	r3, [pc, #168]	; (80018b4 <MX_TIM2_Init+0xe8>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001810:	4b28      	ldr	r3, [pc, #160]	; (80018b4 <MX_TIM2_Init+0xe8>)
 8001812:	f242 720f 	movw	r2, #9999	; 0x270f
 8001816:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001818:	4b26      	ldr	r3, [pc, #152]	; (80018b4 <MX_TIM2_Init+0xe8>)
 800181a:	2200      	movs	r2, #0
 800181c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181e:	4b25      	ldr	r3, [pc, #148]	; (80018b4 <MX_TIM2_Init+0xe8>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001824:	4823      	ldr	r0, [pc, #140]	; (80018b4 <MX_TIM2_Init+0xe8>)
 8001826:	f007 ff83 	bl	8009730 <HAL_TIM_Base_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001830:	f002 fe9a 	bl	8004568 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001838:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800183a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800183e:	4619      	mov	r1, r3
 8001840:	481c      	ldr	r0, [pc, #112]	; (80018b4 <MX_TIM2_Init+0xe8>)
 8001842:	f008 fb55 	bl	8009ef0 <HAL_TIM_ConfigClockSource>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800184c:	f002 fe8c 	bl	8004568 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001850:	4818      	ldr	r0, [pc, #96]	; (80018b4 <MX_TIM2_Init+0xe8>)
 8001852:	f008 f879 	bl	8009948 <HAL_TIM_PWM_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800185c:	f002 fe84 	bl	8004568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001860:	2300      	movs	r3, #0
 8001862:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001868:	f107 0320 	add.w	r3, r7, #32
 800186c:	4619      	mov	r1, r3
 800186e:	4811      	ldr	r0, [pc, #68]	; (80018b4 <MX_TIM2_Init+0xe8>)
 8001870:	f008 fefa 	bl	800a668 <HAL_TIMEx_MasterConfigSynchronization>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800187a:	f002 fe75 	bl	8004568 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800187e:	2360      	movs	r3, #96	; 0x60
 8001880:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	2204      	movs	r2, #4
 8001892:	4619      	mov	r1, r3
 8001894:	4807      	ldr	r0, [pc, #28]	; (80018b4 <MX_TIM2_Init+0xe8>)
 8001896:	f008 fa69 	bl	8009d6c <HAL_TIM_PWM_ConfigChannel>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80018a0:	f002 fe62 	bl	8004568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018a4:	4803      	ldr	r0, [pc, #12]	; (80018b4 <MX_TIM2_Init+0xe8>)
 80018a6:	f002 ffdd 	bl	8004864 <HAL_TIM_MspPostInit>

}
 80018aa:	bf00      	nop
 80018ac:	3738      	adds	r7, #56	; 0x38
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000330 	.word	0x20000330

080018b8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80018bc:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <MX_TIM11_Init+0x40>)
 80018be:	4a0f      	ldr	r2, [pc, #60]	; (80018fc <MX_TIM11_Init+0x44>)
 80018c0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80018c2:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <MX_TIM11_Init+0x40>)
 80018c4:	2263      	movs	r2, #99	; 0x63
 80018c6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <MX_TIM11_Init+0x40>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <MX_TIM11_Init+0x40>)
 80018d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018d4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <MX_TIM11_Init+0x40>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <MX_TIM11_Init+0x40>)
 80018de:	2200      	movs	r2, #0
 80018e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80018e2:	4805      	ldr	r0, [pc, #20]	; (80018f8 <MX_TIM11_Init+0x40>)
 80018e4:	f007 ff24 	bl	8009730 <HAL_TIM_Base_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80018ee:	f002 fe3b 	bl	8004568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000378 	.word	0x20000378
 80018fc:	40014800 	.word	0x40014800

08001900 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <MX_USART2_UART_Init+0x50>)
 8001906:	4a13      	ldr	r2, [pc, #76]	; (8001954 <MX_USART2_UART_Init+0x54>)
 8001908:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <MX_USART2_UART_Init+0x50>)
 800190c:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8001910:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001912:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <MX_USART2_UART_Init+0x50>)
 8001914:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001918:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800191a:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <MX_USART2_UART_Init+0x50>)
 800191c:	2200      	movs	r2, #0
 800191e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <MX_USART2_UART_Init+0x50>)
 8001922:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001926:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <MX_USART2_UART_Init+0x50>)
 800192a:	220c      	movs	r2, #12
 800192c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <MX_USART2_UART_Init+0x50>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <MX_USART2_UART_Init+0x50>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800193a:	4805      	ldr	r0, [pc, #20]	; (8001950 <MX_USART2_UART_Init+0x50>)
 800193c:	f008 ff16 	bl	800a76c <HAL_UART_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001946:	f002 fe0f 	bl	8004568 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200003c0 	.word	0x200003c0
 8001954:	40004400 	.word	0x40004400

08001958 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <MX_DMA_Init+0x6c>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a17      	ldr	r2, [pc, #92]	; (80019c4 <MX_DMA_Init+0x6c>)
 8001968:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <MX_DMA_Init+0x6c>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2100      	movs	r1, #0
 800197e:	200b      	movs	r0, #11
 8001980:	f003 faa9 	bl	8004ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001984:	200b      	movs	r0, #11
 8001986:	f003 fac2 	bl	8004f0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	2010      	movs	r0, #16
 8001990:	f003 faa1 	bl	8004ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001994:	2010      	movs	r0, #16
 8001996:	f003 faba 	bl	8004f0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2100      	movs	r1, #0
 800199e:	2011      	movs	r0, #17
 80019a0:	f003 fa99 	bl	8004ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80019a4:	2011      	movs	r0, #17
 80019a6:	f003 fab2 	bl	8004f0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2100      	movs	r1, #0
 80019ae:	202f      	movs	r0, #47	; 0x2f
 80019b0:	f003 fa91 	bl	8004ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80019b4:	202f      	movs	r0, #47	; 0x2f
 80019b6:	f003 faaa 	bl	8004f0e <HAL_NVIC_EnableIRQ>

}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800

080019c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ce:	f107 0314 	add.w	r3, r7, #20
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
 80019dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	4b51      	ldr	r3, [pc, #324]	; (8001b28 <MX_GPIO_Init+0x160>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a50      	ldr	r2, [pc, #320]	; (8001b28 <MX_GPIO_Init+0x160>)
 80019e8:	f043 0304 	orr.w	r3, r3, #4
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b4e      	ldr	r3, [pc, #312]	; (8001b28 <MX_GPIO_Init+0x160>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	4b4a      	ldr	r3, [pc, #296]	; (8001b28 <MX_GPIO_Init+0x160>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a49      	ldr	r2, [pc, #292]	; (8001b28 <MX_GPIO_Init+0x160>)
 8001a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b47      	ldr	r3, [pc, #284]	; (8001b28 <MX_GPIO_Init+0x160>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	4b43      	ldr	r3, [pc, #268]	; (8001b28 <MX_GPIO_Init+0x160>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a42      	ldr	r2, [pc, #264]	; (8001b28 <MX_GPIO_Init+0x160>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b40      	ldr	r3, [pc, #256]	; (8001b28 <MX_GPIO_Init+0x160>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	4b3c      	ldr	r3, [pc, #240]	; (8001b28 <MX_GPIO_Init+0x160>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a3b      	ldr	r2, [pc, #236]	; (8001b28 <MX_GPIO_Init+0x160>)
 8001a3c:	f043 0302 	orr.w	r3, r3, #2
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b39      	ldr	r3, [pc, #228]	; (8001b28 <MX_GPIO_Init+0x160>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f240 2121 	movw	r1, #545	; 0x221
 8001a54:	4835      	ldr	r0, [pc, #212]	; (8001b2c <MX_GPIO_Init+0x164>)
 8001a56:	f004 f821 	bl	8005a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a60:	4833      	ldr	r0, [pc, #204]	; (8001b30 <MX_GPIO_Init+0x168>)
 8001a62:	f004 f81b 	bl	8005a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2180      	movs	r1, #128	; 0x80
 8001a6a:	4832      	ldr	r0, [pc, #200]	; (8001b34 <MX_GPIO_Init+0x16c>)
 8001a6c:	f004 f816 	bl	8005a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a76:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4619      	mov	r1, r3
 8001a86:	482b      	ldr	r0, [pc, #172]	; (8001b34 <MX_GPIO_Init+0x16c>)
 8001a88:	f003 fe6c 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 LD2_Pin PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin|GPIO_PIN_9;
 8001a8c:	f240 2321 	movw	r3, #545	; 0x221
 8001a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a92:	2301      	movs	r3, #1
 8001a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4821      	ldr	r0, [pc, #132]	; (8001b2c <MX_GPIO_Init+0x164>)
 8001aa6:	f003 fe5d 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pin : SS_Pin */
  GPIO_InitStruct.Pin = SS_Pin;
 8001aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SS_GPIO_Port, &GPIO_InitStruct);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	481b      	ldr	r0, [pc, #108]	; (8001b30 <MX_GPIO_Init+0x168>)
 8001ac4:	f003 fe4e 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001acc:	2301      	movs	r3, #1
 8001ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	4619      	mov	r1, r3
 8001ade:	4815      	ldr	r0, [pc, #84]	; (8001b34 <MX_GPIO_Init+0x16c>)
 8001ae0:	f003 fe40 	bl	8005764 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ae4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001aea:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	4619      	mov	r1, r3
 8001afa:	480c      	ldr	r0, [pc, #48]	; (8001b2c <MX_GPIO_Init+0x164>)
 8001afc:	f003 fe32 	bl	8005764 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2100      	movs	r1, #0
 8001b04:	2017      	movs	r0, #23
 8001b06:	f003 f9e6 	bl	8004ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b0a:	2017      	movs	r0, #23
 8001b0c:	f003 f9ff 	bl	8004f0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2100      	movs	r1, #0
 8001b14:	2028      	movs	r0, #40	; 0x28
 8001b16:	f003 f9de 	bl	8004ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b1a:	2028      	movs	r0, #40	; 0x28
 8001b1c:	f003 f9f7 	bl	8004f0e <HAL_NVIC_EnableIRQ>

}
 8001b20:	bf00      	nop
 8001b22:	3728      	adds	r7, #40	; 0x28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	40020400 	.word	0x40020400
 8001b34:	40020800 	.word	0x40020800

08001b38 <CascadeController>:

/* USER CODE BEGIN 4 */

//----------------------------------------------------------------< CONTROL >
void CascadeController()
{
 8001b38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b3c:	b088      	sub	sp, #32
 8001b3e:	af00      	add	r7, sp, #0
			if(kal_velocity < tra_velo){
				kal_velocity = tra_velo;
			}
		}
	}*/
	if(start_tra == 2){
 8001b40:	4bab      	ldr	r3, [pc, #684]	; (8001df0 <CascadeController+0x2b8>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d138      	bne.n	8001bba <CascadeController+0x82>
		if(postotra > 0.349){
 8001b48:	4baa      	ldr	r3, [pc, #680]	; (8001df4 <CascadeController+0x2bc>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fca7 	bl	80004a0 <__aeabi_f2d>
 8001b52:	a3a3      	add	r3, pc, #652	; (adr r3, 8001de0 <CascadeController+0x2a8>)
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	f7fe ff8a 	bl	8000a70 <__aeabi_dcmpgt>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d015      	beq.n	8001b8e <CascadeController+0x56>
			pos_Kp = 2.07697250571067;
 8001b62:	4ba5      	ldr	r3, [pc, #660]	; (8001df8 <CascadeController+0x2c0>)
 8001b64:	4aa5      	ldr	r2, [pc, #660]	; (8001dfc <CascadeController+0x2c4>)
 8001b66:	601a      	str	r2, [r3, #0]
			pos_Ki = 1.01617437483172;
 8001b68:	4ba5      	ldr	r3, [pc, #660]	; (8001e00 <CascadeController+0x2c8>)
 8001b6a:	4aa6      	ldr	r2, [pc, #664]	; (8001e04 <CascadeController+0x2cc>)
 8001b6c:	601a      	str	r2, [r3, #0]
			pos_Kd = 0.2545435315971;
 8001b6e:	4ba6      	ldr	r3, [pc, #664]	; (8001e08 <CascadeController+0x2d0>)
 8001b70:	4aa6      	ldr	r2, [pc, #664]	; (8001e0c <CascadeController+0x2d4>)
 8001b72:	601a      	str	r2, [r3, #0]
			velo_Kp = 0.75;
 8001b74:	4ba6      	ldr	r3, [pc, #664]	; (8001e10 <CascadeController+0x2d8>)
 8001b76:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8001b7a:	601a      	str	r2, [r3, #0]
			velo_Ki = 0;
 8001b7c:	4ba5      	ldr	r3, [pc, #660]	; (8001e14 <CascadeController+0x2dc>)
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
			velo_Kd = 0;}
 8001b84:	4ba4      	ldr	r3, [pc, #656]	; (8001e18 <CascadeController+0x2e0>)
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	e04d      	b.n	8001c2a <CascadeController+0xf2>
		else{
			pos_Kp = 4.07697250571067;
 8001b8e:	4b9a      	ldr	r3, [pc, #616]	; (8001df8 <CascadeController+0x2c0>)
 8001b90:	4aa2      	ldr	r2, [pc, #648]	; (8001e1c <CascadeController+0x2e4>)
 8001b92:	601a      	str	r2, [r3, #0]
			pos_Ki = 2.71617437483172;
 8001b94:	4b9a      	ldr	r3, [pc, #616]	; (8001e00 <CascadeController+0x2c8>)
 8001b96:	4aa2      	ldr	r2, [pc, #648]	; (8001e20 <CascadeController+0x2e8>)
 8001b98:	601a      	str	r2, [r3, #0]
			pos_Kd = 1.2545435315971;
 8001b9a:	4b9b      	ldr	r3, [pc, #620]	; (8001e08 <CascadeController+0x2d0>)
 8001b9c:	4aa1      	ldr	r2, [pc, #644]	; (8001e24 <CascadeController+0x2ec>)
 8001b9e:	601a      	str	r2, [r3, #0]
			velo_Kp = 0.5;
 8001ba0:	4b9b      	ldr	r3, [pc, #620]	; (8001e10 <CascadeController+0x2d8>)
 8001ba2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001ba6:	601a      	str	r2, [r3, #0]
			velo_Ki = 0;
 8001ba8:	4b9a      	ldr	r3, [pc, #616]	; (8001e14 <CascadeController+0x2dc>)
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
			velo_Kd = 0;
 8001bb0:	4b99      	ldr	r3, [pc, #612]	; (8001e18 <CascadeController+0x2e0>)
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	e037      	b.n	8001c2a <CascadeController+0xf2>
		}
	}
	else{
		if(postotra > 0.349){
 8001bba:	4b8e      	ldr	r3, [pc, #568]	; (8001df4 <CascadeController+0x2bc>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fc6e 	bl	80004a0 <__aeabi_f2d>
 8001bc4:	a386      	add	r3, pc, #536	; (adr r3, 8001de0 <CascadeController+0x2a8>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	f7fe ff51 	bl	8000a70 <__aeabi_dcmpgt>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d015      	beq.n	8001c00 <CascadeController+0xc8>
			pos_Kp = 4.07697250571067;
 8001bd4:	4b88      	ldr	r3, [pc, #544]	; (8001df8 <CascadeController+0x2c0>)
 8001bd6:	4a91      	ldr	r2, [pc, #580]	; (8001e1c <CascadeController+0x2e4>)
 8001bd8:	601a      	str	r2, [r3, #0]
			pos_Ki = 2.71617437483172;
 8001bda:	4b89      	ldr	r3, [pc, #548]	; (8001e00 <CascadeController+0x2c8>)
 8001bdc:	4a90      	ldr	r2, [pc, #576]	; (8001e20 <CascadeController+0x2e8>)
 8001bde:	601a      	str	r2, [r3, #0]
			pos_Kd = 1.2545435315971;
 8001be0:	4b89      	ldr	r3, [pc, #548]	; (8001e08 <CascadeController+0x2d0>)
 8001be2:	4a90      	ldr	r2, [pc, #576]	; (8001e24 <CascadeController+0x2ec>)
 8001be4:	601a      	str	r2, [r3, #0]
			velo_Kp = 1.5;
 8001be6:	4b8a      	ldr	r3, [pc, #552]	; (8001e10 <CascadeController+0x2d8>)
 8001be8:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001bec:	601a      	str	r2, [r3, #0]
			velo_Ki = 0;
 8001bee:	4b89      	ldr	r3, [pc, #548]	; (8001e14 <CascadeController+0x2dc>)
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
			velo_Kd = 0;}
 8001bf6:	4b88      	ldr	r3, [pc, #544]	; (8001e18 <CascadeController+0x2e0>)
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	e014      	b.n	8001c2a <CascadeController+0xf2>
		else{
			pos_Kp = 4.07697250571067;
 8001c00:	4b7d      	ldr	r3, [pc, #500]	; (8001df8 <CascadeController+0x2c0>)
 8001c02:	4a86      	ldr	r2, [pc, #536]	; (8001e1c <CascadeController+0x2e4>)
 8001c04:	601a      	str	r2, [r3, #0]
			pos_Ki = 2.71617437483172;
 8001c06:	4b7e      	ldr	r3, [pc, #504]	; (8001e00 <CascadeController+0x2c8>)
 8001c08:	4a85      	ldr	r2, [pc, #532]	; (8001e20 <CascadeController+0x2e8>)
 8001c0a:	601a      	str	r2, [r3, #0]
			pos_Kd = 1.2545435315971;
 8001c0c:	4b7e      	ldr	r3, [pc, #504]	; (8001e08 <CascadeController+0x2d0>)
 8001c0e:	4a85      	ldr	r2, [pc, #532]	; (8001e24 <CascadeController+0x2ec>)
 8001c10:	601a      	str	r2, [r3, #0]
			velo_Kp = 1;
 8001c12:	4b7f      	ldr	r3, [pc, #508]	; (8001e10 <CascadeController+0x2d8>)
 8001c14:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c18:	601a      	str	r2, [r3, #0]
			velo_Ki = 0;
 8001c1a:	4b7e      	ldr	r3, [pc, #504]	; (8001e14 <CascadeController+0x2dc>)
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
			velo_Kd = 0;
 8001c22:	4b7d      	ldr	r3, [pc, #500]	; (8001e18 <CascadeController+0x2e0>)
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
		}
	}

	if(tuaall > tf-(tb/3)){
 8001c2a:	4b7f      	ldr	r3, [pc, #508]	; (8001e28 <CascadeController+0x2f0>)
 8001c2c:	ed93 7a00 	vldr	s14, [r3]
 8001c30:	4b7e      	ldr	r3, [pc, #504]	; (8001e2c <CascadeController+0x2f4>)
 8001c32:	edd3 6a00 	vldr	s13, [r3]
 8001c36:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8001c3a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001c3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c42:	4b7b      	ldr	r3, [pc, #492]	; (8001e30 <CascadeController+0x2f8>)
 8001c44:	edd3 7a00 	vldr	s15, [r3]
 8001c48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c50:	d537      	bpl.n	8001cc2 <CascadeController+0x18a>
		if(postotra > 0.349){
 8001c52:	4b68      	ldr	r3, [pc, #416]	; (8001df4 <CascadeController+0x2bc>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fc22 	bl	80004a0 <__aeabi_f2d>
 8001c5c:	a360      	add	r3, pc, #384	; (adr r3, 8001de0 <CascadeController+0x2a8>)
 8001c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c62:	f7fe ff05 	bl	8000a70 <__aeabi_dcmpgt>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d015      	beq.n	8001c98 <CascadeController+0x160>
			pos_Kp = 7.07697250571067;
 8001c6c:	4b62      	ldr	r3, [pc, #392]	; (8001df8 <CascadeController+0x2c0>)
 8001c6e:	4a71      	ldr	r2, [pc, #452]	; (8001e34 <CascadeController+0x2fc>)
 8001c70:	601a      	str	r2, [r3, #0]
			pos_Ki = 3.71617437483172;
 8001c72:	4b63      	ldr	r3, [pc, #396]	; (8001e00 <CascadeController+0x2c8>)
 8001c74:	4a70      	ldr	r2, [pc, #448]	; (8001e38 <CascadeController+0x300>)
 8001c76:	601a      	str	r2, [r3, #0]
			pos_Kd = 2.25445435315971;
 8001c78:	4b63      	ldr	r3, [pc, #396]	; (8001e08 <CascadeController+0x2d0>)
 8001c7a:	4a70      	ldr	r2, [pc, #448]	; (8001e3c <CascadeController+0x304>)
 8001c7c:	601a      	str	r2, [r3, #0]
			velo_Kp = 2;
 8001c7e:	4b64      	ldr	r3, [pc, #400]	; (8001e10 <CascadeController+0x2d8>)
 8001c80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c84:	601a      	str	r2, [r3, #0]
			velo_Ki = 0;
 8001c86:	4b63      	ldr	r3, [pc, #396]	; (8001e14 <CascadeController+0x2dc>)
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
			velo_Kd = 0;}
 8001c8e:	4b62      	ldr	r3, [pc, #392]	; (8001e18 <CascadeController+0x2e0>)
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	e014      	b.n	8001cc2 <CascadeController+0x18a>
		else{
			pos_Kp = 4.07697250571067;
 8001c98:	4b57      	ldr	r3, [pc, #348]	; (8001df8 <CascadeController+0x2c0>)
 8001c9a:	4a60      	ldr	r2, [pc, #384]	; (8001e1c <CascadeController+0x2e4>)
 8001c9c:	601a      	str	r2, [r3, #0]
			pos_Ki = 2.71617437483172;
 8001c9e:	4b58      	ldr	r3, [pc, #352]	; (8001e00 <CascadeController+0x2c8>)
 8001ca0:	4a5f      	ldr	r2, [pc, #380]	; (8001e20 <CascadeController+0x2e8>)
 8001ca2:	601a      	str	r2, [r3, #0]
			pos_Kd = 1.2545435315971;
 8001ca4:	4b58      	ldr	r3, [pc, #352]	; (8001e08 <CascadeController+0x2d0>)
 8001ca6:	4a5f      	ldr	r2, [pc, #380]	; (8001e24 <CascadeController+0x2ec>)
 8001ca8:	601a      	str	r2, [r3, #0]
			velo_Kp = 1;
 8001caa:	4b59      	ldr	r3, [pc, #356]	; (8001e10 <CascadeController+0x2d8>)
 8001cac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cb0:	601a      	str	r2, [r3, #0]
			velo_Ki = 0;
 8001cb2:	4b58      	ldr	r3, [pc, #352]	; (8001e14 <CascadeController+0x2dc>)
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
			velo_Kd = 0;
 8001cba:	4b57      	ldr	r3, [pc, #348]	; (8001e18 <CascadeController+0x2e0>)
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
		}
	}
	//position control******
	float error2 = tra_pos - current_rad_wrap; //setpoint - new_Data
 8001cc2:	4b5f      	ldr	r3, [pc, #380]	; (8001e40 <CascadeController+0x308>)
 8001cc4:	ed93 7a00 	vldr	s14, [r3]
 8001cc8:	4b5e      	ldr	r3, [pc, #376]	; (8001e44 <CascadeController+0x30c>)
 8001cca:	edd3 7a00 	vldr	s15, [r3]
 8001cce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd2:	edc7 7a03 	vstr	s15, [r7, #12]
	float proportional2 = pos_Kp * error2;
 8001cd6:	4b48      	ldr	r3, [pc, #288]	; (8001df8 <CascadeController+0x2c0>)
 8001cd8:	edd3 7a00 	vldr	s15, [r3]
 8001cdc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce4:	edc7 7a02 	vstr	s15, [r7, #8]
	integrator2 = integrator2 + (0.5*pos_Ki*dt*(error2+prevError2));
 8001ce8:	4b57      	ldr	r3, [pc, #348]	; (8001e48 <CascadeController+0x310>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fbd7 	bl	80004a0 <__aeabi_f2d>
 8001cf2:	4604      	mov	r4, r0
 8001cf4:	460d      	mov	r5, r1
 8001cf6:	4b42      	ldr	r3, [pc, #264]	; (8001e00 <CascadeController+0x2c8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fbd0 	bl	80004a0 <__aeabi_f2d>
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	4b51      	ldr	r3, [pc, #324]	; (8001e4c <CascadeController+0x314>)
 8001d06:	f7fe fc23 	bl	8000550 <__aeabi_dmul>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4610      	mov	r0, r2
 8001d10:	4619      	mov	r1, r3
 8001d12:	a335      	add	r3, pc, #212	; (adr r3, 8001de8 <CascadeController+0x2b0>)
 8001d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d18:	f7fe fc1a 	bl	8000550 <__aeabi_dmul>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4690      	mov	r8, r2
 8001d22:	4699      	mov	r9, r3
 8001d24:	4b4a      	ldr	r3, [pc, #296]	; (8001e50 <CascadeController+0x318>)
 8001d26:	ed93 7a00 	vldr	s14, [r3]
 8001d2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d32:	ee17 0a90 	vmov	r0, s15
 8001d36:	f7fe fbb3 	bl	80004a0 <__aeabi_f2d>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4640      	mov	r0, r8
 8001d40:	4649      	mov	r1, r9
 8001d42:	f7fe fc05 	bl	8000550 <__aeabi_dmul>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	4629      	mov	r1, r5
 8001d4e:	f7fe fa49 	bl	80001e4 <__adddf3>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4610      	mov	r0, r2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f7fe fec9 	bl	8000af0 <__aeabi_d2f>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4a39      	ldr	r2, [pc, #228]	; (8001e48 <CascadeController+0x310>)
 8001d62:	6013      	str	r3, [r2, #0]
	float limMinInt2, limMaxInt2;
	if(limMax > proportional2){
 8001d64:	4b3b      	ldr	r3, [pc, #236]	; (8001e54 <CascadeController+0x31c>)
 8001d66:	edd3 7a00 	vldr	s15, [r3]
 8001d6a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d76:	d509      	bpl.n	8001d8c <CascadeController+0x254>
		limMaxInt2 = limMax - proportional2;}
 8001d78:	4b36      	ldr	r3, [pc, #216]	; (8001e54 <CascadeController+0x31c>)
 8001d7a:	ed93 7a00 	vldr	s14, [r3]
 8001d7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d86:	edc7 7a06 	vstr	s15, [r7, #24]
 8001d8a:	e002      	b.n	8001d92 <CascadeController+0x25a>
	else{
		limMaxInt2 = 0.0;}
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
	if(limMin < proportional2){
 8001d92:	4b31      	ldr	r3, [pc, #196]	; (8001e58 <CascadeController+0x320>)
 8001d94:	edd3 7a00 	vldr	s15, [r3]
 8001d98:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da4:	dd09      	ble.n	8001dba <CascadeController+0x282>
		limMinInt2 = limMin - proportional2;}
 8001da6:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <CascadeController+0x320>)
 8001da8:	ed93 7a00 	vldr	s14, [r3]
 8001dac:	edd7 7a02 	vldr	s15, [r7, #8]
 8001db0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001db4:	edc7 7a07 	vstr	s15, [r7, #28]
 8001db8:	e002      	b.n	8001dc0 <CascadeController+0x288>
	else{
		limMinInt2 = 0.0;}
 8001dba:	f04f 0300 	mov.w	r3, #0
 8001dbe:	61fb      	str	r3, [r7, #28]
	//Clamp integrator
	if(integrator2 > limMaxInt2){
 8001dc0:	4b21      	ldr	r3, [pc, #132]	; (8001e48 <CascadeController+0x310>)
 8001dc2:	edd3 7a00 	vldr	s15, [r3]
 8001dc6:	ed97 7a06 	vldr	s14, [r7, #24]
 8001dca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd2:	d543      	bpl.n	8001e5c <CascadeController+0x324>
		integrator2 = limMaxInt2;}
 8001dd4:	4a1c      	ldr	r2, [pc, #112]	; (8001e48 <CascadeController+0x310>)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	e04c      	b.n	8001e76 <CascadeController+0x33e>
 8001ddc:	f3af 8000 	nop.w
 8001de0:	189374bc 	.word	0x189374bc
 8001de4:	3fd65604 	.word	0x3fd65604
 8001de8:	47ae147b 	.word	0x47ae147b
 8001dec:	3f847ae1 	.word	0x3f847ae1
 8001df0:	200005f6 	.word	0x200005f6
 8001df4:	200005ec 	.word	0x200005ec
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	4004ed1e 	.word	0x4004ed1e
 8001e00:	20000004 	.word	0x20000004
 8001e04:	3f821200 	.word	0x3f821200
 8001e08:	20000008 	.word	0x20000008
 8001e0c:	3e825388 	.word	0x3e825388
 8001e10:	200004c4 	.word	0x200004c4
 8001e14:	200004c8 	.word	0x200004c8
 8001e18:	200004cc 	.word	0x200004cc
 8001e1c:	4082768f 	.word	0x4082768f
 8001e20:	402dd5cd 	.word	0x402dd5cd
 8001e24:	3fa094e2 	.word	0x3fa094e2
 8001e28:	200005dc 	.word	0x200005dc
 8001e2c:	200005d4 	.word	0x200005d4
 8001e30:	200005e4 	.word	0x200005e4
 8001e34:	40e2768f 	.word	0x40e2768f
 8001e38:	406dd5cd 	.word	0x406dd5cd
 8001e3c:	401048fb 	.word	0x401048fb
 8001e40:	200005c8 	.word	0x200005c8
 8001e44:	20000590 	.word	0x20000590
 8001e48:	20000618 	.word	0x20000618
 8001e4c:	3fe00000 	.word	0x3fe00000
 8001e50:	2000061c 	.word	0x2000061c
 8001e54:	20000034 	.word	0x20000034
 8001e58:	20000030 	.word	0x20000030
	else if(integrator2 < limMinInt2){
 8001e5c:	4bb8      	ldr	r3, [pc, #736]	; (8002140 <CascadeController+0x608>)
 8001e5e:	edd3 7a00 	vldr	s15, [r3]
 8001e62:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6e:	dd02      	ble.n	8001e76 <CascadeController+0x33e>
		integrator2 = limMinInt2;}
 8001e70:	4ab3      	ldr	r2, [pc, #716]	; (8002140 <CascadeController+0x608>)
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	6013      	str	r3, [r2, #0]

	//differentiator2 = (2*pos_Kd*(kal_position-prevMeasurement2)+(2*tuaall-dt)*differentiator2)/(2*tuaall+dt);
	differentiator2 = error2 - prevError2;
 8001e76:	4bb3      	ldr	r3, [pc, #716]	; (8002144 <CascadeController+0x60c>)
 8001e78:	edd3 7a00 	vldr	s15, [r3]
 8001e7c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e84:	4bb0      	ldr	r3, [pc, #704]	; (8002148 <CascadeController+0x610>)
 8001e86:	edc3 7a00 	vstr	s15, [r3]
	poscommand = proportional2 + integrator2 + (pos_Kd*differentiator2);
 8001e8a:	4bad      	ldr	r3, [pc, #692]	; (8002140 <CascadeController+0x608>)
 8001e8c:	ed93 7a00 	vldr	s14, [r3]
 8001e90:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e98:	4bac      	ldr	r3, [pc, #688]	; (800214c <CascadeController+0x614>)
 8001e9a:	edd3 6a00 	vldr	s13, [r3]
 8001e9e:	4baa      	ldr	r3, [pc, #680]	; (8002148 <CascadeController+0x610>)
 8001ea0:	edd3 7a00 	vldr	s15, [r3]
 8001ea4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eac:	4ba8      	ldr	r3, [pc, #672]	; (8002150 <CascadeController+0x618>)
 8001eae:	edc3 7a00 	vstr	s15, [r3]

	//velocity control*******

	if(direct == 1){
 8001eb2:	4ba8      	ldr	r3, [pc, #672]	; (8002154 <CascadeController+0x61c>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d131      	bne.n	8001f1e <CascadeController+0x3e6>
		ch_velo = kal_velocity;
 8001eba:	4ba7      	ldr	r3, [pc, #668]	; (8002158 <CascadeController+0x620>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4aa7      	ldr	r2, [pc, #668]	; (800215c <CascadeController+0x624>)
 8001ec0:	6013      	str	r3, [r2, #0]
		if(ch_velo > limitOmega/9.5493){
 8001ec2:	4ba6      	ldr	r3, [pc, #664]	; (800215c <CascadeController+0x624>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe faea 	bl	80004a0 <__aeabi_f2d>
 8001ecc:	4604      	mov	r4, r0
 8001ece:	460d      	mov	r5, r1
 8001ed0:	4ba3      	ldr	r3, [pc, #652]	; (8002160 <CascadeController+0x628>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe fae3 	bl	80004a0 <__aeabi_f2d>
 8001eda:	a395      	add	r3, pc, #596	; (adr r3, 8002130 <CascadeController+0x5f8>)
 8001edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee0:	f7fe fc60 	bl	80007a4 <__aeabi_ddiv>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4620      	mov	r0, r4
 8001eea:	4629      	mov	r1, r5
 8001eec:	f7fe fdc0 	bl	8000a70 <__aeabi_dcmpgt>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d04d      	beq.n	8001f92 <CascadeController+0x45a>
			kal_velocity = limitOmega/9.5493;
 8001ef6:	4b9a      	ldr	r3, [pc, #616]	; (8002160 <CascadeController+0x628>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fad0 	bl	80004a0 <__aeabi_f2d>
 8001f00:	a38b      	add	r3, pc, #556	; (adr r3, 8002130 <CascadeController+0x5f8>)
 8001f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f06:	f7fe fc4d 	bl	80007a4 <__aeabi_ddiv>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4610      	mov	r0, r2
 8001f10:	4619      	mov	r1, r3
 8001f12:	f7fe fded 	bl	8000af0 <__aeabi_d2f>
 8001f16:	4603      	mov	r3, r0
 8001f18:	4a8f      	ldr	r2, [pc, #572]	; (8002158 <CascadeController+0x620>)
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	e039      	b.n	8001f92 <CascadeController+0x45a>
		}
	}
	else{
		ch_velo = kal_velocity*-1;
 8001f1e:	4b8e      	ldr	r3, [pc, #568]	; (8002158 <CascadeController+0x620>)
 8001f20:	edd3 7a00 	vldr	s15, [r3]
 8001f24:	eef1 7a67 	vneg.f32	s15, s15
 8001f28:	4b8c      	ldr	r3, [pc, #560]	; (800215c <CascadeController+0x624>)
 8001f2a:	edc3 7a00 	vstr	s15, [r3]
		if(ch_velo > limitOmega/9.5493){
 8001f2e:	4b8b      	ldr	r3, [pc, #556]	; (800215c <CascadeController+0x624>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fab4 	bl	80004a0 <__aeabi_f2d>
 8001f38:	4604      	mov	r4, r0
 8001f3a:	460d      	mov	r5, r1
 8001f3c:	4b88      	ldr	r3, [pc, #544]	; (8002160 <CascadeController+0x628>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe faad 	bl	80004a0 <__aeabi_f2d>
 8001f46:	a37a      	add	r3, pc, #488	; (adr r3, 8002130 <CascadeController+0x5f8>)
 8001f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4c:	f7fe fc2a 	bl	80007a4 <__aeabi_ddiv>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4620      	mov	r0, r4
 8001f56:	4629      	mov	r1, r5
 8001f58:	f7fe fd8a 	bl	8000a70 <__aeabi_dcmpgt>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d017      	beq.n	8001f92 <CascadeController+0x45a>
			kal_velocity = (limitOmega/9.5493)*-1;
 8001f62:	4b7f      	ldr	r3, [pc, #508]	; (8002160 <CascadeController+0x628>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe fa9a 	bl	80004a0 <__aeabi_f2d>
 8001f6c:	a370      	add	r3, pc, #448	; (adr r3, 8002130 <CascadeController+0x5f8>)
 8001f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f72:	f7fe fc17 	bl	80007a4 <__aeabi_ddiv>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f7fe fdb7 	bl	8000af0 <__aeabi_d2f>
 8001f82:	4603      	mov	r3, r0
 8001f84:	ee07 3a90 	vmov	s15, r3
 8001f88:	eef1 7a67 	vneg.f32	s15, s15
 8001f8c:	4b72      	ldr	r3, [pc, #456]	; (8002158 <CascadeController+0x620>)
 8001f8e:	edc3 7a00 	vstr	s15, [r3]
		}
	}

	error = tra_velo+poscommand - kal_velocity; //setpoint+poscom - new_Data
 8001f92:	4b74      	ldr	r3, [pc, #464]	; (8002164 <CascadeController+0x62c>)
 8001f94:	ed93 7a00 	vldr	s14, [r3]
 8001f98:	4b6d      	ldr	r3, [pc, #436]	; (8002150 <CascadeController+0x618>)
 8001f9a:	edd3 7a00 	vldr	s15, [r3]
 8001f9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fa2:	4b6d      	ldr	r3, [pc, #436]	; (8002158 <CascadeController+0x620>)
 8001fa4:	edd3 7a00 	vldr	s15, [r3]
 8001fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fac:	4b6e      	ldr	r3, [pc, #440]	; (8002168 <CascadeController+0x630>)
 8001fae:	edc3 7a00 	vstr	s15, [r3]
	float proportional = velo_Kp * error;
 8001fb2:	4b6e      	ldr	r3, [pc, #440]	; (800216c <CascadeController+0x634>)
 8001fb4:	ed93 7a00 	vldr	s14, [r3]
 8001fb8:	4b6b      	ldr	r3, [pc, #428]	; (8002168 <CascadeController+0x630>)
 8001fba:	edd3 7a00 	vldr	s15, [r3]
 8001fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc2:	edc7 7a01 	vstr	s15, [r7, #4]
	integrator = integrator + (0.5*velo_Ki*dt*(error+prevError));
 8001fc6:	4b6a      	ldr	r3, [pc, #424]	; (8002170 <CascadeController+0x638>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fa68 	bl	80004a0 <__aeabi_f2d>
 8001fd0:	4604      	mov	r4, r0
 8001fd2:	460d      	mov	r5, r1
 8001fd4:	4b67      	ldr	r3, [pc, #412]	; (8002174 <CascadeController+0x63c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe fa61 	bl	80004a0 <__aeabi_f2d>
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	4b65      	ldr	r3, [pc, #404]	; (8002178 <CascadeController+0x640>)
 8001fe4:	f7fe fab4 	bl	8000550 <__aeabi_dmul>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4610      	mov	r0, r2
 8001fee:	4619      	mov	r1, r3
 8001ff0:	a351      	add	r3, pc, #324	; (adr r3, 8002138 <CascadeController+0x600>)
 8001ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff6:	f7fe faab 	bl	8000550 <__aeabi_dmul>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4690      	mov	r8, r2
 8002000:	4699      	mov	r9, r3
 8002002:	4b59      	ldr	r3, [pc, #356]	; (8002168 <CascadeController+0x630>)
 8002004:	ed93 7a00 	vldr	s14, [r3]
 8002008:	4b5c      	ldr	r3, [pc, #368]	; (800217c <CascadeController+0x644>)
 800200a:	edd3 7a00 	vldr	s15, [r3]
 800200e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002012:	ee17 0a90 	vmov	r0, s15
 8002016:	f7fe fa43 	bl	80004a0 <__aeabi_f2d>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4640      	mov	r0, r8
 8002020:	4649      	mov	r1, r9
 8002022:	f7fe fa95 	bl	8000550 <__aeabi_dmul>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4620      	mov	r0, r4
 800202c:	4629      	mov	r1, r5
 800202e:	f7fe f8d9 	bl	80001e4 <__adddf3>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	f7fe fd59 	bl	8000af0 <__aeabi_d2f>
 800203e:	4603      	mov	r3, r0
 8002040:	4a4b      	ldr	r2, [pc, #300]	; (8002170 <CascadeController+0x638>)
 8002042:	6013      	str	r3, [r2, #0]
	float limMinInt, limMaxInt;
	if(limMax > proportional){
 8002044:	4b4e      	ldr	r3, [pc, #312]	; (8002180 <CascadeController+0x648>)
 8002046:	edd3 7a00 	vldr	s15, [r3]
 800204a:	ed97 7a01 	vldr	s14, [r7, #4]
 800204e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002056:	d509      	bpl.n	800206c <CascadeController+0x534>
		limMaxInt = limMax - proportional;}
 8002058:	4b49      	ldr	r3, [pc, #292]	; (8002180 <CascadeController+0x648>)
 800205a:	ed93 7a00 	vldr	s14, [r3]
 800205e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002066:	edc7 7a04 	vstr	s15, [r7, #16]
 800206a:	e002      	b.n	8002072 <CascadeController+0x53a>
	else{
		limMaxInt = 0.0;}
 800206c:	f04f 0300 	mov.w	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
	if(limMin < proportional){
 8002072:	4b44      	ldr	r3, [pc, #272]	; (8002184 <CascadeController+0x64c>)
 8002074:	edd3 7a00 	vldr	s15, [r3]
 8002078:	ed97 7a01 	vldr	s14, [r7, #4]
 800207c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002084:	dd09      	ble.n	800209a <CascadeController+0x562>
		limMinInt = limMin - proportional;}
 8002086:	4b3f      	ldr	r3, [pc, #252]	; (8002184 <CascadeController+0x64c>)
 8002088:	ed93 7a00 	vldr	s14, [r3]
 800208c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002094:	edc7 7a05 	vstr	s15, [r7, #20]
 8002098:	e002      	b.n	80020a0 <CascadeController+0x568>
	else{
		limMinInt = 0.0;}
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
	//Clamp integrator
	if(integrator > limMaxInt){
 80020a0:	4b33      	ldr	r3, [pc, #204]	; (8002170 <CascadeController+0x638>)
 80020a2:	edd3 7a00 	vldr	s15, [r3]
 80020a6:	ed97 7a04 	vldr	s14, [r7, #16]
 80020aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b2:	d503      	bpl.n	80020bc <CascadeController+0x584>
		integrator = limMaxInt;}
 80020b4:	4a2e      	ldr	r2, [pc, #184]	; (8002170 <CascadeController+0x638>)
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	e00c      	b.n	80020d6 <CascadeController+0x59e>
	else if(integrator < limMinInt){
 80020bc:	4b2c      	ldr	r3, [pc, #176]	; (8002170 <CascadeController+0x638>)
 80020be:	edd3 7a00 	vldr	s15, [r3]
 80020c2:	ed97 7a05 	vldr	s14, [r7, #20]
 80020c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ce:	dd02      	ble.n	80020d6 <CascadeController+0x59e>
		integrator = limMinInt;}
 80020d0:	4a27      	ldr	r2, [pc, #156]	; (8002170 <CascadeController+0x638>)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	6013      	str	r3, [r2, #0]

	//differentiator = (2*velo_Kd*(kal_velocity-prevMeasurement)+(2*tuaall-dt)*differentiator)/(2*tuaall+dt);
	differentiator = error - prevError;
 80020d6:	4b24      	ldr	r3, [pc, #144]	; (8002168 <CascadeController+0x630>)
 80020d8:	ed93 7a00 	vldr	s14, [r3]
 80020dc:	4b27      	ldr	r3, [pc, #156]	; (800217c <CascadeController+0x644>)
 80020de:	edd3 7a00 	vldr	s15, [r3]
 80020e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020e6:	4b28      	ldr	r3, [pc, #160]	; (8002188 <CascadeController+0x650>)
 80020e8:	edc3 7a00 	vstr	s15, [r3]
	volt_controller = proportional + integrator + (velo_Kd*differentiator);
 80020ec:	4b20      	ldr	r3, [pc, #128]	; (8002170 <CascadeController+0x638>)
 80020ee:	ed93 7a00 	vldr	s14, [r3]
 80020f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80020f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020fa:	4b24      	ldr	r3, [pc, #144]	; (800218c <CascadeController+0x654>)
 80020fc:	edd3 6a00 	vldr	s13, [r3]
 8002100:	4b21      	ldr	r3, [pc, #132]	; (8002188 <CascadeController+0x650>)
 8002102:	edd3 7a00 	vldr	s15, [r3]
 8002106:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800210a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800210e:	4b20      	ldr	r3, [pc, #128]	; (8002190 <CascadeController+0x658>)
 8002110:	edc3 7a00 	vstr	s15, [r3]
	if(volt_controller > 12.0){
 8002114:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <CascadeController+0x658>)
 8002116:	edd3 7a00 	vldr	s15, [r3]
 800211a:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 800211e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002126:	dd37      	ble.n	8002198 <CascadeController+0x660>
		volt_controller = 12.0;}
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <CascadeController+0x658>)
 800212a:	4a1a      	ldr	r2, [pc, #104]	; (8002194 <CascadeController+0x65c>)
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	e040      	b.n	80021b2 <CascadeController+0x67a>
 8002130:	d97f62b7 	.word	0xd97f62b7
 8002134:	4023193d 	.word	0x4023193d
 8002138:	47ae147b 	.word	0x47ae147b
 800213c:	3f847ae1 	.word	0x3f847ae1
 8002140:	20000618 	.word	0x20000618
 8002144:	2000061c 	.word	0x2000061c
 8002148:	20000620 	.word	0x20000620
 800214c:	20000008 	.word	0x20000008
 8002150:	2000062c 	.word	0x2000062c
 8002154:	2000002c 	.word	0x2000002c
 8002158:	200005c0 	.word	0x200005c0
 800215c:	200005fc 	.word	0x200005fc
 8002160:	20000014 	.word	0x20000014
 8002164:	200005cc 	.word	0x200005cc
 8002168:	20000630 	.word	0x20000630
 800216c:	200004c4 	.word	0x200004c4
 8002170:	20000608 	.word	0x20000608
 8002174:	200004c8 	.word	0x200004c8
 8002178:	3fe00000 	.word	0x3fe00000
 800217c:	2000060c 	.word	0x2000060c
 8002180:	20000034 	.word	0x20000034
 8002184:	20000030 	.word	0x20000030
 8002188:	20000610 	.word	0x20000610
 800218c:	200004cc 	.word	0x200004cc
 8002190:	20000634 	.word	0x20000634
 8002194:	41400000 	.word	0x41400000
	else if(volt_controller < -12.0){
 8002198:	4b19      	ldr	r3, [pc, #100]	; (8002200 <CascadeController+0x6c8>)
 800219a:	edd3 7a00 	vldr	s15, [r3]
 800219e:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
 80021a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021aa:	d502      	bpl.n	80021b2 <CascadeController+0x67a>
		volt_controller = -12.0;}
 80021ac:	4b14      	ldr	r3, [pc, #80]	; (8002200 <CascadeController+0x6c8>)
 80021ae:	4a15      	ldr	r2, [pc, #84]	; (8002204 <CascadeController+0x6cc>)
 80021b0:	601a      	str	r2, [r3, #0]

	//PIDout = PIDout*10000/12.0;
	PIDout = (volt_inverse+volt_controller)*10000/12.0;
 80021b2:	4b15      	ldr	r3, [pc, #84]	; (8002208 <CascadeController+0x6d0>)
 80021b4:	ed93 7a00 	vldr	s14, [r3]
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <CascadeController+0x6c8>)
 80021ba:	edd3 7a00 	vldr	s15, [r3]
 80021be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800220c <CascadeController+0x6d4>
 80021c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021ca:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 80021ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021d2:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <CascadeController+0x6d8>)
 80021d4:	edc3 7a00 	vstr	s15, [r3]
			if(PIDout < 0){
				PIDout = 0;
			}
		}
	}*/
	prevError2 = error2;
 80021d8:	4a0e      	ldr	r2, [pc, #56]	; (8002214 <CascadeController+0x6dc>)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6013      	str	r3, [r2, #0]
	prevMeasurement2 = current_rad_wrap;
 80021de:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <CascadeController+0x6e0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a0e      	ldr	r2, [pc, #56]	; (800221c <CascadeController+0x6e4>)
 80021e4:	6013      	str	r3, [r2, #0]
	prevError = error;
 80021e6:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <CascadeController+0x6e8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a0e      	ldr	r2, [pc, #56]	; (8002224 <CascadeController+0x6ec>)
 80021ec:	6013      	str	r3, [r2, #0]
	prevMeasurement = kal_velocity;
 80021ee:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <CascadeController+0x6f0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a0e      	ldr	r2, [pc, #56]	; (800222c <CascadeController+0x6f4>)
 80021f4:	6013      	str	r3, [r2, #0]
}
 80021f6:	bf00      	nop
 80021f8:	3720      	adds	r7, #32
 80021fa:	46bd      	mov	sp, r7
 80021fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002200:	20000634 	.word	0x20000634
 8002204:	c1400000 	.word	0xc1400000
 8002208:	200007e0 	.word	0x200007e0
 800220c:	461c4000 	.word	0x461c4000
 8002210:	20000628 	.word	0x20000628
 8002214:	2000061c 	.word	0x2000061c
 8002218:	20000590 	.word	0x20000590
 800221c:	20000624 	.word	0x20000624
 8002220:	20000630 	.word	0x20000630
 8002224:	2000060c 	.word	0x2000060c
 8002228:	200005c0 	.word	0x200005c0
 800222c:	20000614 	.word	0x20000614

08002230 <reset>:

void reset()
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
	tuaall = 0;
 8002234:	4b09      	ldr	r3, [pc, #36]	; (800225c <reset+0x2c>)
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
	Drivemotor(0);
 800223c:	2000      	movs	r0, #0
 800223e:	f001 f80b 	bl	8003258 <Drivemotor>
	PIDon = 0;
 8002242:	4b07      	ldr	r3, [pc, #28]	; (8002260 <reset+0x30>)
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]
	PIDout = 0;
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <reset+0x34>)
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
	finish = 0;
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <reset+0x38>)
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}
 800225c:	200005e4 	.word	0x200005e4
 8002260:	200005f8 	.word	0x200005f8
 8002264:	20000628 	.word	0x20000628
 8002268:	20000600 	.word	0x20000600
 800226c:	00000000 	.word	0x00000000

08002270 <set_initial>:

void set_initial()
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
	  static uint64_t timeset2 = 0;
	  if (timeset2 < 500000) {
 8002274:	4b2a      	ldr	r3, [pc, #168]	; (8002320 <set_initial+0xb0>)
 8002276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227a:	492a      	ldr	r1, [pc, #168]	; (8002324 <set_initial+0xb4>)
 800227c:	428a      	cmp	r2, r1
 800227e:	f173 0300 	sbcs.w	r3, r3, #0
 8002282:	d203      	bcs.n	800228c <set_initial+0x1c>
		  Drivemotor(-2500);
 8002284:	4828      	ldr	r0, [pc, #160]	; (8002328 <set_initial+0xb8>)
 8002286:	f000 ffe7 	bl	8003258 <Drivemotor>
 800228a:	e038      	b.n	80022fe <set_initial+0x8e>
		  ;}
	  else if (timeset2 < 1500000) {
 800228c:	4b24      	ldr	r3, [pc, #144]	; (8002320 <set_initial+0xb0>)
 800228e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002292:	4926      	ldr	r1, [pc, #152]	; (800232c <set_initial+0xbc>)
 8002294:	428a      	cmp	r2, r1
 8002296:	f173 0300 	sbcs.w	r3, r3, #0
 800229a:	d204      	bcs.n	80022a6 <set_initial+0x36>
		  Drivemotor(2500);
 800229c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80022a0:	f000 ffda 	bl	8003258 <Drivemotor>
 80022a4:	e02b      	b.n	80022fe <set_initial+0x8e>
		  ;}
	  else{
		  Drivemotor(-2500);
 80022a6:	4820      	ldr	r0, [pc, #128]	; (8002328 <set_initial+0xb8>)
 80022a8:	f000 ffd6 	bl	8003258 <Drivemotor>
		  if(current_rad >= 1.55 && current_rad <= 1.6){
 80022ac:	4b20      	ldr	r3, [pc, #128]	; (8002330 <set_initial+0xc0>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe f8f5 	bl	80004a0 <__aeabi_f2d>
 80022b6:	a316      	add	r3, pc, #88	; (adr r3, 8002310 <set_initial+0xa0>)
 80022b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022bc:	f7fe fbce 	bl	8000a5c <__aeabi_dcmpge>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d01b      	beq.n	80022fe <set_initial+0x8e>
 80022c6:	4b1a      	ldr	r3, [pc, #104]	; (8002330 <set_initial+0xc0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe f8e8 	bl	80004a0 <__aeabi_f2d>
 80022d0:	a311      	add	r3, pc, #68	; (adr r3, 8002318 <set_initial+0xa8>)
 80022d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d6:	f7fe fbb7 	bl	8000a48 <__aeabi_dcmple>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00e      	beq.n	80022fe <set_initial+0x8e>
			  Reached = 1;
 80022e0:	4b14      	ldr	r3, [pc, #80]	; (8002334 <set_initial+0xc4>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	701a      	strb	r2, [r3, #0]
			  HMEtimeStamp = HAL_GetTick();
 80022e6:	f002 fceb 	bl	8004cc0 <HAL_GetTick>
 80022ea:	4603      	mov	r3, r0
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	4b12      	ldr	r3, [pc, #72]	; (8002338 <set_initial+0xc8>)
 80022f0:	801a      	strh	r2, [r3, #0]
			  setinitial = 0;
 80022f2:	4b12      	ldr	r3, [pc, #72]	; (800233c <set_initial+0xcc>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]
			  Drivemotor(0);
 80022f8:	2000      	movs	r0, #0
 80022fa:	f000 ffad 	bl	8003258 <Drivemotor>
		  }
	  }
	  timeset2 = micros();
 80022fe:	f001 fb1b 	bl	8003938 <micros>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	4906      	ldr	r1, [pc, #24]	; (8002320 <set_initial+0xb0>)
 8002308:	e9c1 2300 	strd	r2, r3, [r1]
}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}
 8002310:	cccccccd 	.word	0xcccccccd
 8002314:	3ff8cccc 	.word	0x3ff8cccc
 8002318:	9999999a 	.word	0x9999999a
 800231c:	3ff99999 	.word	0x3ff99999
 8002320:	20000818 	.word	0x20000818
 8002324:	0007a120 	.word	0x0007a120
 8002328:	fffff63c 	.word	0xfffff63c
 800232c:	0016e360 	.word	0x0016e360
 8002330:	2000058c 	.word	0x2000058c
 8002334:	2000053b 	.word	0x2000053b
 8002338:	20000568 	.word	0x20000568
 800233c:	2000000c 	.word	0x2000000c

08002340 <set_home>:

void set_home()
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
	  Drivemotor(-2500);
 8002344:	480e      	ldr	r0, [pc, #56]	; (8002380 <set_home+0x40>)
 8002346:	f000 ff87 	bl	8003258 <Drivemotor>
	  if(current_rad_wrap <= 0){
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <set_home+0x44>)
 800234c:	edd3 7a00 	vldr	s15, [r3]
 8002350:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002358:	d900      	bls.n	800235c <set_home+0x1c>
		  Reached = 1;
		  HMEtimeStamp = HAL_GetTick();
		  setzero = 0;
		  Drivemotor(0);
	  }
}
 800235a:	e00e      	b.n	800237a <set_home+0x3a>
		  Reached = 1;
 800235c:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <set_home+0x48>)
 800235e:	2201      	movs	r2, #1
 8002360:	701a      	strb	r2, [r3, #0]
		  HMEtimeStamp = HAL_GetTick();
 8002362:	f002 fcad 	bl	8004cc0 <HAL_GetTick>
 8002366:	4603      	mov	r3, r0
 8002368:	b29a      	uxth	r2, r3
 800236a:	4b08      	ldr	r3, [pc, #32]	; (800238c <set_home+0x4c>)
 800236c:	801a      	strh	r2, [r3, #0]
		  setzero = 0;
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <set_home+0x50>)
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]
		  Drivemotor(0);
 8002374:	2000      	movs	r0, #0
 8002376:	f000 ff6f 	bl	8003258 <Drivemotor>
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	fffff63c 	.word	0xfffff63c
 8002384:	20000590 	.word	0x20000590
 8002388:	2000053b 	.word	0x2000053b
 800238c:	20000568 	.word	0x20000568
 8002390:	200005ac 	.word	0x200005ac
 8002394:	00000000 	.word	0x00000000

08002398 <MoveToStation>:

void MoveToStation()
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
//			  postotra = postotra*-1;
//			  direct = 0;}
//		  State = Working;
//		  update = 0;
//	  }
	  inputpos = Destination[n]/57.2957795;
 800239c:	4b24      	ldr	r3, [pc, #144]	; (8002430 <MoveToStation+0x98>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	461a      	mov	r2, r3
 80023a2:	4b24      	ldr	r3, [pc, #144]	; (8002434 <MoveToStation+0x9c>)
 80023a4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe f867 	bl	800047c <__aeabi_i2d>
 80023ae:	a31e      	add	r3, pc, #120	; (adr r3, 8002428 <MoveToStation+0x90>)
 80023b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b4:	f7fe f9f6 	bl	80007a4 <__aeabi_ddiv>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4610      	mov	r0, r2
 80023be:	4619      	mov	r1, r3
 80023c0:	f7fe fb96 	bl	8000af0 <__aeabi_d2f>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4a1c      	ldr	r2, [pc, #112]	; (8002438 <MoveToStation+0xa0>)
 80023c8:	6013      	str	r3, [r2, #0]
	  postotra = inputpos-current_rad_wrap;
 80023ca:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <MoveToStation+0xa0>)
 80023cc:	ed93 7a00 	vldr	s14, [r3]
 80023d0:	4b1a      	ldr	r3, [pc, #104]	; (800243c <MoveToStation+0xa4>)
 80023d2:	edd3 7a00 	vldr	s15, [r3]
 80023d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023da:	4b19      	ldr	r3, [pc, #100]	; (8002440 <MoveToStation+0xa8>)
 80023dc:	edc3 7a00 	vstr	s15, [r3]
	  rad_before = current_rad_wrap;
 80023e0:	4b16      	ldr	r3, [pc, #88]	; (800243c <MoveToStation+0xa4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a17      	ldr	r2, [pc, #92]	; (8002444 <MoveToStation+0xac>)
 80023e6:	6013      	str	r3, [r2, #0]
	  if(postotra >= 0){
 80023e8:	4b15      	ldr	r3, [pc, #84]	; (8002440 <MoveToStation+0xa8>)
 80023ea:	edd3 7a00 	vldr	s15, [r3]
 80023ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f6:	db03      	blt.n	8002400 <MoveToStation+0x68>
		  direct = 1;}
 80023f8:	4b13      	ldr	r3, [pc, #76]	; (8002448 <MoveToStation+0xb0>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
 80023fe:	e00a      	b.n	8002416 <MoveToStation+0x7e>
	  else{
		  postotra = postotra*-1;
 8002400:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <MoveToStation+0xa8>)
 8002402:	edd3 7a00 	vldr	s15, [r3]
 8002406:	eef1 7a67 	vneg.f32	s15, s15
 800240a:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <MoveToStation+0xa8>)
 800240c:	edc3 7a00 	vstr	s15, [r3]
		  direct = 0;}
 8002410:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <MoveToStation+0xb0>)
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
	  State = Working;
 8002416:	4b0d      	ldr	r3, [pc, #52]	; (800244c <MoveToStation+0xb4>)
 8002418:	2201      	movs	r2, #1
 800241a:	701a      	strb	r2, [r3, #0]
	  update = 0;
 800241c:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <MoveToStation+0xb8>)
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	1a47a9e3 	.word	0x1a47a9e3
 800242c:	404ca5dc 	.word	0x404ca5dc
 8002430:	20000544 	.word	0x20000544
 8002434:	200004d4 	.word	0x200004d4
 8002438:	200005e8 	.word	0x200005e8
 800243c:	20000590 	.word	0x20000590
 8002440:	200005ec 	.word	0x200005ec
 8002444:	200005f0 	.word	0x200005f0
 8002448:	2000002c 	.word	0x2000002c
 800244c:	200005f7 	.word	0x200005f7
 8002450:	200005f4 	.word	0x200005f4
 8002454:	00000000 	.word	0x00000000

08002458 <inverse_tran>:

void inverse_tran(){
 8002458:	b5b0      	push	{r4, r5, r7, lr}
 800245a:	af00      	add	r7, sp, #0
	x_n = tra_velo;
 800245c:	4b3a      	ldr	r3, [pc, #232]	; (8002548 <inverse_tran+0xf0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a3a      	ldr	r2, [pc, #232]	; (800254c <inverse_tran+0xf4>)
 8002462:	6013      	str	r3, [r2, #0]
	volt_inverse = (x_n - (0.9724*x_n_1) + (0.003346*x_n_2) - (0.0004612*y_n_1))/0.002803;
 8002464:	4b39      	ldr	r3, [pc, #228]	; (800254c <inverse_tran+0xf4>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe f819 	bl	80004a0 <__aeabi_f2d>
 800246e:	4604      	mov	r4, r0
 8002470:	460d      	mov	r5, r1
 8002472:	4b37      	ldr	r3, [pc, #220]	; (8002550 <inverse_tran+0xf8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe f812 	bl	80004a0 <__aeabi_f2d>
 800247c:	a32a      	add	r3, pc, #168	; (adr r3, 8002528 <inverse_tran+0xd0>)
 800247e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002482:	f7fe f865 	bl	8000550 <__aeabi_dmul>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4620      	mov	r0, r4
 800248c:	4629      	mov	r1, r5
 800248e:	f7fd fea7 	bl	80001e0 <__aeabi_dsub>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4614      	mov	r4, r2
 8002498:	461d      	mov	r5, r3
 800249a:	4b2e      	ldr	r3, [pc, #184]	; (8002554 <inverse_tran+0xfc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fd fffe 	bl	80004a0 <__aeabi_f2d>
 80024a4:	a322      	add	r3, pc, #136	; (adr r3, 8002530 <inverse_tran+0xd8>)
 80024a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024aa:	f7fe f851 	bl	8000550 <__aeabi_dmul>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4620      	mov	r0, r4
 80024b4:	4629      	mov	r1, r5
 80024b6:	f7fd fe95 	bl	80001e4 <__adddf3>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4614      	mov	r4, r2
 80024c0:	461d      	mov	r5, r3
 80024c2:	4b25      	ldr	r3, [pc, #148]	; (8002558 <inverse_tran+0x100>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fd ffea 	bl	80004a0 <__aeabi_f2d>
 80024cc:	a31a      	add	r3, pc, #104	; (adr r3, 8002538 <inverse_tran+0xe0>)
 80024ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d2:	f7fe f83d 	bl	8000550 <__aeabi_dmul>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	4620      	mov	r0, r4
 80024dc:	4629      	mov	r1, r5
 80024de:	f7fd fe7f 	bl	80001e0 <__aeabi_dsub>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4610      	mov	r0, r2
 80024e8:	4619      	mov	r1, r3
 80024ea:	a315      	add	r3, pc, #84	; (adr r3, 8002540 <inverse_tran+0xe8>)
 80024ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f0:	f7fe f958 	bl	80007a4 <__aeabi_ddiv>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	f7fe faf8 	bl	8000af0 <__aeabi_d2f>
 8002500:	4603      	mov	r3, r0
 8002502:	4a16      	ldr	r2, [pc, #88]	; (800255c <inverse_tran+0x104>)
 8002504:	6013      	str	r3, [r2, #0]
	x_n_2 = x_n_1;
 8002506:	4b12      	ldr	r3, [pc, #72]	; (8002550 <inverse_tran+0xf8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a12      	ldr	r2, [pc, #72]	; (8002554 <inverse_tran+0xfc>)
 800250c:	6013      	str	r3, [r2, #0]
	x_n_1 = x_n;
 800250e:	4b0f      	ldr	r3, [pc, #60]	; (800254c <inverse_tran+0xf4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a0f      	ldr	r2, [pc, #60]	; (8002550 <inverse_tran+0xf8>)
 8002514:	6013      	str	r3, [r2, #0]
	y_n_1 = volt_inverse;
 8002516:	4b11      	ldr	r3, [pc, #68]	; (800255c <inverse_tran+0x104>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a0f      	ldr	r2, [pc, #60]	; (8002558 <inverse_tran+0x100>)
 800251c:	6013      	str	r3, [r2, #0]
}
 800251e:	bf00      	nop
 8002520:	bdb0      	pop	{r4, r5, r7, pc}
 8002522:	bf00      	nop
 8002524:	f3af 8000 	nop.w
 8002528:	9ad42c3d 	.word	0x9ad42c3d
 800252c:	3fef1de6 	.word	0x3fef1de6
 8002530:	12513b5c 	.word	0x12513b5c
 8002534:	3f6b6912 	.word	0x3f6b6912
 8002538:	eabaf45d 	.word	0xeabaf45d
 800253c:	3f3e39a6 	.word	0x3f3e39a6
 8002540:	2a94ff00 	.word	0x2a94ff00
 8002544:	3f66f651 	.word	0x3f66f651
 8002548:	200005cc 	.word	0x200005cc
 800254c:	200007e4 	.word	0x200007e4
 8002550:	200007e8 	.word	0x200007e8
 8002554:	200007ec 	.word	0x200007ec
 8002558:	200007f0 	.word	0x200007f0
 800255c:	200007e0 	.word	0x200007e0

08002560 <lowpass>:
void lowpass()
{
 8002560:	b5b0      	push	{r4, r5, r7, lr}
 8002562:	af00      	add	r7, sp, #0
	velo_lowpass = 0.99529869*velo_lowpass + 0.00235066*kal_velocity + 0.00235066*prevlowpass;
 8002564:	4b48      	ldr	r3, [pc, #288]	; (8002688 <lowpass+0x128>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f7fd ff99 	bl	80004a0 <__aeabi_f2d>
 800256e:	a33e      	add	r3, pc, #248	; (adr r3, 8002668 <lowpass+0x108>)
 8002570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002574:	f7fd ffec 	bl	8000550 <__aeabi_dmul>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4614      	mov	r4, r2
 800257e:	461d      	mov	r5, r3
 8002580:	4b42      	ldr	r3, [pc, #264]	; (800268c <lowpass+0x12c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7fd ff8b 	bl	80004a0 <__aeabi_f2d>
 800258a:	a339      	add	r3, pc, #228	; (adr r3, 8002670 <lowpass+0x110>)
 800258c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002590:	f7fd ffde 	bl	8000550 <__aeabi_dmul>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4620      	mov	r0, r4
 800259a:	4629      	mov	r1, r5
 800259c:	f7fd fe22 	bl	80001e4 <__adddf3>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4614      	mov	r4, r2
 80025a6:	461d      	mov	r5, r3
 80025a8:	4b39      	ldr	r3, [pc, #228]	; (8002690 <lowpass+0x130>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fd ff77 	bl	80004a0 <__aeabi_f2d>
 80025b2:	a32f      	add	r3, pc, #188	; (adr r3, 8002670 <lowpass+0x110>)
 80025b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b8:	f7fd ffca 	bl	8000550 <__aeabi_dmul>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4620      	mov	r0, r4
 80025c2:	4629      	mov	r1, r5
 80025c4:	f7fd fe0e 	bl	80001e4 <__adddf3>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4610      	mov	r0, r2
 80025ce:	4619      	mov	r1, r3
 80025d0:	f7fe fa8e 	bl	8000af0 <__aeabi_d2f>
 80025d4:	4603      	mov	r3, r0
 80025d6:	4a2c      	ldr	r2, [pc, #176]	; (8002688 <lowpass+0x128>)
 80025d8:	6013      	str	r3, [r2, #0]
	prevlowpass = kal_velocity;
 80025da:	4b2c      	ldr	r3, [pc, #176]	; (800268c <lowpass+0x12c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a2c      	ldr	r2, [pc, #176]	; (8002690 <lowpass+0x130>)
 80025e0:	6013      	str	r3, [r2, #0]
	pos_lowpass = 0.96906992*pos_lowpass + 0.01546504*current_rad_wrap + 0.01546504*prevposlowpass;
 80025e2:	4b2c      	ldr	r3, [pc, #176]	; (8002694 <lowpass+0x134>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd ff5a 	bl	80004a0 <__aeabi_f2d>
 80025ec:	a322      	add	r3, pc, #136	; (adr r3, 8002678 <lowpass+0x118>)
 80025ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f2:	f7fd ffad 	bl	8000550 <__aeabi_dmul>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4614      	mov	r4, r2
 80025fc:	461d      	mov	r5, r3
 80025fe:	4b26      	ldr	r3, [pc, #152]	; (8002698 <lowpass+0x138>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7fd ff4c 	bl	80004a0 <__aeabi_f2d>
 8002608:	a31d      	add	r3, pc, #116	; (adr r3, 8002680 <lowpass+0x120>)
 800260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260e:	f7fd ff9f 	bl	8000550 <__aeabi_dmul>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	4620      	mov	r0, r4
 8002618:	4629      	mov	r1, r5
 800261a:	f7fd fde3 	bl	80001e4 <__adddf3>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4614      	mov	r4, r2
 8002624:	461d      	mov	r5, r3
 8002626:	4b1d      	ldr	r3, [pc, #116]	; (800269c <lowpass+0x13c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7fd ff38 	bl	80004a0 <__aeabi_f2d>
 8002630:	a313      	add	r3, pc, #76	; (adr r3, 8002680 <lowpass+0x120>)
 8002632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002636:	f7fd ff8b 	bl	8000550 <__aeabi_dmul>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4620      	mov	r0, r4
 8002640:	4629      	mov	r1, r5
 8002642:	f7fd fdcf 	bl	80001e4 <__adddf3>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4610      	mov	r0, r2
 800264c:	4619      	mov	r1, r3
 800264e:	f7fe fa4f 	bl	8000af0 <__aeabi_d2f>
 8002652:	4603      	mov	r3, r0
 8002654:	4a0f      	ldr	r2, [pc, #60]	; (8002694 <lowpass+0x134>)
 8002656:	6013      	str	r3, [r2, #0]
	prevposlowpass = current_rad_wrap;
 8002658:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <lowpass+0x138>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a0f      	ldr	r2, [pc, #60]	; (800269c <lowpass+0x13c>)
 800265e:	6013      	str	r3, [r2, #0]
}
 8002660:	bf00      	nop
 8002662:	bdb0      	pop	{r4, r5, r7, pc}
 8002664:	f3af 8000 	nop.w
 8002668:	a369a70e 	.word	0xa369a70e
 800266c:	3fefd97c 	.word	0x3fefd97c
 8002670:	fa5e5576 	.word	0xfa5e5576
 8002674:	3f6341b0 	.word	0x3f6341b0
 8002678:	ebbdfea9 	.word	0xebbdfea9
 800267c:	3fef029e 	.word	0x3fef029e
 8002680:	88402ae8 	.word	0x88402ae8
 8002684:	3f8fac22 	.word	0x3f8fac22
 8002688:	200007c4 	.word	0x200007c4
 800268c:	200005c0 	.word	0x200005c0
 8002690:	200007c8 	.word	0x200007c8
 8002694:	200007d4 	.word	0x200007d4
 8002698:	20000590 	.word	0x20000590
 800269c:	200007d8 	.word	0x200007d8

080026a0 <Diff_velo>:
void Diff_velo(){
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
	velo_diff =  (pos_lowpass - prevPos)/dt;
 80026a4:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <Diff_velo+0x58>)
 80026a6:	ed93 7a00 	vldr	s14, [r3]
 80026aa:	4b14      	ldr	r3, [pc, #80]	; (80026fc <Diff_velo+0x5c>)
 80026ac:	edd3 7a00 	vldr	s15, [r3]
 80026b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026b4:	ee17 0a90 	vmov	r0, s15
 80026b8:	f7fd fef2 	bl	80004a0 <__aeabi_f2d>
 80026bc:	a30c      	add	r3, pc, #48	; (adr r3, 80026f0 <Diff_velo+0x50>)
 80026be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c2:	f7fe f86f 	bl	80007a4 <__aeabi_ddiv>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	4610      	mov	r0, r2
 80026cc:	4619      	mov	r1, r3
 80026ce:	f7fe fa0f 	bl	8000af0 <__aeabi_d2f>
 80026d2:	4603      	mov	r3, r0
 80026d4:	4a0a      	ldr	r2, [pc, #40]	; (8002700 <Diff_velo+0x60>)
 80026d6:	6013      	str	r3, [r2, #0]
	//velo_diff2 = (current_rad_wrap -  prevPos2)/dt;
	DegAbs[0][0] = velo_diff;
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <Diff_velo+0x60>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a09      	ldr	r2, [pc, #36]	; (8002704 <Diff_velo+0x64>)
 80026de:	6013      	str	r3, [r2, #0]
	prevPos = pos_lowpass;
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <Diff_velo+0x58>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a05      	ldr	r2, [pc, #20]	; (80026fc <Diff_velo+0x5c>)
 80026e6:	6013      	str	r3, [r2, #0]
}
 80026e8:	bf00      	nop
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	f3af 8000 	nop.w
 80026f0:	47ae147b 	.word	0x47ae147b
 80026f4:	3f847ae1 	.word	0x3f847ae1
 80026f8:	200007d4 	.word	0x200007d4
 80026fc:	200007d0 	.word	0x200007d0
 8002700:	200007cc 	.word	0x200007cc
 8002704:	20000638 	.word	0x20000638

08002708 <Kalman_filter>:
void Kalman_filter()
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af02      	add	r7, sp, #8
	prediction(X_hat_t,P_t,F_t,Q_t);
 800270e:	4b14      	ldr	r3, [pc, #80]	; (8002760 <Kalman_filter+0x58>)
 8002710:	4a14      	ldr	r2, [pc, #80]	; (8002764 <Kalman_filter+0x5c>)
 8002712:	4915      	ldr	r1, [pc, #84]	; (8002768 <Kalman_filter+0x60>)
 8002714:	4815      	ldr	r0, [pc, #84]	; (800276c <Kalman_filter+0x64>)
 8002716:	f000 f83b 	bl	8002790 <prediction>
	Update(X_hat_t,P_hat_t,DegAbs,R_t,H_t);
 800271a:	4b15      	ldr	r3, [pc, #84]	; (8002770 <Kalman_filter+0x68>)
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	4b15      	ldr	r3, [pc, #84]	; (8002774 <Kalman_filter+0x6c>)
 8002720:	4a15      	ldr	r2, [pc, #84]	; (8002778 <Kalman_filter+0x70>)
 8002722:	4916      	ldr	r1, [pc, #88]	; (800277c <Kalman_filter+0x74>)
 8002724:	4811      	ldr	r0, [pc, #68]	; (800276c <Kalman_filter+0x64>)
 8002726:	f000 f889 	bl	800283c <Update>
	kal_position = X_t[0][0];
 800272a:	4b15      	ldr	r3, [pc, #84]	; (8002780 <Kalman_filter+0x78>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a15      	ldr	r2, [pc, #84]	; (8002784 <Kalman_filter+0x7c>)
 8002730:	6013      	str	r3, [r2, #0]
	kal_velocity = X_t[1][0];
 8002732:	4b13      	ldr	r3, [pc, #76]	; (8002780 <Kalman_filter+0x78>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	4a14      	ldr	r2, [pc, #80]	; (8002788 <Kalman_filter+0x80>)
 8002738:	6013      	str	r3, [r2, #0]
	kal_acceleration = X_t[2][0];
 800273a:	4b11      	ldr	r3, [pc, #68]	; (8002780 <Kalman_filter+0x78>)
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	4a13      	ldr	r2, [pc, #76]	; (800278c <Kalman_filter+0x84>)
 8002740:	6013      	str	r3, [r2, #0]
	equal(X_hat_t,X_t,3,3);  //X_hat_t = X_t
 8002742:	2303      	movs	r3, #3
 8002744:	2203      	movs	r2, #3
 8002746:	490e      	ldr	r1, [pc, #56]	; (8002780 <Kalman_filter+0x78>)
 8002748:	4808      	ldr	r0, [pc, #32]	; (800276c <Kalman_filter+0x64>)
 800274a:	f000 fa79 	bl	8002c40 <equal>
	equal(P_hat_t,P_t,3,3); //P_hat_t = P_t
 800274e:	2303      	movs	r3, #3
 8002750:	2203      	movs	r2, #3
 8002752:	4905      	ldr	r1, [pc, #20]	; (8002768 <Kalman_filter+0x60>)
 8002754:	4809      	ldr	r0, [pc, #36]	; (800277c <Kalman_filter+0x74>)
 8002756:	f000 fa73 	bl	8002c40 <equal>
}
 800275a:	bf00      	nop
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20000110 	.word	0x20000110
 8002764:	2000005c 	.word	0x2000005c
 8002768:	2000077c 	.word	0x2000077c
 800276c:	20000758 	.word	0x20000758
 8002770:	200000a4 	.word	0x200000a4
 8002774:	200000ec 	.word	0x200000ec
 8002778:	20000638 	.word	0x20000638
 800277c:	200007a0 	.word	0x200007a0
 8002780:	20000734 	.word	0x20000734
 8002784:	200005bc 	.word	0x200005bc
 8002788:	200005c0 	.word	0x200005c0
 800278c:	200005c4 	.word	0x200005c4

08002790 <prediction>:
void prediction(X_hat_t_1, P_t_1, F_t, Q_t)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af04      	add	r7, sp, #16
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
 800279c:	603b      	str	r3, [r7, #0]
	Multiply_matrix(F_t,X_hat_t_1,multiply, 3,3,3,3);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	68f9      	ldr	r1, [r7, #12]
 80027a2:	2303      	movs	r3, #3
 80027a4:	9302      	str	r3, [sp, #8]
 80027a6:	2303      	movs	r3, #3
 80027a8:	9301      	str	r3, [sp, #4]
 80027aa:	2303      	movs	r3, #3
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	2303      	movs	r3, #3
 80027b0:	4a1c      	ldr	r2, [pc, #112]	; (8002824 <prediction+0x94>)
 80027b2:	f000 f917 	bl	80029e4 <Multiply_matrix>
	equal(X_hat_t,multiply,3,3);
 80027b6:	2303      	movs	r3, #3
 80027b8:	2203      	movs	r2, #3
 80027ba:	491a      	ldr	r1, [pc, #104]	; (8002824 <prediction+0x94>)
 80027bc:	481a      	ldr	r0, [pc, #104]	; (8002828 <prediction+0x98>)
 80027be:	f000 fa3f 	bl	8002c40 <equal>

	Multiply_matrix(F_t,P_t_1,multiply, 3,3,3,3);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	2303      	movs	r3, #3
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	2303      	movs	r3, #3
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	2303      	movs	r3, #3
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	2303      	movs	r3, #3
 80027d4:	4a13      	ldr	r2, [pc, #76]	; (8002824 <prediction+0x94>)
 80027d6:	f000 f905 	bl	80029e4 <Multiply_matrix>
	equal(collect3_3,multiply,3,3);
 80027da:	2303      	movs	r3, #3
 80027dc:	2203      	movs	r2, #3
 80027de:	4911      	ldr	r1, [pc, #68]	; (8002824 <prediction+0x94>)
 80027e0:	4812      	ldr	r0, [pc, #72]	; (800282c <prediction+0x9c>)
 80027e2:	f000 fa2d 	bl	8002c40 <equal>
	Multiply_matrix(collect3_3,F_t_tran,multiply, 3,3,3,3);
 80027e6:	2303      	movs	r3, #3
 80027e8:	9302      	str	r3, [sp, #8]
 80027ea:	2303      	movs	r3, #3
 80027ec:	9301      	str	r3, [sp, #4]
 80027ee:	2303      	movs	r3, #3
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	2303      	movs	r3, #3
 80027f4:	4a0b      	ldr	r2, [pc, #44]	; (8002824 <prediction+0x94>)
 80027f6:	490e      	ldr	r1, [pc, #56]	; (8002830 <prediction+0xa0>)
 80027f8:	480c      	ldr	r0, [pc, #48]	; (800282c <prediction+0x9c>)
 80027fa:	f000 f8f3 	bl	80029e4 <Multiply_matrix>
	PlusOrMinus(multiply,Q_t,3,3,1);
 80027fe:	6839      	ldr	r1, [r7, #0]
 8002800:	2301      	movs	r3, #1
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	2303      	movs	r3, #3
 8002806:	2203      	movs	r2, #3
 8002808:	4806      	ldr	r0, [pc, #24]	; (8002824 <prediction+0x94>)
 800280a:	f000 f96f 	bl	8002aec <PlusOrMinus>
	equal(P_hat_t,pm3_3,3,3);
 800280e:	2303      	movs	r3, #3
 8002810:	2203      	movs	r2, #3
 8002812:	4908      	ldr	r1, [pc, #32]	; (8002834 <prediction+0xa4>)
 8002814:	4808      	ldr	r0, [pc, #32]	; (8002838 <prediction+0xa8>)
 8002816:	f000 fa13 	bl	8002c40 <equal>
}
 800281a:	bf00      	nop
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	2000065c 	.word	0x2000065c
 8002828:	20000758 	.word	0x20000758
 800282c:	200006a4 	.word	0x200006a4
 8002830:	20000080 	.word	0x20000080
 8002834:	20000680 	.word	0x20000680
 8002838:	200007a0 	.word	0x200007a0

0800283c <Update>:

void Update(X_hat_t, P_hat_t, DegAbs, R_t, H_t)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af04      	add	r7, sp, #16
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	603b      	str	r3, [r7, #0]
	Multiply_matrix(H_t,X_hat_t,multiply,3,3,3,3);
 800284a:	69b8      	ldr	r0, [r7, #24]
 800284c:	68f9      	ldr	r1, [r7, #12]
 800284e:	2303      	movs	r3, #3
 8002850:	9302      	str	r3, [sp, #8]
 8002852:	2303      	movs	r3, #3
 8002854:	9301      	str	r3, [sp, #4]
 8002856:	2303      	movs	r3, #3
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	2303      	movs	r3, #3
 800285c:	4a57      	ldr	r2, [pc, #348]	; (80029bc <Update+0x180>)
 800285e:	f000 f8c1 	bl	80029e4 <Multiply_matrix>
	PlusOrMinus(DegAbs,multiply,3,3,2);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	2302      	movs	r3, #2
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	2303      	movs	r3, #3
 800286a:	2203      	movs	r2, #3
 800286c:	4953      	ldr	r1, [pc, #332]	; (80029bc <Update+0x180>)
 800286e:	f000 f93d 	bl	8002aec <PlusOrMinus>
	equal(y_k,pm3_3,3,3);
 8002872:	2303      	movs	r3, #3
 8002874:	2203      	movs	r2, #3
 8002876:	4952      	ldr	r1, [pc, #328]	; (80029c0 <Update+0x184>)
 8002878:	4852      	ldr	r0, [pc, #328]	; (80029c4 <Update+0x188>)
 800287a:	f000 f9e1 	bl	8002c40 <equal>

	Multiply_matrix(H_t,P_hat_t,multiply,3,3,3,3);
 800287e:	69b8      	ldr	r0, [r7, #24]
 8002880:	68b9      	ldr	r1, [r7, #8]
 8002882:	2303      	movs	r3, #3
 8002884:	9302      	str	r3, [sp, #8]
 8002886:	2303      	movs	r3, #3
 8002888:	9301      	str	r3, [sp, #4]
 800288a:	2303      	movs	r3, #3
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	2303      	movs	r3, #3
 8002890:	4a4a      	ldr	r2, [pc, #296]	; (80029bc <Update+0x180>)
 8002892:	f000 f8a7 	bl	80029e4 <Multiply_matrix>
	equal(collect3_3,multiply,3,3);
 8002896:	2303      	movs	r3, #3
 8002898:	2203      	movs	r2, #3
 800289a:	4948      	ldr	r1, [pc, #288]	; (80029bc <Update+0x180>)
 800289c:	484a      	ldr	r0, [pc, #296]	; (80029c8 <Update+0x18c>)
 800289e:	f000 f9cf 	bl	8002c40 <equal>
	Multiply_matrix(collect3_3,H_t_tran,multiply, 3,3,3,3);
 80028a2:	2303      	movs	r3, #3
 80028a4:	9302      	str	r3, [sp, #8]
 80028a6:	2303      	movs	r3, #3
 80028a8:	9301      	str	r3, [sp, #4]
 80028aa:	2303      	movs	r3, #3
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	2303      	movs	r3, #3
 80028b0:	4a42      	ldr	r2, [pc, #264]	; (80029bc <Update+0x180>)
 80028b2:	4946      	ldr	r1, [pc, #280]	; (80029cc <Update+0x190>)
 80028b4:	4844      	ldr	r0, [pc, #272]	; (80029c8 <Update+0x18c>)
 80028b6:	f000 f895 	bl	80029e4 <Multiply_matrix>
	PlusOrMinus(multiply,R_t,3,3,1);
 80028ba:	6839      	ldr	r1, [r7, #0]
 80028bc:	2301      	movs	r3, #1
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	2303      	movs	r3, #3
 80028c2:	2203      	movs	r2, #3
 80028c4:	483d      	ldr	r0, [pc, #244]	; (80029bc <Update+0x180>)
 80028c6:	f000 f911 	bl	8002aec <PlusOrMinus>
	equal(S_k,pm3_3,3,3);
 80028ca:	2303      	movs	r3, #3
 80028cc:	2203      	movs	r2, #3
 80028ce:	493c      	ldr	r1, [pc, #240]	; (80029c0 <Update+0x184>)
 80028d0:	483f      	ldr	r0, [pc, #252]	; (80029d0 <Update+0x194>)
 80028d2:	f000 f9b5 	bl	8002c40 <equal>

	S_k[0][0] = 1/S_k[0][0];
 80028d6:	4b3e      	ldr	r3, [pc, #248]	; (80029d0 <Update+0x194>)
 80028d8:	ed93 7a00 	vldr	s14, [r3]
 80028dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028e4:	4b3a      	ldr	r3, [pc, #232]	; (80029d0 <Update+0x194>)
 80028e6:	edc3 7a00 	vstr	s15, [r3]
	Multiply_matrix(P_hat_t,H_t_tran,multiply,3,3,3,3);
 80028ea:	68b8      	ldr	r0, [r7, #8]
 80028ec:	2303      	movs	r3, #3
 80028ee:	9302      	str	r3, [sp, #8]
 80028f0:	2303      	movs	r3, #3
 80028f2:	9301      	str	r3, [sp, #4]
 80028f4:	2303      	movs	r3, #3
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	2303      	movs	r3, #3
 80028fa:	4a30      	ldr	r2, [pc, #192]	; (80029bc <Update+0x180>)
 80028fc:	4933      	ldr	r1, [pc, #204]	; (80029cc <Update+0x190>)
 80028fe:	f000 f871 	bl	80029e4 <Multiply_matrix>
	equal(collect3_3,multiply,3,3);
 8002902:	2303      	movs	r3, #3
 8002904:	2203      	movs	r2, #3
 8002906:	492d      	ldr	r1, [pc, #180]	; (80029bc <Update+0x180>)
 8002908:	482f      	ldr	r0, [pc, #188]	; (80029c8 <Update+0x18c>)
 800290a:	f000 f999 	bl	8002c40 <equal>
	Multiply_matrix(collect3_3,S_k,multiply, 3,3,3,3);
 800290e:	2303      	movs	r3, #3
 8002910:	9302      	str	r3, [sp, #8]
 8002912:	2303      	movs	r3, #3
 8002914:	9301      	str	r3, [sp, #4]
 8002916:	2303      	movs	r3, #3
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	2303      	movs	r3, #3
 800291c:	4a27      	ldr	r2, [pc, #156]	; (80029bc <Update+0x180>)
 800291e:	492c      	ldr	r1, [pc, #176]	; (80029d0 <Update+0x194>)
 8002920:	4829      	ldr	r0, [pc, #164]	; (80029c8 <Update+0x18c>)
 8002922:	f000 f85f 	bl	80029e4 <Multiply_matrix>
	equal(K_k,multiply,3,3);
 8002926:	2303      	movs	r3, #3
 8002928:	2203      	movs	r2, #3
 800292a:	4924      	ldr	r1, [pc, #144]	; (80029bc <Update+0x180>)
 800292c:	4829      	ldr	r0, [pc, #164]	; (80029d4 <Update+0x198>)
 800292e:	f000 f987 	bl	8002c40 <equal>

	Multiply_matrix(K_k,y_k,multiply,3,3,3,3);
 8002932:	2303      	movs	r3, #3
 8002934:	9302      	str	r3, [sp, #8]
 8002936:	2303      	movs	r3, #3
 8002938:	9301      	str	r3, [sp, #4]
 800293a:	2303      	movs	r3, #3
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	2303      	movs	r3, #3
 8002940:	4a1e      	ldr	r2, [pc, #120]	; (80029bc <Update+0x180>)
 8002942:	4920      	ldr	r1, [pc, #128]	; (80029c4 <Update+0x188>)
 8002944:	4823      	ldr	r0, [pc, #140]	; (80029d4 <Update+0x198>)
 8002946:	f000 f84d 	bl	80029e4 <Multiply_matrix>
	PlusOrMinus(X_hat_t,multiply,3,3,1);
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	2301      	movs	r3, #1
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	2303      	movs	r3, #3
 8002952:	2203      	movs	r2, #3
 8002954:	4919      	ldr	r1, [pc, #100]	; (80029bc <Update+0x180>)
 8002956:	f000 f8c9 	bl	8002aec <PlusOrMinus>
	equal(X_t,pm3_3,3,3);
 800295a:	2303      	movs	r3, #3
 800295c:	2203      	movs	r2, #3
 800295e:	4918      	ldr	r1, [pc, #96]	; (80029c0 <Update+0x184>)
 8002960:	481d      	ldr	r0, [pc, #116]	; (80029d8 <Update+0x19c>)
 8002962:	f000 f96d 	bl	8002c40 <equal>

	Multiply_matrix(K_k,H_t,multiply,3,3,3,3);
 8002966:	69b9      	ldr	r1, [r7, #24]
 8002968:	2303      	movs	r3, #3
 800296a:	9302      	str	r3, [sp, #8]
 800296c:	2303      	movs	r3, #3
 800296e:	9301      	str	r3, [sp, #4]
 8002970:	2303      	movs	r3, #3
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	2303      	movs	r3, #3
 8002976:	4a11      	ldr	r2, [pc, #68]	; (80029bc <Update+0x180>)
 8002978:	4816      	ldr	r0, [pc, #88]	; (80029d4 <Update+0x198>)
 800297a:	f000 f833 	bl	80029e4 <Multiply_matrix>
	PlusOrMinus(I,multiply,3,3,2);
 800297e:	2302      	movs	r3, #2
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	2303      	movs	r3, #3
 8002984:	2203      	movs	r2, #3
 8002986:	490d      	ldr	r1, [pc, #52]	; (80029bc <Update+0x180>)
 8002988:	4814      	ldr	r0, [pc, #80]	; (80029dc <Update+0x1a0>)
 800298a:	f000 f8af 	bl	8002aec <PlusOrMinus>
	Multiply_matrix(pm3_3,P_hat_t,multiply,3,3,3,3);
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	2303      	movs	r3, #3
 8002992:	9302      	str	r3, [sp, #8]
 8002994:	2303      	movs	r3, #3
 8002996:	9301      	str	r3, [sp, #4]
 8002998:	2303      	movs	r3, #3
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	2303      	movs	r3, #3
 800299e:	4a07      	ldr	r2, [pc, #28]	; (80029bc <Update+0x180>)
 80029a0:	4807      	ldr	r0, [pc, #28]	; (80029c0 <Update+0x184>)
 80029a2:	f000 f81f 	bl	80029e4 <Multiply_matrix>
	equal(P_t,multiply,3,3);
 80029a6:	2303      	movs	r3, #3
 80029a8:	2203      	movs	r2, #3
 80029aa:	4904      	ldr	r1, [pc, #16]	; (80029bc <Update+0x180>)
 80029ac:	480c      	ldr	r0, [pc, #48]	; (80029e0 <Update+0x1a4>)
 80029ae:	f000 f947 	bl	8002c40 <equal>
}
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	2000065c 	.word	0x2000065c
 80029c0:	20000680 	.word	0x20000680
 80029c4:	200006c8 	.word	0x200006c8
 80029c8:	200006a4 	.word	0x200006a4
 80029cc:	200000c8 	.word	0x200000c8
 80029d0:	200006ec 	.word	0x200006ec
 80029d4:	20000710 	.word	0x20000710
 80029d8:	20000734 	.word	0x20000734
 80029dc:	20000038 	.word	0x20000038
 80029e0:	2000077c 	.word	0x2000077c

080029e4 <Multiply_matrix>:

void Multiply_matrix(float A[][3], float B[][3],float multiply[][3],int row1,int col1,int row2,int col2)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
 80029f0:	603b      	str	r3, [r7, #0]
	uint8_t i,j,k;
	//set zero
	for(i=0; i<3 ;i++){
 80029f2:	2300      	movs	r3, #0
 80029f4:	75fb      	strb	r3, [r7, #23]
 80029f6:	e019      	b.n	8002a2c <Multiply_matrix+0x48>
		for(j=0; j<3;j++){
 80029f8:	2300      	movs	r3, #0
 80029fa:	75bb      	strb	r3, [r7, #22]
 80029fc:	e010      	b.n	8002a20 <Multiply_matrix+0x3c>
			multiply[i][j] = 0;
 80029fe:	7dfa      	ldrb	r2, [r7, #23]
 8002a00:	4613      	mov	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	4413      	add	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	461a      	mov	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	441a      	add	r2, r3
 8002a0e:	7dbb      	ldrb	r3, [r7, #22]
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
		for(j=0; j<3;j++){
 8002a1a:	7dbb      	ldrb	r3, [r7, #22]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	75bb      	strb	r3, [r7, #22]
 8002a20:	7dbb      	ldrb	r3, [r7, #22]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d9eb      	bls.n	80029fe <Multiply_matrix+0x1a>
	for(i=0; i<3 ;i++){
 8002a26:	7dfb      	ldrb	r3, [r7, #23]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	75fb      	strb	r3, [r7, #23]
 8002a2c:	7dfb      	ldrb	r3, [r7, #23]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d9e2      	bls.n	80029f8 <Multiply_matrix+0x14>
		}
	}

	for(i=0;i<row1;i++){
 8002a32:	2300      	movs	r3, #0
 8002a34:	75fb      	strb	r3, [r7, #23]
 8002a36:	e04e      	b.n	8002ad6 <Multiply_matrix+0xf2>
		for(j=0;j<col2;j++){
 8002a38:	2300      	movs	r3, #0
 8002a3a:	75bb      	strb	r3, [r7, #22]
 8002a3c:	e044      	b.n	8002ac8 <Multiply_matrix+0xe4>
			for(k=0;k<col1;k++){
 8002a3e:	2300      	movs	r3, #0
 8002a40:	757b      	strb	r3, [r7, #21]
 8002a42:	e03a      	b.n	8002aba <Multiply_matrix+0xd6>
				multiply[i][j] += A[i][k]*B[k][j];
 8002a44:	7dfa      	ldrb	r2, [r7, #23]
 8002a46:	4613      	mov	r3, r2
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	461a      	mov	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	441a      	add	r2, r3
 8002a54:	7dbb      	ldrb	r3, [r7, #22]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	ed93 7a00 	vldr	s14, [r3]
 8002a5e:	7dfa      	ldrb	r2, [r7, #23]
 8002a60:	4613      	mov	r3, r2
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	4413      	add	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	461a      	mov	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	441a      	add	r2, r3
 8002a6e:	7d7b      	ldrb	r3, [r7, #21]
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	edd3 6a00 	vldr	s13, [r3]
 8002a78:	7d7a      	ldrb	r2, [r7, #21]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	4413      	add	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	461a      	mov	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	441a      	add	r2, r3
 8002a88:	7dbb      	ldrb	r3, [r7, #22]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	edd3 7a00 	vldr	s15, [r3]
 8002a92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a96:	7dfa      	ldrb	r2, [r7, #23]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	441a      	add	r2, r3
 8002aa6:	7dbb      	ldrb	r3, [r7, #22]
 8002aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	edc3 7a00 	vstr	s15, [r3]
			for(k=0;k<col1;k++){
 8002ab4:	7d7b      	ldrb	r3, [r7, #21]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	757b      	strb	r3, [r7, #21]
 8002aba:	7d7b      	ldrb	r3, [r7, #21]
 8002abc:	6a3a      	ldr	r2, [r7, #32]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	dcc0      	bgt.n	8002a44 <Multiply_matrix+0x60>
		for(j=0;j<col2;j++){
 8002ac2:	7dbb      	ldrb	r3, [r7, #22]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	75bb      	strb	r3, [r7, #22]
 8002ac8:	7dbb      	ldrb	r3, [r7, #22]
 8002aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002acc:	429a      	cmp	r2, r3
 8002ace:	dcb6      	bgt.n	8002a3e <Multiply_matrix+0x5a>
	for(i=0;i<row1;i++){
 8002ad0:	7dfb      	ldrb	r3, [r7, #23]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	75fb      	strb	r3, [r7, #23]
 8002ad6:	7dfb      	ldrb	r3, [r7, #23]
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	dcac      	bgt.n	8002a38 <Multiply_matrix+0x54>
			}
		}
	}
}
 8002ade:	bf00      	nop
 8002ae0:	bf00      	nop
 8002ae2:	371c      	adds	r7, #28
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <PlusOrMinus>:

void PlusOrMinus(float A[][3], float B[][3],int row,int col,int con)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	603b      	str	r3, [r7, #0]
	uint8_t i,j;
	//set zeros
	for(i=0; i<3 ;i++){
 8002afa:	2300      	movs	r3, #0
 8002afc:	75fb      	strb	r3, [r7, #23]
 8002afe:	e017      	b.n	8002b30 <PlusOrMinus+0x44>
			for(j=0; j<3;j++){
 8002b00:	2300      	movs	r3, #0
 8002b02:	75bb      	strb	r3, [r7, #22]
 8002b04:	e00e      	b.n	8002b24 <PlusOrMinus+0x38>
				pm3_3[i][j] = 0;
 8002b06:	7dfa      	ldrb	r2, [r7, #23]
 8002b08:	7db9      	ldrb	r1, [r7, #22]
 8002b0a:	484c      	ldr	r0, [pc, #304]	; (8002c3c <PlusOrMinus+0x150>)
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	4413      	add	r3, r2
 8002b12:	440b      	add	r3, r1
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4403      	add	r3, r0
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
			for(j=0; j<3;j++){
 8002b1e:	7dbb      	ldrb	r3, [r7, #22]
 8002b20:	3301      	adds	r3, #1
 8002b22:	75bb      	strb	r3, [r7, #22]
 8002b24:	7dbb      	ldrb	r3, [r7, #22]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d9ed      	bls.n	8002b06 <PlusOrMinus+0x1a>
	for(i=0; i<3 ;i++){
 8002b2a:	7dfb      	ldrb	r3, [r7, #23]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	75fb      	strb	r3, [r7, #23]
 8002b30:	7dfb      	ldrb	r3, [r7, #23]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d9e4      	bls.n	8002b00 <PlusOrMinus+0x14>
			}
		}
	//condition for plus
	if(con == 1){
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d13b      	bne.n	8002bb4 <PlusOrMinus+0xc8>
		for(i = 0; i < row; ++i){
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	75fb      	strb	r3, [r7, #23]
 8002b40:	e033      	b.n	8002baa <PlusOrMinus+0xbe>
			for (j = 0; j < col; ++j){
 8002b42:	2300      	movs	r3, #0
 8002b44:	75bb      	strb	r3, [r7, #22]
 8002b46:	e029      	b.n	8002b9c <PlusOrMinus+0xb0>
				pm3_3[i][j] = A[i][j] + B[i][j];
 8002b48:	7dfa      	ldrb	r2, [r7, #23]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4413      	add	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	461a      	mov	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	441a      	add	r2, r3
 8002b58:	7dbb      	ldrb	r3, [r7, #22]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	ed93 7a00 	vldr	s14, [r3]
 8002b62:	7dfa      	ldrb	r2, [r7, #23]
 8002b64:	4613      	mov	r3, r2
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	441a      	add	r2, r3
 8002b72:	7dbb      	ldrb	r3, [r7, #22]
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	edd3 7a00 	vldr	s15, [r3]
 8002b7c:	7dfa      	ldrb	r2, [r7, #23]
 8002b7e:	7db9      	ldrb	r1, [r7, #22]
 8002b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b84:	482d      	ldr	r0, [pc, #180]	; (8002c3c <PlusOrMinus+0x150>)
 8002b86:	4613      	mov	r3, r2
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4413      	add	r3, r2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4403      	add	r3, r0
 8002b92:	edc3 7a00 	vstr	s15, [r3]
			for (j = 0; j < col; ++j){
 8002b96:	7dbb      	ldrb	r3, [r7, #22]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	75bb      	strb	r3, [r7, #22]
 8002b9c:	7dbb      	ldrb	r3, [r7, #22]
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	dcd1      	bgt.n	8002b48 <PlusOrMinus+0x5c>
		for(i = 0; i < row; ++i){
 8002ba4:	7dfb      	ldrb	r3, [r7, #23]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	75fb      	strb	r3, [r7, #23]
 8002baa:	7dfb      	ldrb	r3, [r7, #23]
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	dcc7      	bgt.n	8002b42 <PlusOrMinus+0x56>
			for (j = 0; j < col; ++j){
				pm3_3[i][j] = A[i][j] - B[i][j];
			}
		}
	}
}
 8002bb2:	e03d      	b.n	8002c30 <PlusOrMinus+0x144>
	else if(con == 2){
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d13a      	bne.n	8002c30 <PlusOrMinus+0x144>
		for(i = 0; i < row; ++i){
 8002bba:	2300      	movs	r3, #0
 8002bbc:	75fb      	strb	r3, [r7, #23]
 8002bbe:	e033      	b.n	8002c28 <PlusOrMinus+0x13c>
			for (j = 0; j < col; ++j){
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	75bb      	strb	r3, [r7, #22]
 8002bc4:	e029      	b.n	8002c1a <PlusOrMinus+0x12e>
				pm3_3[i][j] = A[i][j] - B[i][j];
 8002bc6:	7dfa      	ldrb	r2, [r7, #23]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	441a      	add	r2, r3
 8002bd6:	7dbb      	ldrb	r3, [r7, #22]
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	ed93 7a00 	vldr	s14, [r3]
 8002be0:	7dfa      	ldrb	r2, [r7, #23]
 8002be2:	4613      	mov	r3, r2
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	4413      	add	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	461a      	mov	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	441a      	add	r2, r3
 8002bf0:	7dbb      	ldrb	r3, [r7, #22]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	edd3 7a00 	vldr	s15, [r3]
 8002bfa:	7dfa      	ldrb	r2, [r7, #23]
 8002bfc:	7db9      	ldrb	r1, [r7, #22]
 8002bfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c02:	480e      	ldr	r0, [pc, #56]	; (8002c3c <PlusOrMinus+0x150>)
 8002c04:	4613      	mov	r3, r2
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	4413      	add	r3, r2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4403      	add	r3, r0
 8002c10:	edc3 7a00 	vstr	s15, [r3]
			for (j = 0; j < col; ++j){
 8002c14:	7dbb      	ldrb	r3, [r7, #22]
 8002c16:	3301      	adds	r3, #1
 8002c18:	75bb      	strb	r3, [r7, #22]
 8002c1a:	7dbb      	ldrb	r3, [r7, #22]
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	dcd1      	bgt.n	8002bc6 <PlusOrMinus+0xda>
		for(i = 0; i < row; ++i){
 8002c22:	7dfb      	ldrb	r3, [r7, #23]
 8002c24:	3301      	adds	r3, #1
 8002c26:	75fb      	strb	r3, [r7, #23]
 8002c28:	7dfb      	ldrb	r3, [r7, #23]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	dcc7      	bgt.n	8002bc0 <PlusOrMinus+0xd4>
}
 8002c30:	bf00      	nop
 8002c32:	371c      	adds	r7, #28
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	20000680 	.word	0x20000680

08002c40 <equal>:

void equal(float A[][3],float B[][3],int row,int col)
{
 8002c40:	b490      	push	{r4, r7}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
 8002c4c:	603b      	str	r3, [r7, #0]
	uint8_t i,j;
	for(i = 0; i < row; ++i){
 8002c4e:	2300      	movs	r3, #0
 8002c50:	75fb      	strb	r3, [r7, #23]
 8002c52:	e024      	b.n	8002c9e <equal+0x5e>
		for (j = 0; j < col; ++j){
 8002c54:	2300      	movs	r3, #0
 8002c56:	75bb      	strb	r3, [r7, #22]
 8002c58:	e01a      	b.n	8002c90 <equal+0x50>
			A[i][j] = B[i][j];
 8002c5a:	7dfa      	ldrb	r2, [r7, #23]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	461a      	mov	r2, r3
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	1898      	adds	r0, r3, r2
 8002c6a:	7dbc      	ldrb	r4, [r7, #22]
 8002c6c:	7dfa      	ldrb	r2, [r7, #23]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	461a      	mov	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	1899      	adds	r1, r3, r2
 8002c7c:	7dbb      	ldrb	r3, [r7, #22]
 8002c7e:	00a2      	lsls	r2, r4, #2
 8002c80:	4402      	add	r2, r0
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	601a      	str	r2, [r3, #0]
		for (j = 0; j < col; ++j){
 8002c8a:	7dbb      	ldrb	r3, [r7, #22]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	75bb      	strb	r3, [r7, #22]
 8002c90:	7dbb      	ldrb	r3, [r7, #22]
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	dce0      	bgt.n	8002c5a <equal+0x1a>
	for(i = 0; i < row; ++i){
 8002c98:	7dfb      	ldrb	r3, [r7, #23]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	75fb      	strb	r3, [r7, #23]
 8002c9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	dcd6      	bgt.n	8002c54 <equal+0x14>
		}
	}
}
 8002ca6:	bf00      	nop
 8002ca8:	bf00      	nop
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc90      	pop	{r4, r7}
 8002cb0:	4770      	bx	lr
 8002cb2:	0000      	movs	r0, r0
 8002cb4:	0000      	movs	r0, r0
	...

08002cb8 <Trajectory>:


void Trajectory(float qf,float vb)
{
 8002cb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	ed87 0a01 	vstr	s0, [r7, #4]
 8002cc4:	edc7 0a00 	vstr	s1, [r7]
	vb = vb/9.5493;
 8002cc8:	6838      	ldr	r0, [r7, #0]
 8002cca:	f7fd fbe9 	bl	80004a0 <__aeabi_f2d>
 8002cce:	a3b2      	add	r3, pc, #712	; (adr r3, 8002f98 <Trajectory+0x2e0>)
 8002cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd4:	f7fd fd66 	bl	80007a4 <__aeabi_ddiv>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4610      	mov	r0, r2
 8002cde:	4619      	mov	r1, r3
 8002ce0:	f7fd ff06 	bl	8000af0 <__aeabi_d2f>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	603b      	str	r3, [r7, #0]
	float ab = 0.4;
 8002ce8:	4b9f      	ldr	r3, [pc, #636]	; (8002f68 <Trajectory+0x2b0>)
 8002cea:	60fb      	str	r3, [r7, #12]
	if(qf < 0.1){
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7fd fbd7 	bl	80004a0 <__aeabi_f2d>
 8002cf2:	a39b      	add	r3, pc, #620	; (adr r3, 8002f60 <Trajectory+0x2a8>)
 8002cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf8:	f7fd fe9c 	bl	8000a34 <__aeabi_dcmplt>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <Trajectory+0x4e>
		vb = 1.5/9.5493;
 8002d02:	4b9a      	ldr	r3, [pc, #616]	; (8002f6c <Trajectory+0x2b4>)
 8002d04:	603b      	str	r3, [r7, #0]
	}
	if(tuaall >= 0){
 8002d06:	4b9a      	ldr	r3, [pc, #616]	; (8002f70 <Trajectory+0x2b8>)
 8002d08:	edd3 7a00 	vldr	s15, [r3]
 8002d0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d14:	f2c0 8278 	blt.w	8003208 <Trajectory+0x550>
		tua = tuaall - 0;
 8002d18:	4b95      	ldr	r3, [pc, #596]	; (8002f70 <Trajectory+0x2b8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a95      	ldr	r2, [pc, #596]	; (8002f74 <Trajectory+0x2bc>)
 8002d1e:	6013      	str	r3, [r2, #0]
		if(qf/vb > vb/ab){
 8002d20:	edd7 6a01 	vldr	s13, [r7, #4]
 8002d24:	edd7 7a00 	vldr	s15, [r7]
 8002d28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d2c:	ed97 6a00 	vldr	s12, [r7]
 8002d30:	edd7 6a03 	vldr	s13, [r7, #12]
 8002d34:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002d38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d40:	dd0c      	ble.n	8002d5c <Trajectory+0xa4>
			tb = vb/ab;
 8002d42:	edd7 6a00 	vldr	s13, [r7]
 8002d46:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d4e:	4b8a      	ldr	r3, [pc, #552]	; (8002f78 <Trajectory+0x2c0>)
 8002d50:	edc3 7a00 	vstr	s15, [r3]
			vb_n = vb;
 8002d54:	4a89      	ldr	r2, [pc, #548]	; (8002f7c <Trajectory+0x2c4>)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e031      	b.n	8002dc0 <Trajectory+0x108>

		}
		else{
			tb = sqrt(qf/ab);
 8002d5c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d60:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d64:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002d68:	ee16 0a90 	vmov	r0, s13
 8002d6c:	f7fd fb98 	bl	80004a0 <__aeabi_f2d>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	ec43 2b10 	vmov	d0, r2, r3
 8002d78:	f008 ff90 	bl	800bc9c <sqrt>
 8002d7c:	ec53 2b10 	vmov	r2, r3, d0
 8002d80:	4610      	mov	r0, r2
 8002d82:	4619      	mov	r1, r3
 8002d84:	f7fd feb4 	bl	8000af0 <__aeabi_d2f>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	4a7b      	ldr	r2, [pc, #492]	; (8002f78 <Trajectory+0x2c0>)
 8002d8c:	6013      	str	r3, [r2, #0]
			vb_n = sqrt(qf*ab);
 8002d8e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d92:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d9a:	ee17 0a90 	vmov	r0, s15
 8002d9e:	f7fd fb7f 	bl	80004a0 <__aeabi_f2d>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	ec43 2b10 	vmov	d0, r2, r3
 8002daa:	f008 ff77 	bl	800bc9c <sqrt>
 8002dae:	ec53 2b10 	vmov	r2, r3, d0
 8002db2:	4610      	mov	r0, r2
 8002db4:	4619      	mov	r1, r3
 8002db6:	f7fd fe9b 	bl	8000af0 <__aeabi_d2f>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	4a6f      	ldr	r2, [pc, #444]	; (8002f7c <Trajectory+0x2c4>)
 8002dbe:	6013      	str	r3, [r2, #0]
		}
		tf = (2*tb) + ((qf-(vb_n*vb_n/ab))/vb_n);
 8002dc0:	4b6d      	ldr	r3, [pc, #436]	; (8002f78 <Trajectory+0x2c0>)
 8002dc2:	edd3 7a00 	vldr	s15, [r3]
 8002dc6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002dca:	4b6c      	ldr	r3, [pc, #432]	; (8002f7c <Trajectory+0x2c4>)
 8002dcc:	edd3 6a00 	vldr	s13, [r3]
 8002dd0:	4b6a      	ldr	r3, [pc, #424]	; (8002f7c <Trajectory+0x2c4>)
 8002dd2:	edd3 7a00 	vldr	s15, [r3]
 8002dd6:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002dda:	edd7 6a03 	vldr	s13, [r7, #12]
 8002dde:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002de2:	edd7 6a01 	vldr	s13, [r7, #4]
 8002de6:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8002dea:	4b64      	ldr	r3, [pc, #400]	; (8002f7c <Trajectory+0x2c4>)
 8002dec:	edd3 6a00 	vldr	s13, [r3]
 8002df0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002df4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df8:	4b61      	ldr	r3, [pc, #388]	; (8002f80 <Trajectory+0x2c8>)
 8002dfa:	edc3 7a00 	vstr	s15, [r3]
		if(tua <= tb){
 8002dfe:	4b5d      	ldr	r3, [pc, #372]	; (8002f74 <Trajectory+0x2bc>)
 8002e00:	ed93 7a00 	vldr	s14, [r3]
 8002e04:	4b5c      	ldr	r3, [pc, #368]	; (8002f78 <Trajectory+0x2c0>)
 8002e06:	edd3 7a00 	vldr	s15, [r3]
 8002e0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e12:	d83f      	bhi.n	8002e94 <Trajectory+0x1dc>
			tra_pos = 0.5*ab*tua*tua;
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f7fd fb43 	bl	80004a0 <__aeabi_f2d>
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	4b59      	ldr	r3, [pc, #356]	; (8002f84 <Trajectory+0x2cc>)
 8002e20:	f7fd fb96 	bl	8000550 <__aeabi_dmul>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4614      	mov	r4, r2
 8002e2a:	461d      	mov	r5, r3
 8002e2c:	4b51      	ldr	r3, [pc, #324]	; (8002f74 <Trajectory+0x2bc>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fd fb35 	bl	80004a0 <__aeabi_f2d>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	4629      	mov	r1, r5
 8002e3e:	f7fd fb87 	bl	8000550 <__aeabi_dmul>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	4614      	mov	r4, r2
 8002e48:	461d      	mov	r5, r3
 8002e4a:	4b4a      	ldr	r3, [pc, #296]	; (8002f74 <Trajectory+0x2bc>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fd fb26 	bl	80004a0 <__aeabi_f2d>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4620      	mov	r0, r4
 8002e5a:	4629      	mov	r1, r5
 8002e5c:	f7fd fb78 	bl	8000550 <__aeabi_dmul>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4610      	mov	r0, r2
 8002e66:	4619      	mov	r1, r3
 8002e68:	f7fd fe42 	bl	8000af0 <__aeabi_d2f>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	4a46      	ldr	r2, [pc, #280]	; (8002f88 <Trajectory+0x2d0>)
 8002e70:	6013      	str	r3, [r2, #0]
			tra_velo = ab*tua;
 8002e72:	4b40      	ldr	r3, [pc, #256]	; (8002f74 <Trajectory+0x2bc>)
 8002e74:	ed93 7a00 	vldr	s14, [r3]
 8002e78:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e80:	4b42      	ldr	r3, [pc, #264]	; (8002f8c <Trajectory+0x2d4>)
 8002e82:	edc3 7a00 	vstr	s15, [r3]
			tra_acc = ab;
 8002e86:	4a42      	ldr	r2, [pc, #264]	; (8002f90 <Trajectory+0x2d8>)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6013      	str	r3, [r2, #0]
			/*if(tra_velo < velostart){
				tra_velo = velostart;
			}*/
			start_tra = 1;
 8002e8c:	4b41      	ldr	r3, [pc, #260]	; (8002f94 <Trajectory+0x2dc>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	701a      	strb	r2, [r3, #0]
 8002e92:	e179      	b.n	8003188 <Trajectory+0x4d0>
		}
		else if(tua < (tf-tb)){
 8002e94:	4b3a      	ldr	r3, [pc, #232]	; (8002f80 <Trajectory+0x2c8>)
 8002e96:	ed93 7a00 	vldr	s14, [r3]
 8002e9a:	4b37      	ldr	r3, [pc, #220]	; (8002f78 <Trajectory+0x2c0>)
 8002e9c:	edd3 7a00 	vldr	s15, [r3]
 8002ea0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ea4:	4b33      	ldr	r3, [pc, #204]	; (8002f74 <Trajectory+0x2bc>)
 8002ea6:	edd3 7a00 	vldr	s15, [r3]
 8002eaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb2:	dd75      	ble.n	8002fa0 <Trajectory+0x2e8>
			tra_pos = (0.5*ab*tb*tb) + (vb_n*(tua-tb));
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f7fd faf3 	bl	80004a0 <__aeabi_f2d>
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	4b31      	ldr	r3, [pc, #196]	; (8002f84 <Trajectory+0x2cc>)
 8002ec0:	f7fd fb46 	bl	8000550 <__aeabi_dmul>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4614      	mov	r4, r2
 8002eca:	461d      	mov	r5, r3
 8002ecc:	4b2a      	ldr	r3, [pc, #168]	; (8002f78 <Trajectory+0x2c0>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fd fae5 	bl	80004a0 <__aeabi_f2d>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4620      	mov	r0, r4
 8002edc:	4629      	mov	r1, r5
 8002ede:	f7fd fb37 	bl	8000550 <__aeabi_dmul>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	4614      	mov	r4, r2
 8002ee8:	461d      	mov	r5, r3
 8002eea:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <Trajectory+0x2c0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fd fad6 	bl	80004a0 <__aeabi_f2d>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4620      	mov	r0, r4
 8002efa:	4629      	mov	r1, r5
 8002efc:	f7fd fb28 	bl	8000550 <__aeabi_dmul>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4614      	mov	r4, r2
 8002f06:	461d      	mov	r5, r3
 8002f08:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <Trajectory+0x2bc>)
 8002f0a:	ed93 7a00 	vldr	s14, [r3]
 8002f0e:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <Trajectory+0x2c0>)
 8002f10:	edd3 7a00 	vldr	s15, [r3]
 8002f14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f18:	4b18      	ldr	r3, [pc, #96]	; (8002f7c <Trajectory+0x2c4>)
 8002f1a:	edd3 7a00 	vldr	s15, [r3]
 8002f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f22:	ee17 0a90 	vmov	r0, s15
 8002f26:	f7fd fabb 	bl	80004a0 <__aeabi_f2d>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4620      	mov	r0, r4
 8002f30:	4629      	mov	r1, r5
 8002f32:	f7fd f957 	bl	80001e4 <__adddf3>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	f7fd fdd7 	bl	8000af0 <__aeabi_d2f>
 8002f42:	4603      	mov	r3, r0
 8002f44:	4a10      	ldr	r2, [pc, #64]	; (8002f88 <Trajectory+0x2d0>)
 8002f46:	6013      	str	r3, [r2, #0]
			tra_velo = vb_n;
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <Trajectory+0x2c4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a0f      	ldr	r2, [pc, #60]	; (8002f8c <Trajectory+0x2d4>)
 8002f4e:	6013      	str	r3, [r2, #0]
			tra_acc = 0;
 8002f50:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <Trajectory+0x2d8>)
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
			start_tra = 0;
 8002f58:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <Trajectory+0x2dc>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	701a      	strb	r2, [r3, #0]
 8002f5e:	e113      	b.n	8003188 <Trajectory+0x4d0>
 8002f60:	9999999a 	.word	0x9999999a
 8002f64:	3fb99999 	.word	0x3fb99999
 8002f68:	3ecccccd 	.word	0x3ecccccd
 8002f6c:	3e20d978 	.word	0x3e20d978
 8002f70:	200005e4 	.word	0x200005e4
 8002f74:	200005e0 	.word	0x200005e0
 8002f78:	200005d4 	.word	0x200005d4
 8002f7c:	200005d8 	.word	0x200005d8
 8002f80:	200005dc 	.word	0x200005dc
 8002f84:	3fe00000 	.word	0x3fe00000
 8002f88:	200005c8 	.word	0x200005c8
 8002f8c:	200005cc 	.word	0x200005cc
 8002f90:	200005d0 	.word	0x200005d0
 8002f94:	200005f6 	.word	0x200005f6
 8002f98:	d97f62b7 	.word	0xd97f62b7
 8002f9c:	4023193d 	.word	0x4023193d

		}
		else if(tua >= tf-tb && tua <= tf){
 8002fa0:	4ba2      	ldr	r3, [pc, #648]	; (800322c <Trajectory+0x574>)
 8002fa2:	ed93 7a00 	vldr	s14, [r3]
 8002fa6:	4ba2      	ldr	r3, [pc, #648]	; (8003230 <Trajectory+0x578>)
 8002fa8:	edd3 7a00 	vldr	s15, [r3]
 8002fac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fb0:	4ba0      	ldr	r3, [pc, #640]	; (8003234 <Trajectory+0x57c>)
 8002fb2:	edd3 7a00 	vldr	s15, [r3]
 8002fb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fbe:	f200 80e3 	bhi.w	8003188 <Trajectory+0x4d0>
 8002fc2:	4b9c      	ldr	r3, [pc, #624]	; (8003234 <Trajectory+0x57c>)
 8002fc4:	ed93 7a00 	vldr	s14, [r3]
 8002fc8:	4b98      	ldr	r3, [pc, #608]	; (800322c <Trajectory+0x574>)
 8002fca:	edd3 7a00 	vldr	s15, [r3]
 8002fce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd6:	f200 80d7 	bhi.w	8003188 <Trajectory+0x4d0>
			tra_pos = (0.5*ab*tb*tb) + (vb_n*(tua-(tf-tb))) + (vb_n*(tf-(2*tb))) - (0.5*ab*(tua-(tf-tb))*(tua-(tf-tb)));
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f7fd fa60 	bl	80004a0 <__aeabi_f2d>
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	4b94      	ldr	r3, [pc, #592]	; (8003238 <Trajectory+0x580>)
 8002fe6:	f7fd fab3 	bl	8000550 <__aeabi_dmul>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4614      	mov	r4, r2
 8002ff0:	461d      	mov	r5, r3
 8002ff2:	4b8f      	ldr	r3, [pc, #572]	; (8003230 <Trajectory+0x578>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fd fa52 	bl	80004a0 <__aeabi_f2d>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4620      	mov	r0, r4
 8003002:	4629      	mov	r1, r5
 8003004:	f7fd faa4 	bl	8000550 <__aeabi_dmul>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4614      	mov	r4, r2
 800300e:	461d      	mov	r5, r3
 8003010:	4b87      	ldr	r3, [pc, #540]	; (8003230 <Trajectory+0x578>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f7fd fa43 	bl	80004a0 <__aeabi_f2d>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	4620      	mov	r0, r4
 8003020:	4629      	mov	r1, r5
 8003022:	f7fd fa95 	bl	8000550 <__aeabi_dmul>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4614      	mov	r4, r2
 800302c:	461d      	mov	r5, r3
 800302e:	4b81      	ldr	r3, [pc, #516]	; (8003234 <Trajectory+0x57c>)
 8003030:	ed93 7a00 	vldr	s14, [r3]
 8003034:	4b7d      	ldr	r3, [pc, #500]	; (800322c <Trajectory+0x574>)
 8003036:	edd3 6a00 	vldr	s13, [r3]
 800303a:	4b7d      	ldr	r3, [pc, #500]	; (8003230 <Trajectory+0x578>)
 800303c:	edd3 7a00 	vldr	s15, [r3]
 8003040:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003044:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003048:	4b7c      	ldr	r3, [pc, #496]	; (800323c <Trajectory+0x584>)
 800304a:	edd3 7a00 	vldr	s15, [r3]
 800304e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003052:	ee17 0a90 	vmov	r0, s15
 8003056:	f7fd fa23 	bl	80004a0 <__aeabi_f2d>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	4620      	mov	r0, r4
 8003060:	4629      	mov	r1, r5
 8003062:	f7fd f8bf 	bl	80001e4 <__adddf3>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	4614      	mov	r4, r2
 800306c:	461d      	mov	r5, r3
 800306e:	4b6f      	ldr	r3, [pc, #444]	; (800322c <Trajectory+0x574>)
 8003070:	ed93 7a00 	vldr	s14, [r3]
 8003074:	4b6e      	ldr	r3, [pc, #440]	; (8003230 <Trajectory+0x578>)
 8003076:	edd3 7a00 	vldr	s15, [r3]
 800307a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800307e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003082:	4b6e      	ldr	r3, [pc, #440]	; (800323c <Trajectory+0x584>)
 8003084:	edd3 7a00 	vldr	s15, [r3]
 8003088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800308c:	ee17 0a90 	vmov	r0, s15
 8003090:	f7fd fa06 	bl	80004a0 <__aeabi_f2d>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4620      	mov	r0, r4
 800309a:	4629      	mov	r1, r5
 800309c:	f7fd f8a2 	bl	80001e4 <__adddf3>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4614      	mov	r4, r2
 80030a6:	461d      	mov	r5, r3
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f7fd f9f9 	bl	80004a0 <__aeabi_f2d>
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	4b61      	ldr	r3, [pc, #388]	; (8003238 <Trajectory+0x580>)
 80030b4:	f7fd fa4c 	bl	8000550 <__aeabi_dmul>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	4690      	mov	r8, r2
 80030be:	4699      	mov	r9, r3
 80030c0:	4b5c      	ldr	r3, [pc, #368]	; (8003234 <Trajectory+0x57c>)
 80030c2:	ed93 7a00 	vldr	s14, [r3]
 80030c6:	4b59      	ldr	r3, [pc, #356]	; (800322c <Trajectory+0x574>)
 80030c8:	edd3 6a00 	vldr	s13, [r3]
 80030cc:	4b58      	ldr	r3, [pc, #352]	; (8003230 <Trajectory+0x578>)
 80030ce:	edd3 7a00 	vldr	s15, [r3]
 80030d2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80030d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030da:	ee17 0a90 	vmov	r0, s15
 80030de:	f7fd f9df 	bl	80004a0 <__aeabi_f2d>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4640      	mov	r0, r8
 80030e8:	4649      	mov	r1, r9
 80030ea:	f7fd fa31 	bl	8000550 <__aeabi_dmul>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4690      	mov	r8, r2
 80030f4:	4699      	mov	r9, r3
 80030f6:	4b4f      	ldr	r3, [pc, #316]	; (8003234 <Trajectory+0x57c>)
 80030f8:	ed93 7a00 	vldr	s14, [r3]
 80030fc:	4b4b      	ldr	r3, [pc, #300]	; (800322c <Trajectory+0x574>)
 80030fe:	edd3 6a00 	vldr	s13, [r3]
 8003102:	4b4b      	ldr	r3, [pc, #300]	; (8003230 <Trajectory+0x578>)
 8003104:	edd3 7a00 	vldr	s15, [r3]
 8003108:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800310c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003110:	ee17 0a90 	vmov	r0, s15
 8003114:	f7fd f9c4 	bl	80004a0 <__aeabi_f2d>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	4640      	mov	r0, r8
 800311e:	4649      	mov	r1, r9
 8003120:	f7fd fa16 	bl	8000550 <__aeabi_dmul>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4620      	mov	r0, r4
 800312a:	4629      	mov	r1, r5
 800312c:	f7fd f858 	bl	80001e0 <__aeabi_dsub>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4610      	mov	r0, r2
 8003136:	4619      	mov	r1, r3
 8003138:	f7fd fcda 	bl	8000af0 <__aeabi_d2f>
 800313c:	4603      	mov	r3, r0
 800313e:	4a40      	ldr	r2, [pc, #256]	; (8003240 <Trajectory+0x588>)
 8003140:	6013      	str	r3, [r2, #0]
			tra_velo = vb_n - (ab*(tua-(tf-tb)));
 8003142:	4b3e      	ldr	r3, [pc, #248]	; (800323c <Trajectory+0x584>)
 8003144:	ed93 7a00 	vldr	s14, [r3]
 8003148:	4b3a      	ldr	r3, [pc, #232]	; (8003234 <Trajectory+0x57c>)
 800314a:	edd3 6a00 	vldr	s13, [r3]
 800314e:	4b37      	ldr	r3, [pc, #220]	; (800322c <Trajectory+0x574>)
 8003150:	ed93 6a00 	vldr	s12, [r3]
 8003154:	4b36      	ldr	r3, [pc, #216]	; (8003230 <Trajectory+0x578>)
 8003156:	edd3 7a00 	vldr	s15, [r3]
 800315a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800315e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003162:	edd7 7a03 	vldr	s15, [r7, #12]
 8003166:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800316a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800316e:	4b35      	ldr	r3, [pc, #212]	; (8003244 <Trajectory+0x58c>)
 8003170:	edc3 7a00 	vstr	s15, [r3]
			tra_acc = -ab;
 8003174:	edd7 7a03 	vldr	s15, [r7, #12]
 8003178:	eef1 7a67 	vneg.f32	s15, s15
 800317c:	4b32      	ldr	r3, [pc, #200]	; (8003248 <Trajectory+0x590>)
 800317e:	edc3 7a00 	vstr	s15, [r3]
			start_tra = 2;
 8003182:	4b32      	ldr	r3, [pc, #200]	; (800324c <Trajectory+0x594>)
 8003184:	2202      	movs	r2, #2
 8003186:	701a      	strb	r2, [r3, #0]
		}
		if(tua <= tf){
 8003188:	4b2a      	ldr	r3, [pc, #168]	; (8003234 <Trajectory+0x57c>)
 800318a:	ed93 7a00 	vldr	s14, [r3]
 800318e:	4b27      	ldr	r3, [pc, #156]	; (800322c <Trajectory+0x574>)
 8003190:	edd3 7a00 	vldr	s15, [r3]
 8003194:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800319c:	d900      	bls.n	80031a0 <Trajectory+0x4e8>
		tra_velo = 0;
		tra_acc = 0;
	}


}
 800319e:	e03f      	b.n	8003220 <Trajectory+0x568>
			if(direct == 0){
 80031a0:	4b2b      	ldr	r3, [pc, #172]	; (8003250 <Trajectory+0x598>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d123      	bne.n	80031f0 <Trajectory+0x538>
				tra_pos = tra_pos*-1;
 80031a8:	4b25      	ldr	r3, [pc, #148]	; (8003240 <Trajectory+0x588>)
 80031aa:	edd3 7a00 	vldr	s15, [r3]
 80031ae:	eef1 7a67 	vneg.f32	s15, s15
 80031b2:	4b23      	ldr	r3, [pc, #140]	; (8003240 <Trajectory+0x588>)
 80031b4:	edc3 7a00 	vstr	s15, [r3]
				tra_velo = tra_velo *-1;
 80031b8:	4b22      	ldr	r3, [pc, #136]	; (8003244 <Trajectory+0x58c>)
 80031ba:	edd3 7a00 	vldr	s15, [r3]
 80031be:	eef1 7a67 	vneg.f32	s15, s15
 80031c2:	4b20      	ldr	r3, [pc, #128]	; (8003244 <Trajectory+0x58c>)
 80031c4:	edc3 7a00 	vstr	s15, [r3]
				tra_acc = tra_acc *-1;
 80031c8:	4b1f      	ldr	r3, [pc, #124]	; (8003248 <Trajectory+0x590>)
 80031ca:	edd3 7a00 	vldr	s15, [r3]
 80031ce:	eef1 7a67 	vneg.f32	s15, s15
 80031d2:	4b1d      	ldr	r3, [pc, #116]	; (8003248 <Trajectory+0x590>)
 80031d4:	edc3 7a00 	vstr	s15, [r3]
				tra_pos += rad_before;
 80031d8:	4b19      	ldr	r3, [pc, #100]	; (8003240 <Trajectory+0x588>)
 80031da:	ed93 7a00 	vldr	s14, [r3]
 80031de:	4b1d      	ldr	r3, [pc, #116]	; (8003254 <Trajectory+0x59c>)
 80031e0:	edd3 7a00 	vldr	s15, [r3]
 80031e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031e8:	4b15      	ldr	r3, [pc, #84]	; (8003240 <Trajectory+0x588>)
 80031ea:	edc3 7a00 	vstr	s15, [r3]
}
 80031ee:	e017      	b.n	8003220 <Trajectory+0x568>
				tra_pos += rad_before;
 80031f0:	4b13      	ldr	r3, [pc, #76]	; (8003240 <Trajectory+0x588>)
 80031f2:	ed93 7a00 	vldr	s14, [r3]
 80031f6:	4b17      	ldr	r3, [pc, #92]	; (8003254 <Trajectory+0x59c>)
 80031f8:	edd3 7a00 	vldr	s15, [r3]
 80031fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003200:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <Trajectory+0x588>)
 8003202:	edc3 7a00 	vstr	s15, [r3]
}
 8003206:	e00b      	b.n	8003220 <Trajectory+0x568>
		tra_pos = 0;
 8003208:	4b0d      	ldr	r3, [pc, #52]	; (8003240 <Trajectory+0x588>)
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
		tra_velo = 0;
 8003210:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <Trajectory+0x58c>)
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
		tra_acc = 0;
 8003218:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <Trajectory+0x590>)
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
}
 8003220:	bf00      	nop
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800322a:	bf00      	nop
 800322c:	200005dc 	.word	0x200005dc
 8003230:	200005d4 	.word	0x200005d4
 8003234:	200005e0 	.word	0x200005e0
 8003238:	3fe00000 	.word	0x3fe00000
 800323c:	200005d8 	.word	0x200005d8
 8003240:	200005c8 	.word	0x200005c8
 8003244:	200005cc 	.word	0x200005cc
 8003248:	200005d0 	.word	0x200005d0
 800324c:	200005f6 	.word	0x200005f6
 8003250:	2000002c 	.word	0x2000002c
 8003254:	200005f0 	.word	0x200005f0

08003258 <Drivemotor>:
void Drivemotor(int PWM){
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
	}else if(PWM>10000){
		htim2.Instance->CCR1=10000;
		htim2.Instance->CCR2=0;
	}
}*/
	if(PWM<=0 && PWM>=-10000){
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	dc12      	bgt.n	800328c <Drivemotor+0x34>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a23      	ldr	r2, [pc, #140]	; (80032f8 <Drivemotor+0xa0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	db0e      	blt.n	800328c <Drivemotor+0x34>
		PWM = aaabs(PWM);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 fade 	bl	8003830 <aaabs>
 8003274:	4603      	mov	r3, r0
 8003276:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8003278:	2200      	movs	r2, #0
 800327a:	2101      	movs	r1, #1
 800327c:	481f      	ldr	r0, [pc, #124]	; (80032fc <Drivemotor+0xa4>)
 800327e:	f002 fc0d 	bl	8005a9c <HAL_GPIO_WritePin>
		htim2.Instance->CCR2=PWM;
 8003282:	4b1f      	ldr	r3, [pc, #124]	; (8003300 <Drivemotor+0xa8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	639a      	str	r2, [r3, #56]	; 0x38
 800328a:	e030      	b.n	80032ee <Drivemotor+0x96>
	}
	else if(PWM<-10000){
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a1a      	ldr	r2, [pc, #104]	; (80032f8 <Drivemotor+0xa0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	da0a      	bge.n	80032aa <Drivemotor+0x52>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8003294:	2200      	movs	r2, #0
 8003296:	2101      	movs	r1, #1
 8003298:	4818      	ldr	r0, [pc, #96]	; (80032fc <Drivemotor+0xa4>)
 800329a:	f002 fbff 	bl	8005a9c <HAL_GPIO_WritePin>
		htim2.Instance->CCR2=10000;
 800329e:	4b18      	ldr	r3, [pc, #96]	; (8003300 <Drivemotor+0xa8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80032a6:	639a      	str	r2, [r3, #56]	; 0x38
		htim2.Instance->CCR2=PWM;
	}else if(PWM>10000){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
		htim2.Instance->CCR2=10000;
	}
}
 80032a8:	e021      	b.n	80032ee <Drivemotor+0x96>
	else if(PWM>0 && PWM<=10000){
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	dd0e      	ble.n	80032ce <Drivemotor+0x76>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80032b6:	4293      	cmp	r3, r2
 80032b8:	dc09      	bgt.n	80032ce <Drivemotor+0x76>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80032ba:	2201      	movs	r2, #1
 80032bc:	2101      	movs	r1, #1
 80032be:	480f      	ldr	r0, [pc, #60]	; (80032fc <Drivemotor+0xa4>)
 80032c0:	f002 fbec 	bl	8005a9c <HAL_GPIO_WritePin>
		htim2.Instance->CCR2=PWM;
 80032c4:	4b0e      	ldr	r3, [pc, #56]	; (8003300 <Drivemotor+0xa8>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	639a      	str	r2, [r3, #56]	; 0x38
 80032cc:	e00f      	b.n	80032ee <Drivemotor+0x96>
	}else if(PWM>10000){
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f242 7210 	movw	r2, #10000	; 0x2710
 80032d4:	4293      	cmp	r3, r2
 80032d6:	dd0a      	ble.n	80032ee <Drivemotor+0x96>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80032d8:	2201      	movs	r2, #1
 80032da:	2101      	movs	r1, #1
 80032dc:	4807      	ldr	r0, [pc, #28]	; (80032fc <Drivemotor+0xa4>)
 80032de:	f002 fbdd 	bl	8005a9c <HAL_GPIO_WritePin>
		htim2.Instance->CCR2=10000;
 80032e2:	4b07      	ldr	r3, [pc, #28]	; (8003300 <Drivemotor+0xa8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80032ea:	639a      	str	r2, [r3, #56]	; 0x38
}
 80032ec:	e7ff      	b.n	80032ee <Drivemotor+0x96>
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	ffffd8f0 	.word	0xffffd8f0
 80032fc:	40020000 	.word	0x40020000
 8003300:	20000330 	.word	0x20000330

08003304 <NFcontacton>:

void NFcontacton(){
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(&hi2c1, NFW_ADDR, &NFREG_ON, 1, 10);
 800330a:	230a      	movs	r3, #10
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	2301      	movs	r3, #1
 8003310:	4a05      	ldr	r2, [pc, #20]	; (8003328 <NFcontacton+0x24>)
 8003312:	2146      	movs	r1, #70	; 0x46
 8003314:	4805      	ldr	r0, [pc, #20]	; (800332c <NFcontacton+0x28>)
 8003316:	f002 fd37 	bl	8005d88 <HAL_I2C_Master_Transmit>
	microsecDelay(60);
 800331a:	203c      	movs	r0, #60	; 0x3c
 800331c:	f000 fa6a 	bl	80037f4 <microsecDelay>
	//NFwriteFlag = 0;
}
 8003320:	bf00      	nop
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	2000001f 	.word	0x2000001f
 800332c:	200001c4 	.word	0x200001c4

08003330 <NFgetstate>:

void NFgetstate(){
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af02      	add	r7, sp, #8
	if( (hi2c1.State == HAL_I2C_STATE_READY && (HAL_GetTick()-NFtimest>500))){
 8003336:	4b17      	ldr	r3, [pc, #92]	; (8003394 <NFgetstate+0x64>)
 8003338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b20      	cmp	r3, #32
 8003340:	d124      	bne.n	800338c <NFgetstate+0x5c>
 8003342:	f001 fcbd 	bl	8004cc0 <HAL_GetTick>
 8003346:	4603      	mov	r3, r0
 8003348:	4a13      	ldr	r2, [pc, #76]	; (8003398 <NFgetstate+0x68>)
 800334a:	8812      	ldrh	r2, [r2, #0]
 800334c:	1a9b      	subs	r3, r3, r2
 800334e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003352:	d91b      	bls.n	800338c <NFgetstate+0x5c>
		NFtimest = HAL_GetTick();
 8003354:	f001 fcb4 	bl	8004cc0 <HAL_GetTick>
 8003358:	4603      	mov	r3, r0
 800335a:	b29a      	uxth	r2, r3
 800335c:	4b0e      	ldr	r3, [pc, #56]	; (8003398 <NFgetstate+0x68>)
 800335e:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c1, NFW_ADDR, &NFREG_INIT, 1, 10);
 8003360:	230a      	movs	r3, #10
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	2301      	movs	r3, #1
 8003366:	4a0d      	ldr	r2, [pc, #52]	; (800339c <NFgetstate+0x6c>)
 8003368:	2146      	movs	r1, #70	; 0x46
 800336a:	480a      	ldr	r0, [pc, #40]	; (8003394 <NFgetstate+0x64>)
 800336c:	f002 fd0c 	bl	8005d88 <HAL_I2C_Master_Transmit>
		microsecDelay(100);
 8003370:	2064      	movs	r0, #100	; 0x64
 8003372:	f000 fa3f 	bl	80037f4 <microsecDelay>
		HAL_I2C_Master_Receive(&hi2c1, NFR_ADDR, &NFstate, 1, 10);
 8003376:	230a      	movs	r3, #10
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	2301      	movs	r3, #1
 800337c:	4a08      	ldr	r2, [pc, #32]	; (80033a0 <NFgetstate+0x70>)
 800337e:	2147      	movs	r1, #71	; 0x47
 8003380:	4804      	ldr	r0, [pc, #16]	; (8003394 <NFgetstate+0x64>)
 8003382:	f002 fdff 	bl	8005f84 <HAL_I2C_Master_Receive>
		microsecDelay(100);
 8003386:	2064      	movs	r0, #100	; 0x64
 8003388:	f000 fa34 	bl	80037f4 <microsecDelay>
		//NFreadFlag = 0;
	}
}
 800338c:	bf00      	nop
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	200001c4 	.word	0x200001c4
 8003398:	20000572 	.word	0x20000572
 800339c:	20000020 	.word	0x20000020
 80033a0:	20000570 	.word	0x20000570
 80033a4:	00000000 	.word	0x00000000

080033a8 <AMT222getpos>:

void AMT222getpos(uint16_t *data){
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]

	switch(AMTstate){
 80033b0:	4b6d      	ldr	r3, [pc, #436]	; (8003568 <AMT222getpos+0x1c0>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	f200 80c6 	bhi.w	8003546 <AMT222getpos+0x19e>
 80033ba:	a201      	add	r2, pc, #4	; (adr r2, 80033c0 <AMT222getpos+0x18>)
 80033bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c0:	080033d1 	.word	0x080033d1
 80033c4:	080033fd 	.word	0x080033fd
 80033c8:	08003411 	.word	0x08003411
 80033cc:	08003425 	.word	0x08003425
	case 0:
		timeStamp = micros();
 80033d0:	f000 fab2 	bl	8003938 <micros>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4b64      	ldr	r3, [pc, #400]	; (800356c <AMT222getpos+0x1c4>)
 80033da:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80033dc:	2200      	movs	r2, #0
 80033de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033e2:	4863      	ldr	r0, [pc, #396]	; (8003570 <AMT222getpos+0x1c8>)
 80033e4:	f002 fb5a 	bl	8005a9c <HAL_GPIO_WritePin>
	    HAL_SPI_TransmitReceive_DMA(&hspi3, &AMTGETPOS[0], &AMTHbyte, 1);
 80033e8:	2301      	movs	r3, #1
 80033ea:	4a62      	ldr	r2, [pc, #392]	; (8003574 <AMT222getpos+0x1cc>)
 80033ec:	4962      	ldr	r1, [pc, #392]	; (8003578 <AMT222getpos+0x1d0>)
 80033ee:	4863      	ldr	r0, [pc, #396]	; (800357c <AMT222getpos+0x1d4>)
 80033f0:	f005 fd18 	bl	8008e24 <HAL_SPI_TransmitReceive_DMA>
	    AMTcomplete = 0;
 80033f4:	4b62      	ldr	r3, [pc, #392]	; (8003580 <AMT222getpos+0x1d8>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	701a      	strb	r2, [r3, #0]
		break;
 80033fa:	e0a4      	b.n	8003546 <AMT222getpos+0x19e>
	case 1:
		//microsecDelay(5);
		AMTstate+=1;
 80033fc:	4b5a      	ldr	r3, [pc, #360]	; (8003568 <AMT222getpos+0x1c0>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	3301      	adds	r3, #1
 8003402:	b2da      	uxtb	r2, r3
 8003404:	4b58      	ldr	r3, [pc, #352]	; (8003568 <AMT222getpos+0x1c0>)
 8003406:	701a      	strb	r2, [r3, #0]
		AMTcomplete = 1;
 8003408:	4b5d      	ldr	r3, [pc, #372]	; (8003580 <AMT222getpos+0x1d8>)
 800340a:	2201      	movs	r2, #1
 800340c:	701a      	strb	r2, [r3, #0]
		break;
 800340e:	e09a      	b.n	8003546 <AMT222getpos+0x19e>
	case 2:
		HAL_SPI_TransmitReceive_DMA(&hspi3, &AMTGETPOS[1], &AMTLbyte, 1);
 8003410:	2301      	movs	r3, #1
 8003412:	4a5c      	ldr	r2, [pc, #368]	; (8003584 <AMT222getpos+0x1dc>)
 8003414:	495c      	ldr	r1, [pc, #368]	; (8003588 <AMT222getpos+0x1e0>)
 8003416:	4859      	ldr	r0, [pc, #356]	; (800357c <AMT222getpos+0x1d4>)
 8003418:	f005 fd04 	bl	8008e24 <HAL_SPI_TransmitReceive_DMA>
		AMTcomplete = 0;
 800341c:	4b58      	ldr	r3, [pc, #352]	; (8003580 <AMT222getpos+0x1d8>)
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
		break;
 8003422:	e090      	b.n	8003546 <AMT222getpos+0x19e>
	case 3:
		AMTlogic_checkbit = AMT222checkbit( AMTHbyte, AMTLbyte);
 8003424:	4b53      	ldr	r3, [pc, #332]	; (8003574 <AMT222getpos+0x1cc>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	461a      	mov	r2, r3
 800342a:	4b56      	ldr	r3, [pc, #344]	; (8003584 <AMT222getpos+0x1dc>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	4619      	mov	r1, r3
 8003430:	4610      	mov	r0, r2
 8003432:	f000 f8f1 	bl	8003618 <AMT222checkbit>
 8003436:	4603      	mov	r3, r0
 8003438:	461a      	mov	r2, r3
 800343a:	4b54      	ldr	r3, [pc, #336]	; (800358c <AMT222getpos+0x1e4>)
 800343c:	701a      	strb	r2, [r3, #0]
	    if( AMTlogic_checkbit){
 800343e:	4b53      	ldr	r3, [pc, #332]	; (800358c <AMT222getpos+0x1e4>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d078      	beq.n	8003538 <AMT222getpos+0x190>
		    // Shift high bit to correct position and sum them.
		    rawPos = AMTLbyte + ((AMTHbyte & 0b00111111)<<8);
 8003446:	4b4f      	ldr	r3, [pc, #316]	; (8003584 <AMT222getpos+0x1dc>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	b29a      	uxth	r2, r3
 800344c:	4b49      	ldr	r3, [pc, #292]	; (8003574 <AMT222getpos+0x1cc>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	021b      	lsls	r3, r3, #8
 8003452:	b29b      	uxth	r3, r3
 8003454:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8003458:	b29b      	uxth	r3, r3
 800345a:	4413      	add	r3, r2
 800345c:	b29a      	uxth	r2, r3
 800345e:	4b4c      	ldr	r3, [pc, #304]	; (8003590 <AMT222getpos+0x1e8>)
 8003460:	801a      	strh	r2, [r3, #0]
		     // Convert uint16 to angle variable.
		    current_rad = (((rawPos)*2*PI)/(16384));
 8003462:	4b4b      	ldr	r3, [pc, #300]	; (8003590 <AMT222getpos+0x1e8>)
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	ee07 3a90 	vmov	s15, r3
 800346c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003470:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003594 <AMT222getpos+0x1ec>
 8003474:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003478:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003598 <AMT222getpos+0x1f0>
 800347c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003480:	4b46      	ldr	r3, [pc, #280]	; (800359c <AMT222getpos+0x1f4>)
 8003482:	edc3 7a00 	vstr	s15, [r3]
		    if(setinitial == 0){
 8003486:	4b46      	ldr	r3, [pc, #280]	; (80035a0 <AMT222getpos+0x1f8>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d150      	bne.n	8003530 <AMT222getpos+0x188>
		    current_rad = offset - current_rad;
 800348e:	4b45      	ldr	r3, [pc, #276]	; (80035a4 <AMT222getpos+0x1fc>)
 8003490:	ed93 7a00 	vldr	s14, [r3]
 8003494:	4b41      	ldr	r3, [pc, #260]	; (800359c <AMT222getpos+0x1f4>)
 8003496:	edd3 7a00 	vldr	s15, [r3]
 800349a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800349e:	4b3f      	ldr	r3, [pc, #252]	; (800359c <AMT222getpos+0x1f4>)
 80034a0:	edc3 7a00 	vstr	s15, [r3]
		    unwrapping();
 80034a4:	f000 f93a 	bl	800371c <unwrapping>
			if(current_rad_wrap-prevPos2 > 0.2 || current_rad_wrap-prevPos2 < -0.2){
 80034a8:	4b3f      	ldr	r3, [pc, #252]	; (80035a8 <AMT222getpos+0x200>)
 80034aa:	ed93 7a00 	vldr	s14, [r3]
 80034ae:	4b3f      	ldr	r3, [pc, #252]	; (80035ac <AMT222getpos+0x204>)
 80034b0:	edd3 7a00 	vldr	s15, [r3]
 80034b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b8:	ee17 0a90 	vmov	r0, s15
 80034bc:	f7fc fff0 	bl	80004a0 <__aeabi_f2d>
 80034c0:	a323      	add	r3, pc, #140	; (adr r3, 8003550 <AMT222getpos+0x1a8>)
 80034c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c6:	f7fd fad3 	bl	8000a70 <__aeabi_dcmpgt>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d113      	bne.n	80034f8 <AMT222getpos+0x150>
 80034d0:	4b35      	ldr	r3, [pc, #212]	; (80035a8 <AMT222getpos+0x200>)
 80034d2:	ed93 7a00 	vldr	s14, [r3]
 80034d6:	4b35      	ldr	r3, [pc, #212]	; (80035ac <AMT222getpos+0x204>)
 80034d8:	edd3 7a00 	vldr	s15, [r3]
 80034dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034e0:	ee17 0a90 	vmov	r0, s15
 80034e4:	f7fc ffdc 	bl	80004a0 <__aeabi_f2d>
 80034e8:	a31b      	add	r3, pc, #108	; (adr r3, 8003558 <AMT222getpos+0x1b0>)
 80034ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ee:	f7fd faa1 	bl	8000a34 <__aeabi_dcmplt>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <AMT222getpos+0x158>
				current_rad_wrap = prevPos2;
 80034f8:	4b2c      	ldr	r3, [pc, #176]	; (80035ac <AMT222getpos+0x204>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a2a      	ldr	r2, [pc, #168]	; (80035a8 <AMT222getpos+0x200>)
 80034fe:	6013      	str	r3, [r2, #0]
			}
		    prevPos2 = current_rad_wrap;
 8003500:	4b29      	ldr	r3, [pc, #164]	; (80035a8 <AMT222getpos+0x200>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a29      	ldr	r2, [pc, #164]	; (80035ac <AMT222getpos+0x204>)
 8003506:	6013      	str	r3, [r2, #0]
		    deg = current_rad_wrap*57.2957795;
 8003508:	4b27      	ldr	r3, [pc, #156]	; (80035a8 <AMT222getpos+0x200>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7fc ffc7 	bl	80004a0 <__aeabi_f2d>
 8003512:	a313      	add	r3, pc, #76	; (adr r3, 8003560 <AMT222getpos+0x1b8>)
 8003514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003518:	f7fd f81a 	bl	8000550 <__aeabi_dmul>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4610      	mov	r0, r2
 8003522:	4619      	mov	r1, r3
 8003524:	f7fd fae4 	bl	8000af0 <__aeabi_d2f>
 8003528:	4603      	mov	r3, r0
 800352a:	4a21      	ldr	r2, [pc, #132]	; (80035b0 <AMT222getpos+0x208>)
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	e003      	b.n	8003538 <AMT222getpos+0x190>
		    }
		    else{
		    	prevPos2 = 0;
 8003530:	4b1e      	ldr	r3, [pc, #120]	; (80035ac <AMT222getpos+0x204>)
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
		    }
			  /*if(current_rad <= 0){
				  current_rad = 6.28-(current_rad*-1);
			  }*/
	    }
		AMTstate = 0;
 8003538:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <AMT222getpos+0x1c0>)
 800353a:	2200      	movs	r2, #0
 800353c:	701a      	strb	r2, [r3, #0]
		AMTcomplete = 0;
 800353e:	4b10      	ldr	r3, [pc, #64]	; (8003580 <AMT222getpos+0x1d8>)
 8003540:	2200      	movs	r2, #0
 8003542:	701a      	strb	r2, [r3, #0]
		break;
 8003544:	bf00      	nop
	}
}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	9999999a 	.word	0x9999999a
 8003554:	3fc99999 	.word	0x3fc99999
 8003558:	9999999a 	.word	0x9999999a
 800355c:	bfc99999 	.word	0xbfc99999
 8003560:	1a47a9e3 	.word	0x1a47a9e3
 8003564:	404ca5dc 	.word	0x404ca5dc
 8003568:	20000598 	.word	0x20000598
 800356c:	20000564 	.word	0x20000564
 8003570:	40020400 	.word	0x40020400
 8003574:	20000586 	.word	0x20000586
 8003578:	20000584 	.word	0x20000584
 800357c:	20000218 	.word	0x20000218
 8003580:	20000023 	.word	0x20000023
 8003584:	20000587 	.word	0x20000587
 8003588:	20000585 	.word	0x20000585
 800358c:	20000588 	.word	0x20000588
 8003590:	2000058a 	.word	0x2000058a
 8003594:	40490fdb 	.word	0x40490fdb
 8003598:	46800000 	.word	0x46800000
 800359c:	2000058c 	.word	0x2000058c
 80035a0:	2000000c 	.word	0x2000000c
 80035a4:	20000010 	.word	0x20000010
 80035a8:	20000590 	.word	0x20000590
 80035ac:	200007dc 	.word	0x200007dc
 80035b0:	20000594 	.word	0x20000594

080035b4 <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
	if(hspi == &hspi3){
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a12      	ldr	r2, [pc, #72]	; (8003608 <HAL_SPI_TxRxCpltCallback+0x54>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d11d      	bne.n	8003600 <HAL_SPI_TxRxCpltCallback+0x4c>
		AMTstate+=1;
 80035c4:	4b11      	ldr	r3, [pc, #68]	; (800360c <HAL_SPI_TxRxCpltCallback+0x58>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	3301      	adds	r3, #1
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	4b0f      	ldr	r3, [pc, #60]	; (800360c <HAL_SPI_TxRxCpltCallback+0x58>)
 80035ce:	701a      	strb	r2, [r3, #0]
		AMTcomplete = 1;
 80035d0:	4b0f      	ldr	r3, [pc, #60]	; (8003610 <HAL_SPI_TxRxCpltCallback+0x5c>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	701a      	strb	r2, [r3, #0]
		if(AMTstate == 1){
 80035d6:	4b0d      	ldr	r3, [pc, #52]	; (800360c <HAL_SPI_TxRxCpltCallback+0x58>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d103      	bne.n	80035e6 <HAL_SPI_TxRxCpltCallback+0x32>
			HAL_SPI_DMAStop(&hspi3);
 80035de:	480a      	ldr	r0, [pc, #40]	; (8003608 <HAL_SPI_TxRxCpltCallback+0x54>)
 80035e0:	f005 fd22 	bl	8009028 <HAL_SPI_DMAStop>
			//microsecDelay(5);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
			HAL_SPI_DMAStop(&hspi3);
		}
	}
}
 80035e4:	e00c      	b.n	8003600 <HAL_SPI_TxRxCpltCallback+0x4c>
		else if(AMTstate == 3){
 80035e6:	4b09      	ldr	r3, [pc, #36]	; (800360c <HAL_SPI_TxRxCpltCallback+0x58>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b03      	cmp	r3, #3
 80035ec:	d108      	bne.n	8003600 <HAL_SPI_TxRxCpltCallback+0x4c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80035ee:	2201      	movs	r2, #1
 80035f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80035f4:	4807      	ldr	r0, [pc, #28]	; (8003614 <HAL_SPI_TxRxCpltCallback+0x60>)
 80035f6:	f002 fa51 	bl	8005a9c <HAL_GPIO_WritePin>
			HAL_SPI_DMAStop(&hspi3);
 80035fa:	4803      	ldr	r0, [pc, #12]	; (8003608 <HAL_SPI_TxRxCpltCallback+0x54>)
 80035fc:	f005 fd14 	bl	8009028 <HAL_SPI_DMAStop>
}
 8003600:	bf00      	nop
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	20000218 	.word	0x20000218
 800360c:	20000598 	.word	0x20000598
 8003610:	20000023 	.word	0x20000023
 8003614:	40020400 	.word	0x40020400

08003618 <AMT222checkbit>:

uint8_t AMT222checkbit( uint8_t *H, uint8_t *L){
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]

	uint8_t K1 = 0;
 8003622:	2300      	movs	r3, #0
 8003624:	73fb      	strb	r3, [r7, #15]
	uint8_t K0 = 0;
 8003626:	2300      	movs	r3, #0
 8003628:	73bb      	strb	r3, [r7, #14]

	K1 = !( ((*H>>5) & 0x01) ^ ((*H>>3) & 0x01) ^ ((*H>>1) & 0x01) ^
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	b2da      	uxtb	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	08db      	lsrs	r3, r3, #3
 8003638:	b2db      	uxtb	r3, r3
 800363a:	4053      	eors	r3, r2
 800363c:	b2da      	uxtb	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	085b      	lsrs	r3, r3, #1
 8003644:	b2db      	uxtb	r3, r3
 8003646:	4053      	eors	r3, r2
 8003648:	b2da      	uxtb	r2, r3
			((*L>>7) & 0x01) ^ ((*L>>5) & 0x01) ^ ((*L>>7) & 0x03) ^
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	781b      	ldrb	r3, [r3, #0]
	K1 = !( ((*H>>5) & 0x01) ^ ((*H>>3) & 0x01) ^ ((*H>>1) & 0x01) ^
 800364e:	09db      	lsrs	r3, r3, #7
 8003650:	b2db      	uxtb	r3, r3
 8003652:	4053      	eors	r3, r2
 8003654:	b2da      	uxtb	r2, r3
			((*L>>7) & 0x01) ^ ((*L>>5) & 0x01) ^ ((*L>>7) & 0x03) ^
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	095b      	lsrs	r3, r3, #5
 800365c:	b2db      	uxtb	r3, r3
 800365e:	4053      	eors	r3, r2
 8003660:	b2db      	uxtb	r3, r3
 8003662:	f003 0201 	and.w	r2, r3, #1
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	09db      	lsrs	r3, r3, #7
 800366c:	b2db      	uxtb	r3, r3
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	405a      	eors	r2, r3
			((*L>>1) & 0x01) );
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	085b      	lsrs	r3, r3, #1
 800367a:	b2db      	uxtb	r3, r3
 800367c:	f003 0301 	and.w	r3, r3, #1
	K1 = !( ((*H>>5) & 0x01) ^ ((*H>>3) & 0x01) ^ ((*H>>1) & 0x01) ^
 8003680:	429a      	cmp	r2, r3
 8003682:	bf0c      	ite	eq
 8003684:	2301      	moveq	r3, #1
 8003686:	2300      	movne	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	73fb      	strb	r3, [r7, #15]

	K0 = !( ((*H>>4) & 0x01) ^ ((*H>>2) & 0x01) ^ ((*H>>0) & 0x01) ^
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	091b      	lsrs	r3, r3, #4
 8003692:	b2da      	uxtb	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	089b      	lsrs	r3, r3, #2
 800369a:	b2db      	uxtb	r3, r3
 800369c:	4053      	eors	r3, r2
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	4053      	eors	r3, r2
 80036a6:	b2da      	uxtb	r2, r3
			((*L>>6) & 0x01) ^ ((*L>>4) & 0x01) ^ ((*L>>2) & 0x03) ^
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	781b      	ldrb	r3, [r3, #0]
	K0 = !( ((*H>>4) & 0x01) ^ ((*H>>2) & 0x01) ^ ((*H>>0) & 0x01) ^
 80036ac:	099b      	lsrs	r3, r3, #6
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	4053      	eors	r3, r2
 80036b2:	b2da      	uxtb	r2, r3
			((*L>>6) & 0x01) ^ ((*L>>4) & 0x01) ^ ((*L>>2) & 0x03) ^
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	091b      	lsrs	r3, r3, #4
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	4053      	eors	r3, r2
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	f003 0201 	and.w	r2, r3, #1
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	089b      	lsrs	r3, r3, #2
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	f003 0303 	and.w	r3, r3, #3
 80036d0:	405a      	eors	r2, r3
			((*L>>0) & 0x01) );
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	f003 0301 	and.w	r3, r3, #1
	K0 = !( ((*H>>4) & 0x01) ^ ((*H>>2) & 0x01) ^ ((*H>>0) & 0x01) ^
 80036da:	429a      	cmp	r2, r3
 80036dc:	bf0c      	ite	eq
 80036de:	2301      	moveq	r3, #1
 80036e0:	2300      	movne	r3, #0
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	73bb      	strb	r3, [r7, #14]

	if( (K1 == ((*H>>7) & 0x01)) && (K0 == ((*H>>6) & 0x01)) ){
 80036e6:	7bfa      	ldrb	r2, [r7, #15]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	09db      	lsrs	r3, r3, #7
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d10a      	bne.n	800370e <AMT222checkbit+0xf6>
 80036f8:	7bba      	ldrb	r2, [r7, #14]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	099b      	lsrs	r3, r3, #6
 8003700:	b2db      	uxtb	r3, r3
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	429a      	cmp	r2, r3
 8003708:	d101      	bne.n	800370e <AMT222checkbit+0xf6>
		return 1;
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <AMT222checkbit+0xf8>
	}
	else{
		return 0;
 800370e:	2300      	movs	r3, #0
	}
}
 8003710:	4618      	mov	r0, r3
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <unwrapping>:
void unwrapping(){
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
	  p_n = current_rad;
 8003720:	4b2c      	ldr	r3, [pc, #176]	; (80037d4 <unwrapping+0xb8>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a2c      	ldr	r2, [pc, #176]	; (80037d8 <unwrapping+0xbc>)
 8003726:	6013      	str	r3, [r2, #0]
		if (p_n - p_n_1 <= -1*e)
 8003728:	4b2b      	ldr	r3, [pc, #172]	; (80037d8 <unwrapping+0xbc>)
 800372a:	ed93 7a00 	vldr	s14, [r3]
 800372e:	4b2b      	ldr	r3, [pc, #172]	; (80037dc <unwrapping+0xc0>)
 8003730:	edd3 7a00 	vldr	s15, [r3]
 8003734:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003738:	4b29      	ldr	r3, [pc, #164]	; (80037e0 <unwrapping+0xc4>)
 800373a:	edd3 7a00 	vldr	s15, [r3]
 800373e:	eef1 7a67 	vneg.f32	s15, s15
 8003742:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800374a:	d80b      	bhi.n	8003764 <unwrapping+0x48>
		{
			p_0 = p_0_1 + p_max;
 800374c:	4b25      	ldr	r3, [pc, #148]	; (80037e4 <unwrapping+0xc8>)
 800374e:	ed93 7a00 	vldr	s14, [r3]
 8003752:	4b25      	ldr	r3, [pc, #148]	; (80037e8 <unwrapping+0xcc>)
 8003754:	edd3 7a00 	vldr	s15, [r3]
 8003758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800375c:	4b23      	ldr	r3, [pc, #140]	; (80037ec <unwrapping+0xd0>)
 800375e:	edc3 7a00 	vstr	s15, [r3]
 8003762:	e01f      	b.n	80037a4 <unwrapping+0x88>
		}
		else if(p_n - p_n_1 >= e)
 8003764:	4b1c      	ldr	r3, [pc, #112]	; (80037d8 <unwrapping+0xbc>)
 8003766:	ed93 7a00 	vldr	s14, [r3]
 800376a:	4b1c      	ldr	r3, [pc, #112]	; (80037dc <unwrapping+0xc0>)
 800376c:	edd3 7a00 	vldr	s15, [r3]
 8003770:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003774:	4b1a      	ldr	r3, [pc, #104]	; (80037e0 <unwrapping+0xc4>)
 8003776:	edd3 7a00 	vldr	s15, [r3]
 800377a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800377e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003782:	db0b      	blt.n	800379c <unwrapping+0x80>
		{
			p_0 = p_0_1 - p_max;
 8003784:	4b17      	ldr	r3, [pc, #92]	; (80037e4 <unwrapping+0xc8>)
 8003786:	ed93 7a00 	vldr	s14, [r3]
 800378a:	4b17      	ldr	r3, [pc, #92]	; (80037e8 <unwrapping+0xcc>)
 800378c:	edd3 7a00 	vldr	s15, [r3]
 8003790:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003794:	4b15      	ldr	r3, [pc, #84]	; (80037ec <unwrapping+0xd0>)
 8003796:	edc3 7a00 	vstr	s15, [r3]
 800379a:	e003      	b.n	80037a4 <unwrapping+0x88>
		}
		else
		{
			p_0 = p_0_1;
 800379c:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <unwrapping+0xc8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a12      	ldr	r2, [pc, #72]	; (80037ec <unwrapping+0xd0>)
 80037a2:	6013      	str	r3, [r2, #0]
		}
		//DegAbs[0][0] = (p_n + p_0); //สั�?�?าณที่ผ่าน�?าร unwrap �?ล้ว
		current_rad_wrap = (p_n + p_0);
 80037a4:	4b0c      	ldr	r3, [pc, #48]	; (80037d8 <unwrapping+0xbc>)
 80037a6:	ed93 7a00 	vldr	s14, [r3]
 80037aa:	4b10      	ldr	r3, [pc, #64]	; (80037ec <unwrapping+0xd0>)
 80037ac:	edd3 7a00 	vldr	s15, [r3]
 80037b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037b4:	4b0e      	ldr	r3, [pc, #56]	; (80037f0 <unwrapping+0xd4>)
 80037b6:	edc3 7a00 	vstr	s15, [r3]
		//Memory ให้�?ับตัว�?ปร p[n-1] �?ละ p0[n-1]
		p_n_1 = p_n;
 80037ba:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <unwrapping+0xbc>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a07      	ldr	r2, [pc, #28]	; (80037dc <unwrapping+0xc0>)
 80037c0:	6013      	str	r3, [r2, #0]
		p_0_1 = p_0;
 80037c2:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <unwrapping+0xd0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a07      	ldr	r2, [pc, #28]	; (80037e4 <unwrapping+0xc8>)
 80037c8:	6013      	str	r3, [r2, #0]
}
 80037ca:	bf00      	nop
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	2000058c 	.word	0x2000058c
 80037d8:	2000059c 	.word	0x2000059c
 80037dc:	200005a0 	.word	0x200005a0
 80037e0:	20000028 	.word	0x20000028
 80037e4:	200005a8 	.word	0x200005a8
 80037e8:	20000024 	.word	0x20000024
 80037ec:	200005a4 	.word	0x200005a4
 80037f0:	20000590 	.word	0x20000590

080037f4 <microsecDelay>:
void microsecDelay(uint8_t delayTime){
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	71fb      	strb	r3, [r7, #7]
	uint32_t startTime = micros(); 	//reference point to count passed time
 80037fe:	f000 f89b 	bl	8003938 <micros>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4613      	mov	r3, r2
 8003808:	60bb      	str	r3, [r7, #8]
	uint32_t passedTime  = 0;
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
	while (passedTime<delayTime){
 800380e:	e006      	b.n	800381e <microsecDelay+0x2a>
		passedTime = micros() - startTime;
 8003810:	f000 f892 	bl	8003938 <micros>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	60fb      	str	r3, [r7, #12]
	while (passedTime<delayTime){
 800381e:	79fb      	ldrb	r3, [r7, #7]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	429a      	cmp	r2, r3
 8003824:	d3f4      	bcc.n	8003810 <microsecDelay+0x1c>
	}
}
 8003826:	bf00      	nop
 8003828:	bf00      	nop
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <aaabs>:


uint32_t aaabs(int x){
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]

	if(x<0){
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	da02      	bge.n	8003844 <aaabs+0x14>
		return x*-1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	425b      	negs	r3, r3
 8003842:	e000      	b.n	8003846 <aaabs+0x16>
	}else{
		return x;
 8003844:	687b      	ldr	r3, [r7, #4]
	}
}
 8003846:	4618      	mov	r0, r3
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
	...

08003854 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 800385e:	88fb      	ldrh	r3, [r7, #6]
 8003860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003864:	d102      	bne.n	800386c <HAL_GPIO_EXTI_Callback+0x18>
		blue = 1; // 0% duty cycle
 8003866:	4b1f      	ldr	r3, [pc, #124]	; (80038e4 <HAL_GPIO_EXTI_Callback+0x90>)
 8003868:	2201      	movs	r2, #1
 800386a:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_8){
 800386c:	88fb      	ldrh	r3, [r7, #6]
 800386e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003872:	d132      	bne.n	80038da <HAL_GPIO_EXTI_Callback+0x86>
		static GPIO_PinState B1State[2] = {0};
		static GPIO_PinState B1Check;
		B1State[0]= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8003874:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003878:	481b      	ldr	r0, [pc, #108]	; (80038e8 <HAL_GPIO_EXTI_Callback+0x94>)
 800387a:	f002 f8f7 	bl	8005a6c <HAL_GPIO_ReadPin>
 800387e:	4603      	mov	r3, r0
 8003880:	461a      	mov	r2, r3
 8003882:	4b1a      	ldr	r3, [pc, #104]	; (80038ec <HAL_GPIO_EXTI_Callback+0x98>)
 8003884:	701a      	strb	r2, [r3, #0]
		B1Check = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8003886:	f44f 7180 	mov.w	r1, #256	; 0x100
 800388a:	4817      	ldr	r0, [pc, #92]	; (80038e8 <HAL_GPIO_EXTI_Callback+0x94>)
 800388c:	f002 f8ee 	bl	8005a6c <HAL_GPIO_ReadPin>
 8003890:	4603      	mov	r3, r0
 8003892:	461a      	mov	r2, r3
 8003894:	4b16      	ldr	r3, [pc, #88]	; (80038f0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8003896:	701a      	strb	r2, [r3, #0]
		if(B1Check == GPIO_PIN_RESET){
 8003898:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <HAL_GPIO_EXTI_Callback+0x9c>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d109      	bne.n	80038b4 <HAL_GPIO_EXTI_Callback+0x60>
			ch++;
 80038a0:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <HAL_GPIO_EXTI_Callback+0xa0>)
 80038a2:	edd3 7a00 	vldr	s15, [r3]
 80038a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038ae:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <HAL_GPIO_EXTI_Callback+0xa0>)
 80038b0:	edc3 7a00 	vstr	s15, [r3]
		}
		if(B1State[1] == GPIO_PIN_RESET && B1State[0] == GPIO_PIN_SET && State != Emerstop){
 80038b4:	4b0d      	ldr	r3, [pc, #52]	; (80038ec <HAL_GPIO_EXTI_Callback+0x98>)
 80038b6:	785b      	ldrb	r3, [r3, #1]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10a      	bne.n	80038d2 <HAL_GPIO_EXTI_Callback+0x7e>
 80038bc:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <HAL_GPIO_EXTI_Callback+0x98>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d106      	bne.n	80038d2 <HAL_GPIO_EXTI_Callback+0x7e>
 80038c4:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <HAL_GPIO_EXTI_Callback+0xa4>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d002      	beq.n	80038d2 <HAL_GPIO_EXTI_Callback+0x7e>
			stop = 1;
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <HAL_GPIO_EXTI_Callback+0xa8>)
 80038ce:	2201      	movs	r2, #1
 80038d0:	701a      	strb	r2, [r3, #0]
		}
		B1State[1] = B1State[0];
 80038d2:	4b06      	ldr	r3, [pc, #24]	; (80038ec <HAL_GPIO_EXTI_Callback+0x98>)
 80038d4:	781a      	ldrb	r2, [r3, #0]
 80038d6:	4b05      	ldr	r3, [pc, #20]	; (80038ec <HAL_GPIO_EXTI_Callback+0x98>)
 80038d8:	705a      	strb	r2, [r3, #1]

	}
}
 80038da:	bf00      	nop
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	200005f5 	.word	0x200005f5
 80038e8:	40020000 	.word	0x40020000
 80038ec:	20000820 	.word	0x20000820
 80038f0:	20000822 	.word	0x20000822
 80038f4:	20000604 	.word	0x20000604
 80038f8:	200005f7 	.word	0x200005f7
 80038fc:	200005b8 	.word	0x200005b8

08003900 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003900:	b4b0      	push	{r4, r5, r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a09      	ldr	r2, [pc, #36]	; (8003930 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d10a      	bne.n	8003926 <HAL_TIM_PeriodElapsedCallback+0x26>
		_micro += 65535;
 8003910:	4b08      	ldr	r3, [pc, #32]	; (8003934 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003916:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800391a:	1854      	adds	r4, r2, r1
 800391c:	f143 0500 	adc.w	r5, r3, #0
 8003920:	4b04      	ldr	r3, [pc, #16]	; (8003934 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003922:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	bcb0      	pop	{r4, r5, r7}
 800392e:	4770      	bx	lr
 8003930:	20000378 	.word	0x20000378
 8003934:	200005b0 	.word	0x200005b0

08003938 <micros>:

uint64_t micros()
{
 8003938:	b4b0      	push	{r4, r5, r7}
 800393a:	af00      	add	r7, sp, #0
	return _micro + htim11.Instance->CNT;
 800393c:	4b09      	ldr	r3, [pc, #36]	; (8003964 <micros+0x2c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	2200      	movs	r2, #0
 8003944:	4618      	mov	r0, r3
 8003946:	4611      	mov	r1, r2
 8003948:	4b07      	ldr	r3, [pc, #28]	; (8003968 <micros+0x30>)
 800394a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394e:	1884      	adds	r4, r0, r2
 8003950:	eb41 0503 	adc.w	r5, r1, r3
 8003954:	4622      	mov	r2, r4
 8003956:	462b      	mov	r3, r5
}
 8003958:	4610      	mov	r0, r2
 800395a:	4619      	mov	r1, r3
 800395c:	46bd      	mov	sp, r7
 800395e:	bcb0      	pop	{r4, r5, r7}
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	20000378 	.word	0x20000378
 8003968:	200005b0 	.word	0x200005b0

0800396c <callUART>:

//----------------------------------------------------------------< UART >

void callUART(){
 800396c:	b598      	push	{r3, r4, r7, lr}
 800396e:	af00      	add	r7, sp, #0
	HAL_UART_DMAStop(&huart2);
 8003970:	4896      	ldr	r0, [pc, #600]	; (8003bcc <callUART+0x260>)
 8003972:	f006 fff7 	bl	800a964 <HAL_UART_DMAStop>
	switch(RxState){
 8003976:	4b96      	ldr	r3, [pc, #600]	; (8003bd0 <callUART+0x264>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b03      	cmp	r3, #3
 800397c:	f200 8113 	bhi.w	8003ba6 <callUART+0x23a>
 8003980:	a201      	add	r2, pc, #4	; (adr r2, 8003988 <callUART+0x1c>)
 8003982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003986:	bf00      	nop
 8003988:	08003999 	.word	0x08003999
 800398c:	080039fd 	.word	0x080039fd
 8003990:	08003a73 	.word	0x08003a73
 8003994:	08003ad1 	.word	0x08003ad1
	case 0:											// Receive 1 byte first by default.
		Start = (Receive[0] & 0xF0)>>4;
 8003998:	4b8e      	ldr	r3, [pc, #568]	; (8003bd4 <callUART+0x268>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	091b      	lsrs	r3, r3, #4
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	4b8d      	ldr	r3, [pc, #564]	; (8003bd8 <callUART+0x26c>)
 80039a2:	701a      	strb	r2, [r3, #0]
		Mode = (Receive[0] & 0x0F);
 80039a4:	4b8b      	ldr	r3, [pc, #556]	; (8003bd4 <callUART+0x268>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	f003 030f 	and.w	r3, r3, #15
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	4b8b      	ldr	r3, [pc, #556]	; (8003bdc <callUART+0x270>)
 80039b0:	701a      	strb	r2, [r3, #0]
		if(Start == 0b1001){
 80039b2:	4b89      	ldr	r3, [pc, #548]	; (8003bd8 <callUART+0x26c>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b09      	cmp	r3, #9
 80039b8:	f040 80f2 	bne.w	8003ba0 <callUART+0x234>
			// 0b1001, 0b0100]
			sum = 0;
 80039bc:	4b88      	ldr	r3, [pc, #544]	; (8003be0 <callUART+0x274>)
 80039be:	2200      	movs	r2, #0
 80039c0:	701a      	strb	r2, [r3, #0]
			sum += (Receive[0]);					// Sum the START & MODE bit.
 80039c2:	4b84      	ldr	r3, [pc, #528]	; (8003bd4 <callUART+0x268>)
 80039c4:	781a      	ldrb	r2, [r3, #0]
 80039c6:	4b86      	ldr	r3, [pc, #536]	; (8003be0 <callUART+0x274>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	4413      	add	r3, r2
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	4b84      	ldr	r3, [pc, #528]	; (8003be0 <callUART+0x274>)
 80039d0:	701a      	strb	r2, [r3, #0]
			if(Mode == 0b0111){						// Mode7
 80039d2:	4b82      	ldr	r3, [pc, #520]	; (8003bdc <callUART+0x270>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b07      	cmp	r3, #7
 80039d8:	d103      	bne.n	80039e2 <callUART+0x76>
				RxState = 2;
 80039da:	4b7d      	ldr	r3, [pc, #500]	; (8003bd0 <callUART+0x264>)
 80039dc:	2202      	movs	r2, #2
 80039de:	701a      	strb	r2, [r3, #0]
 80039e0:	e002      	b.n	80039e8 <callUART+0x7c>
			}
			else{
				RxState = 1;						// Go to Interrupt Receive next round.
 80039e2:	4b7b      	ldr	r3, [pc, #492]	; (8003bd0 <callUART+0x264>)
 80039e4:	2201      	movs	r2, #1
 80039e6:	701a      	strb	r2, [r3, #0]
			}
			nbyte = frameConfig(Mode);				// Set a new size of buffer.
 80039e8:	4b7c      	ldr	r3, [pc, #496]	; (8003bdc <callUART+0x270>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 fd33 	bl	8004458 <frameConfig>
 80039f2:	4603      	mov	r3, r0
 80039f4:	461a      	mov	r2, r3
 80039f6:	4b7b      	ldr	r3, [pc, #492]	; (8003be4 <callUART+0x278>)
 80039f8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80039fa:	e0d1      	b.n	8003ba0 <callUART+0x234>
	case 1:
		sum += frameSum( Receive, nbyte-1);			// (nbyte-1) Minus checksum out.
 80039fc:	4b79      	ldr	r3, [pc, #484]	; (8003be4 <callUART+0x278>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	4619      	mov	r1, r3
 8003a06:	4873      	ldr	r0, [pc, #460]	; (8003bd4 <callUART+0x268>)
 8003a08:	f000 fd75 	bl	80044f6 <frameSum>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	461a      	mov	r2, r3
 8003a10:	4b73      	ldr	r3, [pc, #460]	; (8003be0 <callUART+0x274>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	4413      	add	r3, r2
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	4b71      	ldr	r3, [pc, #452]	; (8003be0 <callUART+0x274>)
 8003a1a:	701a      	strb	r2, [r3, #0]
		if(Receive[nbyte-1] == checkSum(sum)){		// Corrected.
 8003a1c:	4b71      	ldr	r3, [pc, #452]	; (8003be4 <callUART+0x278>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	3b01      	subs	r3, #1
 8003a22:	4a6c      	ldr	r2, [pc, #432]	; (8003bd4 <callUART+0x268>)
 8003a24:	5cd4      	ldrb	r4, [r2, r3]
 8003a26:	4b6e      	ldr	r3, [pc, #440]	; (8003be0 <callUART+0x274>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fd50 	bl	80044d0 <checkSum>
 8003a30:	4603      	mov	r3, r0
 8003a32:	429c      	cmp	r4, r3
 8003a34:	d102      	bne.n	8003a3c <callUART+0xd0>
			// Receive[nbyte-1] == checkSum(sum)
			TxState = 1;
 8003a36:	4b6c      	ldr	r3, [pc, #432]	; (8003be8 <callUART+0x27c>)
 8003a38:	2201      	movs	r2, #1
 8003a3a:	701a      	strb	r2, [r3, #0]
		}
		if(Mode == 1 || Mode == 9 || Mode == 10 || Mode == 11){
 8003a3c:	4b67      	ldr	r3, [pc, #412]	; (8003bdc <callUART+0x270>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d00b      	beq.n	8003a5c <callUART+0xf0>
 8003a44:	4b65      	ldr	r3, [pc, #404]	; (8003bdc <callUART+0x270>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b09      	cmp	r3, #9
 8003a4a:	d007      	beq.n	8003a5c <callUART+0xf0>
 8003a4c:	4b63      	ldr	r3, [pc, #396]	; (8003bdc <callUART+0x270>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b0a      	cmp	r3, #10
 8003a52:	d003      	beq.n	8003a5c <callUART+0xf0>
 8003a54:	4b61      	ldr	r3, [pc, #388]	; (8003bdc <callUART+0x270>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b0b      	cmp	r3, #11
 8003a5a:	d106      	bne.n	8003a6a <callUART+0xfe>
			nbyte = 1;								// For receive ACK
 8003a5c:	4b61      	ldr	r3, [pc, #388]	; (8003be4 <callUART+0x278>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	701a      	strb	r2, [r3, #0]
			RxState = 3;
 8003a62:	4b5b      	ldr	r3, [pc, #364]	; (8003bd0 <callUART+0x264>)
 8003a64:	2203      	movs	r2, #3
 8003a66:	701a      	strb	r2, [r3, #0]
		}
		else{
			endReceive = 1;
		}

		break;
 8003a68:	e09d      	b.n	8003ba6 <callUART+0x23a>
			endReceive = 1;
 8003a6a:	4b60      	ldr	r3, [pc, #384]	; (8003bec <callUART+0x280>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	701a      	strb	r2, [r3, #0]
		break;
 8003a70:	e099      	b.n	8003ba6 <callUART+0x23a>
	case 2:
		sum += (Receive[0]);
 8003a72:	4b58      	ldr	r3, [pc, #352]	; (8003bd4 <callUART+0x268>)
 8003a74:	781a      	ldrb	r2, [r3, #0]
 8003a76:	4b5a      	ldr	r3, [pc, #360]	; (8003be0 <callUART+0x274>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	4b58      	ldr	r3, [pc, #352]	; (8003be0 <callUART+0x274>)
 8003a80:	701a      	strb	r2, [r3, #0]
		nStation = Receive[0];					// Set received station.
 8003a82:	4b54      	ldr	r3, [pc, #336]	; (8003bd4 <callUART+0x268>)
 8003a84:	781a      	ldrb	r2, [r3, #0]
 8003a86:	4b5a      	ldr	r3, [pc, #360]	; (8003bf0 <callUART+0x284>)
 8003a88:	701a      	strb	r2, [r3, #0]
		nDestination = Receive[0];				// Set received station.
 8003a8a:	4b52      	ldr	r3, [pc, #328]	; (8003bd4 <callUART+0x268>)
 8003a8c:	781a      	ldrb	r2, [r3, #0]
 8003a8e:	4b59      	ldr	r3, [pc, #356]	; (8003bf4 <callUART+0x288>)
 8003a90:	701a      	strb	r2, [r3, #0]
		if(Receive[0] % 2 == 1){
 8003a92:	4b50      	ldr	r3, [pc, #320]	; (8003bd4 <callUART+0x268>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00b      	beq.n	8003ab8 <callUART+0x14c>
			nbyte = ((Receive[0] + 1)/2)+1;
 8003aa0:	4b4c      	ldr	r3, [pc, #304]	; (8003bd4 <callUART+0x268>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	0fda      	lsrs	r2, r3, #31
 8003aa8:	4413      	add	r3, r2
 8003aaa:	105b      	asrs	r3, r3, #1
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	3301      	adds	r3, #1
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	4b4c      	ldr	r3, [pc, #304]	; (8003be4 <callUART+0x278>)
 8003ab4:	701a      	strb	r2, [r3, #0]
 8003ab6:	e007      	b.n	8003ac8 <callUART+0x15c>
		}
		else{
			nbyte = (Receive[0]/2)+1;
 8003ab8:	4b46      	ldr	r3, [pc, #280]	; (8003bd4 <callUART+0x268>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	085b      	lsrs	r3, r3, #1
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	4b47      	ldr	r3, [pc, #284]	; (8003be4 <callUART+0x278>)
 8003ac6:	701a      	strb	r2, [r3, #0]
		}
		RxState = 1;
 8003ac8:	4b41      	ldr	r3, [pc, #260]	; (8003bd0 <callUART+0x264>)
 8003aca:	2201      	movs	r2, #1
 8003acc:	701a      	strb	r2, [r3, #0]
		break;
 8003ace:	e06a      	b.n	8003ba6 <callUART+0x23a>
	case 3:						// For Receive ACK frame
		if(Receive[0] == ACK1[0]){
 8003ad0:	4b40      	ldr	r3, [pc, #256]	; (8003bd4 <callUART+0x268>)
 8003ad2:	781a      	ldrb	r2, [r3, #0]
 8003ad4:	4b48      	ldr	r3, [pc, #288]	; (8003bf8 <callUART+0x28c>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d104      	bne.n	8003ae6 <callUART+0x17a>
			keepACK[0] = Receive[0];
 8003adc:	4b3d      	ldr	r3, [pc, #244]	; (8003bd4 <callUART+0x268>)
 8003ade:	781a      	ldrb	r2, [r3, #0]
 8003ae0:	4b46      	ldr	r3, [pc, #280]	; (8003bfc <callUART+0x290>)
 8003ae2:	701a      	strb	r2, [r3, #0]
 8003ae4:	e040      	b.n	8003b68 <callUART+0x1fc>
		}
		else if(Receive[0] == ACK1[1]){
 8003ae6:	4b3b      	ldr	r3, [pc, #236]	; (8003bd4 <callUART+0x268>)
 8003ae8:	781a      	ldrb	r2, [r3, #0]
 8003aea:	4b43      	ldr	r3, [pc, #268]	; (8003bf8 <callUART+0x28c>)
 8003aec:	785b      	ldrb	r3, [r3, #1]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d104      	bne.n	8003afc <callUART+0x190>
			keepACK[1] = Receive[0];
 8003af2:	4b38      	ldr	r3, [pc, #224]	; (8003bd4 <callUART+0x268>)
 8003af4:	781a      	ldrb	r2, [r3, #0]
 8003af6:	4b41      	ldr	r3, [pc, #260]	; (8003bfc <callUART+0x290>)
 8003af8:	705a      	strb	r2, [r3, #1]
 8003afa:	e035      	b.n	8003b68 <callUART+0x1fc>
		}
		else{
			Start = (Receive[0] & 0xF0)>>4;
 8003afc:	4b35      	ldr	r3, [pc, #212]	; (8003bd4 <callUART+0x268>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	091b      	lsrs	r3, r3, #4
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	4b34      	ldr	r3, [pc, #208]	; (8003bd8 <callUART+0x26c>)
 8003b06:	701a      	strb	r2, [r3, #0]
			Mode = (Receive[0] & 0x0F);
 8003b08:	4b32      	ldr	r3, [pc, #200]	; (8003bd4 <callUART+0x268>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	f003 030f 	and.w	r3, r3, #15
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	4b32      	ldr	r3, [pc, #200]	; (8003bdc <callUART+0x270>)
 8003b14:	701a      	strb	r2, [r3, #0]
			if(Start == 0b1001){
 8003b16:	4b30      	ldr	r3, [pc, #192]	; (8003bd8 <callUART+0x26c>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b09      	cmp	r3, #9
 8003b1c:	d11e      	bne.n	8003b5c <callUART+0x1f0>
				// 0b1001, 0b0100
				sum = 0;
 8003b1e:	4b30      	ldr	r3, [pc, #192]	; (8003be0 <callUART+0x274>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	701a      	strb	r2, [r3, #0]
				sum += (Receive[0]);				// Sum the START & MODE bit.
 8003b24:	4b2b      	ldr	r3, [pc, #172]	; (8003bd4 <callUART+0x268>)
 8003b26:	781a      	ldrb	r2, [r3, #0]
 8003b28:	4b2d      	ldr	r3, [pc, #180]	; (8003be0 <callUART+0x274>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	4b2b      	ldr	r3, [pc, #172]	; (8003be0 <callUART+0x274>)
 8003b32:	701a      	strb	r2, [r3, #0]
				if(Mode == 0b0111){					// Mode7
 8003b34:	4b29      	ldr	r3, [pc, #164]	; (8003bdc <callUART+0x270>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b07      	cmp	r3, #7
 8003b3a:	d103      	bne.n	8003b44 <callUART+0x1d8>
					RxState = 2;
 8003b3c:	4b24      	ldr	r3, [pc, #144]	; (8003bd0 <callUART+0x264>)
 8003b3e:	2202      	movs	r2, #2
 8003b40:	701a      	strb	r2, [r3, #0]
 8003b42:	e002      	b.n	8003b4a <callUART+0x1de>
				}
				else{
					RxState = 1;					// Go to Interrupt Receive next round.
 8003b44:	4b22      	ldr	r3, [pc, #136]	; (8003bd0 <callUART+0x264>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	701a      	strb	r2, [r3, #0]
				}
				nbyte = frameConfig(Mode);			// Set a new size of buffer.
 8003b4a:	4b24      	ldr	r3, [pc, #144]	; (8003bdc <callUART+0x270>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 fc82 	bl	8004458 <frameConfig>
 8003b54:	4603      	mov	r3, r0
 8003b56:	461a      	mov	r2, r3
 8003b58:	4b22      	ldr	r3, [pc, #136]	; (8003be4 <callUART+0x278>)
 8003b5a:	701a      	strb	r2, [r3, #0]
			}
			TxState = 0;
 8003b5c:	4b22      	ldr	r3, [pc, #136]	; (8003be8 <callUART+0x27c>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	701a      	strb	r2, [r3, #0]
			RxState = 1;
 8003b62:	4b1b      	ldr	r3, [pc, #108]	; (8003bd0 <callUART+0x264>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	701a      	strb	r2, [r3, #0]
		}
		if(keepACK[0] == ACK1[0] && keepACK[1] == ACK1[1]){			// It's ACK
 8003b68:	4b24      	ldr	r3, [pc, #144]	; (8003bfc <callUART+0x290>)
 8003b6a:	781a      	ldrb	r2, [r3, #0]
 8003b6c:	4b22      	ldr	r3, [pc, #136]	; (8003bf8 <callUART+0x28c>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d117      	bne.n	8003ba4 <callUART+0x238>
 8003b74:	4b21      	ldr	r3, [pc, #132]	; (8003bfc <callUART+0x290>)
 8003b76:	785a      	ldrb	r2, [r3, #1]
 8003b78:	4b1f      	ldr	r3, [pc, #124]	; (8003bf8 <callUART+0x28c>)
 8003b7a:	785b      	ldrb	r3, [r3, #1]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d111      	bne.n	8003ba4 <callUART+0x238>
			keepACK[0] = 0;
 8003b80:	4b1e      	ldr	r3, [pc, #120]	; (8003bfc <callUART+0x290>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	701a      	strb	r2, [r3, #0]
			keepACK[1] = 0;
 8003b86:	4b1d      	ldr	r3, [pc, #116]	; (8003bfc <callUART+0x290>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	705a      	strb	r2, [r3, #1]
			ACKFlag = 1;
 8003b8c:	4b1c      	ldr	r3, [pc, #112]	; (8003c00 <callUART+0x294>)
 8003b8e:	2201      	movs	r2, #1
 8003b90:	701a      	strb	r2, [r3, #0]
			RxState = 0;
 8003b92:	4b0f      	ldr	r3, [pc, #60]	; (8003bd0 <callUART+0x264>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	701a      	strb	r2, [r3, #0]
			endReceive = 1;
 8003b98:	4b14      	ldr	r3, [pc, #80]	; (8003bec <callUART+0x280>)
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003b9e:	e001      	b.n	8003ba4 <callUART+0x238>
		break;
 8003ba0:	bf00      	nop
 8003ba2:	e000      	b.n	8003ba6 <callUART+0x23a>
		break;
 8003ba4:	bf00      	nop
	}
	// if complete or fail -> reset communication rxstate=0, sum=0, mode=0, nbyte=1,
	if(endReceive){
 8003ba6:	4b11      	ldr	r3, [pc, #68]	; (8003bec <callUART+0x280>)
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00b      	beq.n	8003bc6 <callUART+0x25a>
		RxState = 0;
 8003bae:	4b08      	ldr	r3, [pc, #32]	; (8003bd0 <callUART+0x264>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	701a      	strb	r2, [r3, #0]
		nbyte = 1;
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <callUART+0x278>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	701a      	strb	r2, [r3, #0]
		sum = 0;
 8003bba:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <callUART+0x274>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	701a      	strb	r2, [r3, #0]
		endReceive = 0;
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <callUART+0x280>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	701a      	strb	r2, [r3, #0]
	}

	//RxComplete = 0;
}
 8003bc6:	bf00      	nop
 8003bc8:	bd98      	pop	{r3, r4, r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	200003c0 	.word	0x200003c0
 8003bd0:	20000546 	.word	0x20000546
 8003bd4:	20000550 	.word	0x20000550
 8003bd8:	20000547 	.word	0x20000547
 8003bdc:	20000548 	.word	0x20000548
 8003be0:	20000549 	.word	0x20000549
 8003be4:	2000001e 	.word	0x2000001e
 8003be8:	20000545 	.word	0x20000545
 8003bec:	20000562 	.word	0x20000562
 8003bf0:	20000538 	.word	0x20000538
 8003bf4:	200004d0 	.word	0x200004d0
 8003bf8:	20000018 	.word	0x20000018
 8003bfc:	20000560 	.word	0x20000560
 8003c00:	20000563 	.word	0x20000563
 8003c04:	00000000 	.word	0x00000000

08003c08 <responseUART>:

void responseUART(){
 8003c08:	b590      	push	{r4, r7, lr}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0

	switch(Mode){
 8003c0e:	4ba2      	ldr	r3, [pc, #648]	; (8003e98 <responseUART+0x290>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b0e      	cmp	r3, #14
 8003c14:	f200 839a 	bhi.w	800434c <responseUART+0x744>
 8003c18:	a201      	add	r2, pc, #4	; (adr r2, 8003c20 <responseUART+0x18>)
 8003c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1e:	bf00      	nop
 8003c20:	08004317 	.word	0x08004317
 8003c24:	08003c5d 	.word	0x08003c5d
 8003c28:	08003d0f 	.word	0x08003d0f
 8003c2c:	08003d3f 	.word	0x08003d3f
 8003c30:	08003d6f 	.word	0x08003d6f
 8003c34:	08003dcb 	.word	0x08003dcb
 8003c38:	08003e2b 	.word	0x08003e2b
 8003c3c:	08003e6d 	.word	0x08003e6d
 8003c40:	08003f53 	.word	0x08003f53
 8003c44:	08003f83 	.word	0x08003f83
 8003c48:	08004035 	.word	0x08004035
 8003c4c:	08004135 	.word	0x08004135
 8003c50:	08004291 	.word	0x08004291
 8003c54:	080042c1 	.word	0x080042c1
 8003c58:	080042e9 	.word	0x080042e9

	case 0:
		break;

	case 1:	// <<<< 95% COMPLETE >>>>
		switch(TxState){
 8003c5c:	4b8f      	ldr	r3, [pc, #572]	; (8003e9c <responseUART+0x294>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	f200 835a 	bhi.w	800431a <responseUART+0x712>
 8003c66:	a201      	add	r2, pc, #4	; (adr r2, 8003c6c <responseUART+0x64>)
 8003c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6c:	08003d03 	.word	0x08003d03
 8003c70:	08003c81 	.word	0x08003c81
 8003c74:	08003c93 	.word	0x08003c93
 8003c78:	08003ccf 	.word	0x08003ccf
 8003c7c:	08003ced 	.word	0x08003ced
		case 0:
			break;
		case 1:
			HAL_UART_Transmit_DMA(&huart2, ACK1, 2);
 8003c80:	2202      	movs	r2, #2
 8003c82:	4987      	ldr	r1, [pc, #540]	; (8003ea0 <responseUART+0x298>)
 8003c84:	4887      	ldr	r0, [pc, #540]	; (8003ea4 <responseUART+0x29c>)
 8003c86:	f006 fdbf 	bl	800a808 <HAL_UART_Transmit_DMA>
			TxState = 2;
 8003c8a:	4b84      	ldr	r3, [pc, #528]	; (8003e9c <responseUART+0x294>)
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	701a      	strb	r2, [r3, #0]
			break;
 8003c90:	e03c      	b.n	8003d0c <responseUART+0x104>
		case 2:
			Transmit[0] = 0b10010001;								// Store byte to Transmit.
 8003c92:	4b85      	ldr	r3, [pc, #532]	; (8003ea8 <responseUART+0x2a0>)
 8003c94:	2291      	movs	r2, #145	; 0x91
 8003c96:	701a      	strb	r2, [r3, #0]
			Transmit[1] = Receive[0];
 8003c98:	4b84      	ldr	r3, [pc, #528]	; (8003eac <responseUART+0x2a4>)
 8003c9a:	781a      	ldrb	r2, [r3, #0]
 8003c9c:	4b82      	ldr	r3, [pc, #520]	; (8003ea8 <responseUART+0x2a0>)
 8003c9e:	705a      	strb	r2, [r3, #1]
			Transmit[2] = Receive[1];
 8003ca0:	4b82      	ldr	r3, [pc, #520]	; (8003eac <responseUART+0x2a4>)
 8003ca2:	785a      	ldrb	r2, [r3, #1]
 8003ca4:	4b80      	ldr	r3, [pc, #512]	; (8003ea8 <responseUART+0x2a0>)
 8003ca6:	709a      	strb	r2, [r3, #2]
			Transmit[3] = checkSum(frameSum(Transmit, 3));			// Let the last byte equal to checksum of 1st-3rd byte.
 8003ca8:	2103      	movs	r1, #3
 8003caa:	487f      	ldr	r0, [pc, #508]	; (8003ea8 <responseUART+0x2a0>)
 8003cac:	f000 fc23 	bl	80044f6 <frameSum>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 fc0c 	bl	80044d0 <checkSum>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	461a      	mov	r2, r3
 8003cbc:	4b7a      	ldr	r3, [pc, #488]	; (8003ea8 <responseUART+0x2a0>)
 8003cbe:	70da      	strb	r2, [r3, #3]
			RxState = 3;
 8003cc0:	4b7b      	ldr	r3, [pc, #492]	; (8003eb0 <responseUART+0x2a8>)
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	701a      	strb	r2, [r3, #0]
			TxState = 3;
 8003cc6:	4b75      	ldr	r3, [pc, #468]	; (8003e9c <responseUART+0x294>)
 8003cc8:	2203      	movs	r2, #3
 8003cca:	701a      	strb	r2, [r3, #0]
			break;
 8003ccc:	e01e      	b.n	8003d0c <responseUART+0x104>
		case 3:
			if(huart2.gState == HAL_UART_STATE_READY){
 8003cce:	4b75      	ldr	r3, [pc, #468]	; (8003ea4 <responseUART+0x29c>)
 8003cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d115      	bne.n	8003d06 <responseUART+0xfe>
				HAL_UART_Transmit_DMA(&huart2, Transmit, 4);		// Transmit command back.
 8003cda:	2204      	movs	r2, #4
 8003cdc:	4972      	ldr	r1, [pc, #456]	; (8003ea8 <responseUART+0x2a0>)
 8003cde:	4871      	ldr	r0, [pc, #452]	; (8003ea4 <responseUART+0x29c>)
 8003ce0:	f006 fd92 	bl	800a808 <HAL_UART_Transmit_DMA>
				TxState = 4;
 8003ce4:	4b6d      	ldr	r3, [pc, #436]	; (8003e9c <responseUART+0x294>)
 8003ce6:	2204      	movs	r2, #4
 8003ce8:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003cea:	e00c      	b.n	8003d06 <responseUART+0xfe>
		case 4:
			if(ACKFlag){
 8003cec:	4b71      	ldr	r3, [pc, #452]	; (8003eb4 <responseUART+0x2ac>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <responseUART+0x102>
				ACKFlag = 0;
 8003cf4:	4b6f      	ldr	r3, [pc, #444]	; (8003eb4 <responseUART+0x2ac>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	701a      	strb	r2, [r3, #0]
				TxState = 0;
 8003cfa:	4b68      	ldr	r3, [pc, #416]	; (8003e9c <responseUART+0x294>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003d00:	e003      	b.n	8003d0a <responseUART+0x102>
			break;
 8003d02:	bf00      	nop
 8003d04:	e309      	b.n	800431a <responseUART+0x712>
			break;
 8003d06:	bf00      	nop
 8003d08:	e307      	b.n	800431a <responseUART+0x712>
			break;
 8003d0a:	bf00      	nop
		}
		break;
 8003d0c:	e305      	b.n	800431a <responseUART+0x712>

	case 2:	// <<<< COMPLETE >>>>
		// Connect
		switch(TxState){
 8003d0e:	4b63      	ldr	r3, [pc, #396]	; (8003e9c <responseUART+0x294>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d011      	beq.n	8003d3a <responseUART+0x132>
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	f040 8301 	bne.w	800431e <responseUART+0x716>
		case 0:
			break;
		case 1:
			HAL_UART_Transmit_DMA(&huart2, ACK1, 2);
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	4960      	ldr	r1, [pc, #384]	; (8003ea0 <responseUART+0x298>)
 8003d20:	4860      	ldr	r0, [pc, #384]	; (8003ea4 <responseUART+0x29c>)
 8003d22:	f006 fd71 	bl	800a808 <HAL_UART_Transmit_DMA>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8003d26:	2201      	movs	r2, #1
 8003d28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d2c:	4862      	ldr	r0, [pc, #392]	; (8003eb8 <responseUART+0x2b0>)
 8003d2e:	f001 feb5 	bl	8005a9c <HAL_GPIO_WritePin>
			TxState = 0;
 8003d32:	4b5a      	ldr	r3, [pc, #360]	; (8003e9c <responseUART+0x294>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	701a      	strb	r2, [r3, #0]
			break;
 8003d38:	e000      	b.n	8003d3c <responseUART+0x134>
			break;
 8003d3a:	bf00      	nop
		}
		break;
 8003d3c:	e2ef      	b.n	800431e <responseUART+0x716>

	case 3:	// <<<< COMPLETE >>>>
		// Disconnect
		switch(TxState){
 8003d3e:	4b57      	ldr	r3, [pc, #348]	; (8003e9c <responseUART+0x294>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d011      	beq.n	8003d6a <responseUART+0x162>
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	f040 82eb 	bne.w	8004322 <responseUART+0x71a>
		case 0:
			break;
		case 1:
			HAL_UART_Transmit_DMA(&huart2, ACK1, 2);
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	4954      	ldr	r1, [pc, #336]	; (8003ea0 <responseUART+0x298>)
 8003d50:	4854      	ldr	r0, [pc, #336]	; (8003ea4 <responseUART+0x29c>)
 8003d52:	f006 fd59 	bl	800a808 <HAL_UART_Transmit_DMA>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8003d56:	2200      	movs	r2, #0
 8003d58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d5c:	4856      	ldr	r0, [pc, #344]	; (8003eb8 <responseUART+0x2b0>)
 8003d5e:	f001 fe9d 	bl	8005a9c <HAL_GPIO_WritePin>
			TxState = 0;
 8003d62:	4b4e      	ldr	r3, [pc, #312]	; (8003e9c <responseUART+0x294>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	701a      	strb	r2, [r3, #0]
			break;
 8003d68:	e000      	b.n	8003d6c <responseUART+0x164>
			break;
 8003d6a:	bf00      	nop
		}
		break;
 8003d6c:	e2d9      	b.n	8004322 <responseUART+0x71a>

	case 4:	// <<<< COMPLETE >>>>
		// Set limit of omega
		switch(TxState){
 8003d6e:	4b4b      	ldr	r3, [pc, #300]	; (8003e9c <responseUART+0x294>)
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d027      	beq.n	8003dc6 <responseUART+0x1be>
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	f040 82d5 	bne.w	8004326 <responseUART+0x71e>
		case 0:
			break;
		case 1:
			limitOmega = (Receive[1]*10.0)/(255.0);
 8003d7c:	4b4b      	ldr	r3, [pc, #300]	; (8003eac <responseUART+0x2a4>)
 8003d7e:	785b      	ldrb	r3, [r3, #1]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fc fb7b 	bl	800047c <__aeabi_i2d>
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	4b4c      	ldr	r3, [pc, #304]	; (8003ebc <responseUART+0x2b4>)
 8003d8c:	f7fc fbe0 	bl	8000550 <__aeabi_dmul>
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4610      	mov	r0, r2
 8003d96:	4619      	mov	r1, r3
 8003d98:	a33b      	add	r3, pc, #236	; (adr r3, 8003e88 <responseUART+0x280>)
 8003d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9e:	f7fc fd01 	bl	80007a4 <__aeabi_ddiv>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4610      	mov	r0, r2
 8003da8:	4619      	mov	r1, r3
 8003daa:	f7fc fea1 	bl	8000af0 <__aeabi_d2f>
 8003dae:	4603      	mov	r3, r0
 8003db0:	4a43      	ldr	r2, [pc, #268]	; (8003ec0 <responseUART+0x2b8>)
 8003db2:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit_DMA(&huart2, ACK1, 2);
 8003db4:	2202      	movs	r2, #2
 8003db6:	493a      	ldr	r1, [pc, #232]	; (8003ea0 <responseUART+0x298>)
 8003db8:	483a      	ldr	r0, [pc, #232]	; (8003ea4 <responseUART+0x29c>)
 8003dba:	f006 fd25 	bl	800a808 <HAL_UART_Transmit_DMA>
			TxState = 0;
 8003dbe:	4b37      	ldr	r3, [pc, #220]	; (8003e9c <responseUART+0x294>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	701a      	strb	r2, [r3, #0]
			break;
 8003dc4:	e000      	b.n	8003dc8 <responseUART+0x1c0>
			break;
 8003dc6:	bf00      	nop
		}
		break;
 8003dc8:	e2ad      	b.n	8004326 <responseUART+0x71e>

	case 5: // <<<< 95% COMPLETE >>>>
		// Set new position()
		switch(TxState){
 8003dca:	4b34      	ldr	r3, [pc, #208]	; (8003e9c <responseUART+0x294>)
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d029      	beq.n	8003e26 <responseUART+0x21e>
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	f040 82a9 	bne.w	800432a <responseUART+0x722>
		case 0:
			break;
		case 1:
			nDestination = 1;
 8003dd8:	4b3a      	ldr	r3, [pc, #232]	; (8003ec4 <responseUART+0x2bc>)
 8003dda:	2201      	movs	r2, #1
 8003ddc:	701a      	strb	r2, [r3, #0]
			Destination[0] = ( ( (Receive[0]*256)+(Receive[1]) )*(180) )/(10000*3.14);
 8003dde:	4b33      	ldr	r3, [pc, #204]	; (8003eac <responseUART+0x2a4>)
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	021b      	lsls	r3, r3, #8
 8003de4:	4a31      	ldr	r2, [pc, #196]	; (8003eac <responseUART+0x2a4>)
 8003de6:	7852      	ldrb	r2, [r2, #1]
 8003de8:	4413      	add	r3, r2
 8003dea:	22b4      	movs	r2, #180	; 0xb4
 8003dec:	fb02 f303 	mul.w	r3, r2, r3
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fc fb43 	bl	800047c <__aeabi_i2d>
 8003df6:	a326      	add	r3, pc, #152	; (adr r3, 8003e90 <responseUART+0x288>)
 8003df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfc:	f7fc fcd2 	bl	80007a4 <__aeabi_ddiv>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4610      	mov	r0, r2
 8003e06:	4619      	mov	r1, r3
 8003e08:	f7fc fe52 	bl	8000ab0 <__aeabi_d2uiz>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	4b2d      	ldr	r3, [pc, #180]	; (8003ec8 <responseUART+0x2c0>)
 8003e12:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, ACK1, 2);
 8003e14:	2202      	movs	r2, #2
 8003e16:	4922      	ldr	r1, [pc, #136]	; (8003ea0 <responseUART+0x298>)
 8003e18:	4822      	ldr	r0, [pc, #136]	; (8003ea4 <responseUART+0x29c>)
 8003e1a:	f006 fcf5 	bl	800a808 <HAL_UART_Transmit_DMA>
			TxState = 0;
 8003e1e:	4b1f      	ldr	r3, [pc, #124]	; (8003e9c <responseUART+0x294>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	701a      	strb	r2, [r3, #0]
			//timeStamp = HAL_GetTick();								// Optional
			break;
 8003e24:	e000      	b.n	8003e28 <responseUART+0x220>
			break;
 8003e26:	bf00      	nop
		}
		break;
 8003e28:	e27f      	b.n	800432a <responseUART+0x722>

	case 6:	// <<<< 95% COMPLETE >>>>
		// Set 1 station
		switch(TxState){
 8003e2a:	4b1c      	ldr	r3, [pc, #112]	; (8003e9c <responseUART+0x294>)
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d01a      	beq.n	8003e68 <responseUART+0x260>
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	f040 827b 	bne.w	800432e <responseUART+0x726>
		case 0:
			break;
		case 1:
			nStation = 1;
 8003e38:	4b24      	ldr	r3, [pc, #144]	; (8003ecc <responseUART+0x2c4>)
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	701a      	strb	r2, [r3, #0]
			nDestination = 1;
 8003e3e:	4b21      	ldr	r3, [pc, #132]	; (8003ec4 <responseUART+0x2bc>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	701a      	strb	r2, [r3, #0]
			Destination[0] = tranStation(Receive[1]);
 8003e44:	4b19      	ldr	r3, [pc, #100]	; (8003eac <responseUART+0x2a4>)
 8003e46:	785b      	ldrb	r3, [r3, #1]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 faa3 	bl	8004394 <tranStation>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	461a      	mov	r2, r3
 8003e52:	4b1d      	ldr	r3, [pc, #116]	; (8003ec8 <responseUART+0x2c0>)
 8003e54:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, ACK1, 2);
 8003e56:	2202      	movs	r2, #2
 8003e58:	4911      	ldr	r1, [pc, #68]	; (8003ea0 <responseUART+0x298>)
 8003e5a:	4812      	ldr	r0, [pc, #72]	; (8003ea4 <responseUART+0x29c>)
 8003e5c:	f006 fcd4 	bl	800a808 <HAL_UART_Transmit_DMA>
			TxState = 0;
 8003e60:	4b0e      	ldr	r3, [pc, #56]	; (8003e9c <responseUART+0x294>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	701a      	strb	r2, [r3, #0]
			//timeStamp = HAL_GetTick();								// Optional
			break;
 8003e66:	e000      	b.n	8003e6a <responseUART+0x262>
			break;
 8003e68:	bf00      	nop
		}
		break;
 8003e6a:	e260      	b.n	800432e <responseUART+0x726>

	case 7:
		// set n station
		switch(TxState){
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <responseUART+0x294>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d06c      	beq.n	8003f4e <responseUART+0x346>
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	f040 825c 	bne.w	8004332 <responseUART+0x72a>
		case 0:
			break;
		case 1:
			nDestination = nStation;
 8003e7a:	4b14      	ldr	r3, [pc, #80]	; (8003ecc <responseUART+0x2c4>)
 8003e7c:	781a      	ldrb	r2, [r3, #0]
 8003e7e:	4b11      	ldr	r3, [pc, #68]	; (8003ec4 <responseUART+0x2bc>)
 8003e80:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<(nStation+(nStation%2)); i+=2){
 8003e82:	2300      	movs	r3, #0
 8003e84:	607b      	str	r3, [r7, #4]
 8003e86:	e04e      	b.n	8003f26 <responseUART+0x31e>
 8003e88:	00000000 	.word	0x00000000
 8003e8c:	406fe000 	.word	0x406fe000
 8003e90:	00000000 	.word	0x00000000
 8003e94:	40deaa00 	.word	0x40deaa00
 8003e98:	20000548 	.word	0x20000548
 8003e9c:	20000545 	.word	0x20000545
 8003ea0:	20000018 	.word	0x20000018
 8003ea4:	200003c0 	.word	0x200003c0
 8003ea8:	2000054c 	.word	0x2000054c
 8003eac:	20000550 	.word	0x20000550
 8003eb0:	20000546 	.word	0x20000546
 8003eb4:	20000563 	.word	0x20000563
 8003eb8:	40020400 	.word	0x40020400
 8003ebc:	40240000 	.word	0x40240000
 8003ec0:	20000014 	.word	0x20000014
 8003ec4:	200004d0 	.word	0x200004d0
 8003ec8:	200004d4 	.word	0x200004d4
 8003ecc:	20000538 	.word	0x20000538
				Destination[i] = tranStation(Receive[j] & 0x0F);
 8003ed0:	4baf      	ldr	r3, [pc, #700]	; (8004190 <responseUART+0x588>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	4baf      	ldr	r3, [pc, #700]	; (8004194 <responseUART+0x58c>)
 8003ed8:	5c9b      	ldrb	r3, [r3, r2]
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 fa57 	bl	8004394 <tranStation>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4aab      	ldr	r2, [pc, #684]	; (8004198 <responseUART+0x590>)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				Destination[i+1] = tranStation((Receive[j] & 0xF0)>>4);
 8003ef2:	4ba7      	ldr	r3, [pc, #668]	; (8004190 <responseUART+0x588>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	4ba6      	ldr	r3, [pc, #664]	; (8004194 <responseUART+0x58c>)
 8003efa:	5c9b      	ldrb	r3, [r3, r2]
 8003efc:	091b      	lsrs	r3, r3, #4
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	1c5c      	adds	r4, r3, #1
 8003f04:	4610      	mov	r0, r2
 8003f06:	f000 fa45 	bl	8004394 <tranStation>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4ba2      	ldr	r3, [pc, #648]	; (8004198 <responseUART+0x590>)
 8003f10:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
				j+=1;
 8003f14:	4b9e      	ldr	r3, [pc, #632]	; (8004190 <responseUART+0x588>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	4b9c      	ldr	r3, [pc, #624]	; (8004190 <responseUART+0x588>)
 8003f1e:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<(nStation+(nStation%2)); i+=2){
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3302      	adds	r3, #2
 8003f24:	607b      	str	r3, [r7, #4]
 8003f26:	4b9d      	ldr	r3, [pc, #628]	; (800419c <responseUART+0x594>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	f023 0301 	bic.w	r3, r3, #1
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	dbcc      	blt.n	8003ed0 <responseUART+0x2c8>
			}
			HAL_UART_Transmit_DMA(&huart2, ACK1, 2);
 8003f36:	2202      	movs	r2, #2
 8003f38:	4999      	ldr	r1, [pc, #612]	; (80041a0 <responseUART+0x598>)
 8003f3a:	489a      	ldr	r0, [pc, #616]	; (80041a4 <responseUART+0x59c>)
 8003f3c:	f006 fc64 	bl	800a808 <HAL_UART_Transmit_DMA>
			j = 0;
 8003f40:	4b93      	ldr	r3, [pc, #588]	; (8004190 <responseUART+0x588>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	701a      	strb	r2, [r3, #0]
			TxState = 0;
 8003f46:	4b98      	ldr	r3, [pc, #608]	; (80041a8 <responseUART+0x5a0>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	701a      	strb	r2, [r3, #0]
			break;
 8003f4c:	e000      	b.n	8003f50 <responseUART+0x348>
			break;
 8003f4e:	bf00      	nop
		}
		break;
 8003f50:	e1ef      	b.n	8004332 <responseUART+0x72a>

	case 8:	// <<<< 95% COMPLETE >>>>
		// Go!
		switch(TxState){
 8003f52:	4b95      	ldr	r3, [pc, #596]	; (80041a8 <responseUART+0x5a0>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d011      	beq.n	8003f7e <responseUART+0x376>
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	f040 81eb 	bne.w	8004336 <responseUART+0x72e>
		case 0:
			break;
		case 1:
			HAL_UART_Transmit_DMA(&huart2, ACK1, 2);
 8003f60:	2202      	movs	r2, #2
 8003f62:	498f      	ldr	r1, [pc, #572]	; (80041a0 <responseUART+0x598>)
 8003f64:	488f      	ldr	r0, [pc, #572]	; (80041a4 <responseUART+0x59c>)
 8003f66:	f006 fc4f 	bl	800a808 <HAL_UART_Transmit_DMA>
			update = 1;
 8003f6a:	4b90      	ldr	r3, [pc, #576]	; (80041ac <responseUART+0x5a4>)
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	701a      	strb	r2, [r3, #0]
			movingFlag = 8;
 8003f70:	4b8f      	ldr	r3, [pc, #572]	; (80041b0 <responseUART+0x5a8>)
 8003f72:	2208      	movs	r2, #8
 8003f74:	701a      	strb	r2, [r3, #0]
			TxState = 0;
 8003f76:	4b8c      	ldr	r3, [pc, #560]	; (80041a8 <responseUART+0x5a0>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	701a      	strb	r2, [r3, #0]
			//timeStamp = HAL_GetTick();								// Optional
			break;
 8003f7c:	e000      	b.n	8003f80 <responseUART+0x378>
			break;
 8003f7e:	bf00      	nop
		}
		break;
 8003f80:	e1d9      	b.n	8004336 <responseUART+0x72e>

	case 9:	// <<<< 95% COMPLETE >>>>
		// transmit station
		switch(TxState){
 8003f82:	4b89      	ldr	r3, [pc, #548]	; (80041a8 <responseUART+0x5a0>)
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	f200 81d7 	bhi.w	800433a <responseUART+0x732>
 8003f8c:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <responseUART+0x38c>)
 8003f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f92:	bf00      	nop
 8003f94:	08004029 	.word	0x08004029
 8003f98:	08003fa9 	.word	0x08003fa9
 8003f9c:	08003fbb 	.word	0x08003fbb
 8003fa0:	08003ff5 	.word	0x08003ff5
 8003fa4:	08004013 	.word	0x08004013
		case 0:
			break;
		case 1:
			HAL_UART_Transmit_DMA(&huart2, ACK1, 2);
 8003fa8:	2202      	movs	r2, #2
 8003faa:	497d      	ldr	r1, [pc, #500]	; (80041a0 <responseUART+0x598>)
 8003fac:	487d      	ldr	r0, [pc, #500]	; (80041a4 <responseUART+0x59c>)
 8003fae:	f006 fc2b 	bl	800a808 <HAL_UART_Transmit_DMA>
			TxState = 2;
 8003fb2:	4b7d      	ldr	r3, [pc, #500]	; (80041a8 <responseUART+0x5a0>)
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	701a      	strb	r2, [r3, #0]
			break;
 8003fb8:	e03b      	b.n	8004032 <responseUART+0x42a>
		case 2:
			Transmit[0] = 0b10011001;								// Store byte to Transmit.
 8003fba:	4b7e      	ldr	r3, [pc, #504]	; (80041b4 <responseUART+0x5ac>)
 8003fbc:	2299      	movs	r2, #153	; 0x99
 8003fbe:	701a      	strb	r2, [r3, #0]
			Transmit[1] = 0;
 8003fc0:	4b7c      	ldr	r3, [pc, #496]	; (80041b4 <responseUART+0x5ac>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	705a      	strb	r2, [r3, #1]
			Transmit[2] = nowStation;								// Value from state machine.
 8003fc6:	4b7c      	ldr	r3, [pc, #496]	; (80041b8 <responseUART+0x5b0>)
 8003fc8:	781a      	ldrb	r2, [r3, #0]
 8003fca:	4b7a      	ldr	r3, [pc, #488]	; (80041b4 <responseUART+0x5ac>)
 8003fcc:	709a      	strb	r2, [r3, #2]
			Transmit[3] = checkSum(frameSum(Transmit, 3));			// Let the last byte equal to checksum of 1st-3rd byte.
 8003fce:	2103      	movs	r1, #3
 8003fd0:	4878      	ldr	r0, [pc, #480]	; (80041b4 <responseUART+0x5ac>)
 8003fd2:	f000 fa90 	bl	80044f6 <frameSum>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 fa79 	bl	80044d0 <checkSum>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	4b74      	ldr	r3, [pc, #464]	; (80041b4 <responseUART+0x5ac>)
 8003fe4:	70da      	strb	r2, [r3, #3]
			RxState = 3;
 8003fe6:	4b75      	ldr	r3, [pc, #468]	; (80041bc <responseUART+0x5b4>)
 8003fe8:	2203      	movs	r2, #3
 8003fea:	701a      	strb	r2, [r3, #0]
			TxState = 3;
 8003fec:	4b6e      	ldr	r3, [pc, #440]	; (80041a8 <responseUART+0x5a0>)
 8003fee:	2203      	movs	r2, #3
 8003ff0:	701a      	strb	r2, [r3, #0]
			break;
 8003ff2:	e01e      	b.n	8004032 <responseUART+0x42a>
		case 3:
			if(huart2.gState == HAL_UART_STATE_READY){
 8003ff4:	4b6b      	ldr	r3, [pc, #428]	; (80041a4 <responseUART+0x59c>)
 8003ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b20      	cmp	r3, #32
 8003ffe:	d115      	bne.n	800402c <responseUART+0x424>
				HAL_UART_Transmit_DMA(&huart2, Transmit, 4);		// Transmit command back.
 8004000:	2204      	movs	r2, #4
 8004002:	496c      	ldr	r1, [pc, #432]	; (80041b4 <responseUART+0x5ac>)
 8004004:	4867      	ldr	r0, [pc, #412]	; (80041a4 <responseUART+0x59c>)
 8004006:	f006 fbff 	bl	800a808 <HAL_UART_Transmit_DMA>
				TxState = 4;
 800400a:	4b67      	ldr	r3, [pc, #412]	; (80041a8 <responseUART+0x5a0>)
 800400c:	2204      	movs	r2, #4
 800400e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004010:	e00c      	b.n	800402c <responseUART+0x424>
		case 4:
			if(ACKFlag){
 8004012:	4b6b      	ldr	r3, [pc, #428]	; (80041c0 <responseUART+0x5b8>)
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <responseUART+0x428>
				ACKFlag = 0;
 800401a:	4b69      	ldr	r3, [pc, #420]	; (80041c0 <responseUART+0x5b8>)
 800401c:	2200      	movs	r2, #0
 800401e:	701a      	strb	r2, [r3, #0]
				TxState = 0;
 8004020:	4b61      	ldr	r3, [pc, #388]	; (80041a8 <responseUART+0x5a0>)
 8004022:	2200      	movs	r2, #0
 8004024:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004026:	e003      	b.n	8004030 <responseUART+0x428>
			break;
 8004028:	bf00      	nop
 800402a:	e186      	b.n	800433a <responseUART+0x732>
			break;
 800402c:	bf00      	nop
 800402e:	e184      	b.n	800433a <responseUART+0x732>
			break;
 8004030:	bf00      	nop
		}
		break;
 8004032:	e182      	b.n	800433a <responseUART+0x732>

	case 10:	// <<<< 95% COMPLETE >>>>
		// transmit theta (rad variable)
		switch(TxState){
 8004034:	4b5c      	ldr	r3, [pc, #368]	; (80041a8 <responseUART+0x5a0>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2b04      	cmp	r3, #4
 800403a:	f200 8180 	bhi.w	800433e <responseUART+0x736>
 800403e:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <responseUART+0x43c>)
 8004040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004044:	08004129 	.word	0x08004129
 8004048:	08004059 	.word	0x08004059
 800404c:	0800406b 	.word	0x0800406b
 8004050:	080040f5 	.word	0x080040f5
 8004054:	08004113 	.word	0x08004113
		case 0:
			break;
		case 1:
			HAL_UART_Transmit_DMA(&huart2, ACK1, 2);
 8004058:	2202      	movs	r2, #2
 800405a:	4951      	ldr	r1, [pc, #324]	; (80041a0 <responseUART+0x598>)
 800405c:	4851      	ldr	r0, [pc, #324]	; (80041a4 <responseUART+0x59c>)
 800405e:	f006 fbd3 	bl	800a808 <HAL_UART_Transmit_DMA>
			TxState = 2;
 8004062:	4b51      	ldr	r3, [pc, #324]	; (80041a8 <responseUART+0x5a0>)
 8004064:	2202      	movs	r2, #2
 8004066:	701a      	strb	r2, [r3, #0]
			break;
 8004068:	e063      	b.n	8004132 <responseUART+0x52a>
		case 2:
			Transmit[0] = 0b10011010;								// Store byte to Transmit.
 800406a:	4b52      	ldr	r3, [pc, #328]	; (80041b4 <responseUART+0x5ac>)
 800406c:	229a      	movs	r2, #154	; 0x9a
 800406e:	701a      	strb	r2, [r3, #0]
			Transmit[1] = ( (uint16_t)(current_rad_wrap*10000)) >> 8;									// 16bit value from encoder.
 8004070:	4b54      	ldr	r3, [pc, #336]	; (80041c4 <responseUART+0x5bc>)
 8004072:	edd3 7a00 	vldr	s15, [r3]
 8004076:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80041c8 <responseUART+0x5c0>
 800407a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800407e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004082:	ee17 3a90 	vmov	r3, s15
 8004086:	b29b      	uxth	r3, r3
 8004088:	0a1b      	lsrs	r3, r3, #8
 800408a:	b29b      	uxth	r3, r3
 800408c:	b2da      	uxtb	r2, r3
 800408e:	4b49      	ldr	r3, [pc, #292]	; (80041b4 <responseUART+0x5ac>)
 8004090:	705a      	strb	r2, [r3, #1]
			Transmit[2] = ( (uint16_t)(current_rad_wrap*10000)) & 0xFF;
 8004092:	4b4c      	ldr	r3, [pc, #304]	; (80041c4 <responseUART+0x5bc>)
 8004094:	edd3 7a00 	vldr	s15, [r3]
 8004098:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80041c8 <responseUART+0x5c0>
 800409c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040a4:	ee17 3a90 	vmov	r3, s15
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	4b41      	ldr	r3, [pc, #260]	; (80041b4 <responseUART+0x5ac>)
 80040ae:	709a      	strb	r2, [r3, #2]
			if(HAL_GetTick()-HMEtimeStamp < 1000){
 80040b0:	f000 fe06 	bl	8004cc0 <HAL_GetTick>
 80040b4:	4603      	mov	r3, r0
 80040b6:	4a45      	ldr	r2, [pc, #276]	; (80041cc <responseUART+0x5c4>)
 80040b8:	8812      	ldrh	r2, [r2, #0]
 80040ba:	1a9b      	subs	r3, r3, r2
 80040bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040c0:	d205      	bcs.n	80040ce <responseUART+0x4c6>
				Transmit[1] = 0;
 80040c2:	4b3c      	ldr	r3, [pc, #240]	; (80041b4 <responseUART+0x5ac>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	705a      	strb	r2, [r3, #1]
				Transmit[2] = 0;
 80040c8:	4b3a      	ldr	r3, [pc, #232]	; (80041b4 <responseUART+0x5ac>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	709a      	strb	r2, [r3, #2]
			}
			Transmit[3] = checkSum(frameSum(Transmit, 3));			// Let the last byte equal to checksum of 1st-3rd byte.
 80040ce:	2103      	movs	r1, #3
 80040d0:	4838      	ldr	r0, [pc, #224]	; (80041b4 <responseUART+0x5ac>)
 80040d2:	f000 fa10 	bl	80044f6 <frameSum>
 80040d6:	4603      	mov	r3, r0
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 f9f9 	bl	80044d0 <checkSum>
 80040de:	4603      	mov	r3, r0
 80040e0:	461a      	mov	r2, r3
 80040e2:	4b34      	ldr	r3, [pc, #208]	; (80041b4 <responseUART+0x5ac>)
 80040e4:	70da      	strb	r2, [r3, #3]
			RxState = 3;
 80040e6:	4b35      	ldr	r3, [pc, #212]	; (80041bc <responseUART+0x5b4>)
 80040e8:	2203      	movs	r2, #3
 80040ea:	701a      	strb	r2, [r3, #0]
			TxState = 3;
 80040ec:	4b2e      	ldr	r3, [pc, #184]	; (80041a8 <responseUART+0x5a0>)
 80040ee:	2203      	movs	r2, #3
 80040f0:	701a      	strb	r2, [r3, #0]
			break;
 80040f2:	e01e      	b.n	8004132 <responseUART+0x52a>
		case 3:
			if(huart2.gState == HAL_UART_STATE_READY){
 80040f4:	4b2b      	ldr	r3, [pc, #172]	; (80041a4 <responseUART+0x59c>)
 80040f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b20      	cmp	r3, #32
 80040fe:	d115      	bne.n	800412c <responseUART+0x524>
				HAL_UART_Transmit_DMA(&huart2, Transmit, 4);		// Transmit command back.
 8004100:	2204      	movs	r2, #4
 8004102:	492c      	ldr	r1, [pc, #176]	; (80041b4 <responseUART+0x5ac>)
 8004104:	4827      	ldr	r0, [pc, #156]	; (80041a4 <responseUART+0x59c>)
 8004106:	f006 fb7f 	bl	800a808 <HAL_UART_Transmit_DMA>
				TxState = 4;
 800410a:	4b27      	ldr	r3, [pc, #156]	; (80041a8 <responseUART+0x5a0>)
 800410c:	2204      	movs	r2, #4
 800410e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004110:	e00c      	b.n	800412c <responseUART+0x524>
		case 4:
			if(ACKFlag){
 8004112:	4b2b      	ldr	r3, [pc, #172]	; (80041c0 <responseUART+0x5b8>)
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <responseUART+0x528>
				ACKFlag = 0;
 800411a:	4b29      	ldr	r3, [pc, #164]	; (80041c0 <responseUART+0x5b8>)
 800411c:	2200      	movs	r2, #0
 800411e:	701a      	strb	r2, [r3, #0]
				TxState = 0;
 8004120:	4b21      	ldr	r3, [pc, #132]	; (80041a8 <responseUART+0x5a0>)
 8004122:	2200      	movs	r2, #0
 8004124:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004126:	e003      	b.n	8004130 <responseUART+0x528>
			break;
 8004128:	bf00      	nop
 800412a:	e108      	b.n	800433e <responseUART+0x736>
			break;
 800412c:	bf00      	nop
 800412e:	e106      	b.n	800433e <responseUART+0x736>
			break;
 8004130:	bf00      	nop
		}
		break;
 8004132:	e104      	b.n	800433e <responseUART+0x736>

	case 11:	// <<<< 95% COMPLETE >>>>
		// transmit top omega (rad variable)
		switch(TxState){
 8004134:	4b1c      	ldr	r3, [pc, #112]	; (80041a8 <responseUART+0x5a0>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b04      	cmp	r3, #4
 800413a:	f200 8102 	bhi.w	8004342 <responseUART+0x73a>
 800413e:	a201      	add	r2, pc, #4	; (adr r2, 8004144 <responseUART+0x53c>)
 8004140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004144:	08004285 	.word	0x08004285
 8004148:	08004159 	.word	0x08004159
 800414c:	0800416b 	.word	0x0800416b
 8004150:	08004251 	.word	0x08004251
 8004154:	0800426f 	.word	0x0800426f
		case 0:
			break;
		case 1:
			HAL_UART_Transmit_DMA(&huart2, ACK1, 2);
 8004158:	2202      	movs	r2, #2
 800415a:	4911      	ldr	r1, [pc, #68]	; (80041a0 <responseUART+0x598>)
 800415c:	4811      	ldr	r0, [pc, #68]	; (80041a4 <responseUART+0x59c>)
 800415e:	f006 fb53 	bl	800a808 <HAL_UART_Transmit_DMA>
			TxState = 2;
 8004162:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <responseUART+0x5a0>)
 8004164:	2202      	movs	r2, #2
 8004166:	701a      	strb	r2, [r3, #0]
			break;
 8004168:	e091      	b.n	800428e <responseUART+0x686>
		case 2:
			Transmit[0] = 0b10011011;								// Store byte to Transmit.
 800416a:	4b12      	ldr	r3, [pc, #72]	; (80041b4 <responseUART+0x5ac>)
 800416c:	229b      	movs	r2, #155	; 0x9b
 800416e:	701a      	strb	r2, [r3, #0]
			Transmit[1] = 0;
 8004170:	4b10      	ldr	r3, [pc, #64]	; (80041b4 <responseUART+0x5ac>)
 8004172:	2200      	movs	r2, #0
 8004174:	705a      	strb	r2, [r3, #1]
			if(direct == 0){
 8004176:	4b16      	ldr	r3, [pc, #88]	; (80041d0 <responseUART+0x5c8>)
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d12e      	bne.n	80041dc <responseUART+0x5d4>
				send_velocity = -kal_velocity;
 800417e:	4b15      	ldr	r3, [pc, #84]	; (80041d4 <responseUART+0x5cc>)
 8004180:	edd3 7a00 	vldr	s15, [r3]
 8004184:	eef1 7a67 	vneg.f32	s15, s15
 8004188:	4b13      	ldr	r3, [pc, #76]	; (80041d8 <responseUART+0x5d0>)
 800418a:	edc3 7a00 	vstr	s15, [r3]
 800418e:	e029      	b.n	80041e4 <responseUART+0x5dc>
 8004190:	2000053a 	.word	0x2000053a
 8004194:	20000550 	.word	0x20000550
 8004198:	200004d4 	.word	0x200004d4
 800419c:	20000538 	.word	0x20000538
 80041a0:	20000018 	.word	0x20000018
 80041a4:	200003c0 	.word	0x200003c0
 80041a8:	20000545 	.word	0x20000545
 80041ac:	200005f4 	.word	0x200005f4
 80041b0:	2000053c 	.word	0x2000053c
 80041b4:	2000054c 	.word	0x2000054c
 80041b8:	20000539 	.word	0x20000539
 80041bc:	20000546 	.word	0x20000546
 80041c0:	20000563 	.word	0x20000563
 80041c4:	20000590 	.word	0x20000590
 80041c8:	461c4000 	.word	0x461c4000
 80041cc:	20000568 	.word	0x20000568
 80041d0:	2000002c 	.word	0x2000002c
 80041d4:	200005c0 	.word	0x200005c0
 80041d8:	2000056c 	.word	0x2000056c
			}
			else{
				send_velocity = kal_velocity;
 80041dc:	4b60      	ldr	r3, [pc, #384]	; (8004360 <responseUART+0x758>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a60      	ldr	r2, [pc, #384]	; (8004364 <responseUART+0x75c>)
 80041e2:	6013      	str	r3, [r2, #0]
			}
			Transmit[2] = (send_velocity*255*9.5493)/(10);
 80041e4:	4b5f      	ldr	r3, [pc, #380]	; (8004364 <responseUART+0x75c>)
 80041e6:	edd3 7a00 	vldr	s15, [r3]
 80041ea:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8004368 <responseUART+0x760>
 80041ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041f2:	ee17 0a90 	vmov	r0, s15
 80041f6:	f7fc f953 	bl	80004a0 <__aeabi_f2d>
 80041fa:	a357      	add	r3, pc, #348	; (adr r3, 8004358 <responseUART+0x750>)
 80041fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004200:	f7fc f9a6 	bl	8000550 <__aeabi_dmul>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4610      	mov	r0, r2
 800420a:	4619      	mov	r1, r3
 800420c:	f04f 0200 	mov.w	r2, #0
 8004210:	4b56      	ldr	r3, [pc, #344]	; (800436c <responseUART+0x764>)
 8004212:	f7fc fac7 	bl	80007a4 <__aeabi_ddiv>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4610      	mov	r0, r2
 800421c:	4619      	mov	r1, r3
 800421e:	f7fc fc47 	bl	8000ab0 <__aeabi_d2uiz>
 8004222:	4603      	mov	r3, r0
 8004224:	b2da      	uxtb	r2, r3
 8004226:	4b52      	ldr	r3, [pc, #328]	; (8004370 <responseUART+0x768>)
 8004228:	709a      	strb	r2, [r3, #2]
			// Transmit[2] = ((topOmega*255)/(10))
			Transmit[3] = checkSum(frameSum(Transmit, 3));			// Let the last byte equal to checksum of 1st-3rd byte.
 800422a:	2103      	movs	r1, #3
 800422c:	4850      	ldr	r0, [pc, #320]	; (8004370 <responseUART+0x768>)
 800422e:	f000 f962 	bl	80044f6 <frameSum>
 8004232:	4603      	mov	r3, r0
 8004234:	4618      	mov	r0, r3
 8004236:	f000 f94b 	bl	80044d0 <checkSum>
 800423a:	4603      	mov	r3, r0
 800423c:	461a      	mov	r2, r3
 800423e:	4b4c      	ldr	r3, [pc, #304]	; (8004370 <responseUART+0x768>)
 8004240:	70da      	strb	r2, [r3, #3]
			RxState = 3;
 8004242:	4b4c      	ldr	r3, [pc, #304]	; (8004374 <responseUART+0x76c>)
 8004244:	2203      	movs	r2, #3
 8004246:	701a      	strb	r2, [r3, #0]
			TxState = 3;
 8004248:	4b4b      	ldr	r3, [pc, #300]	; (8004378 <responseUART+0x770>)
 800424a:	2203      	movs	r2, #3
 800424c:	701a      	strb	r2, [r3, #0]
			break;
 800424e:	e01e      	b.n	800428e <responseUART+0x686>
		case 3:
			if(huart2.gState == HAL_UART_STATE_READY){
 8004250:	4b4a      	ldr	r3, [pc, #296]	; (800437c <responseUART+0x774>)
 8004252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b20      	cmp	r3, #32
 800425a:	d115      	bne.n	8004288 <responseUART+0x680>
				HAL_UART_Transmit_DMA(&huart2, Transmit, 4);		// Transmit command back.
 800425c:	2204      	movs	r2, #4
 800425e:	4944      	ldr	r1, [pc, #272]	; (8004370 <responseUART+0x768>)
 8004260:	4846      	ldr	r0, [pc, #280]	; (800437c <responseUART+0x774>)
 8004262:	f006 fad1 	bl	800a808 <HAL_UART_Transmit_DMA>
				TxState = 4;
 8004266:	4b44      	ldr	r3, [pc, #272]	; (8004378 <responseUART+0x770>)
 8004268:	2204      	movs	r2, #4
 800426a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800426c:	e00c      	b.n	8004288 <responseUART+0x680>
		case 4:
			if(ACKFlag){
 800426e:	4b44      	ldr	r3, [pc, #272]	; (8004380 <responseUART+0x778>)
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <responseUART+0x684>
				ACKFlag = 0;
 8004276:	4b42      	ldr	r3, [pc, #264]	; (8004380 <responseUART+0x778>)
 8004278:	2200      	movs	r2, #0
 800427a:	701a      	strb	r2, [r3, #0]
				TxState = 0;
 800427c:	4b3e      	ldr	r3, [pc, #248]	; (8004378 <responseUART+0x770>)
 800427e:	2200      	movs	r2, #0
 8004280:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004282:	e003      	b.n	800428c <responseUART+0x684>
			break;
 8004284:	bf00      	nop
 8004286:	e05c      	b.n	8004342 <responseUART+0x73a>
			break;
 8004288:	bf00      	nop
 800428a:	e05a      	b.n	8004342 <responseUART+0x73a>
			break;
 800428c:	bf00      	nop
		}
		break;
 800428e:	e058      	b.n	8004342 <responseUART+0x73a>

	case 12:
		// Enable end-effector
		switch(TxState){
 8004290:	4b39      	ldr	r3, [pc, #228]	; (8004378 <responseUART+0x770>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <responseUART+0x696>
 8004298:	2b01      	cmp	r3, #1
 800429a:	d004      	beq.n	80042a6 <responseUART+0x69e>
			NFenable = 1;
			HAL_UART_Transmit_DMA(&huart2, ACK1, 2);
			TxState = 0;
			break;
		}
		break;
 800429c:	e056      	b.n	800434c <responseUART+0x744>
			if(huart2.gState == HAL_UART_STATE_READY){
 800429e:	4b37      	ldr	r3, [pc, #220]	; (800437c <responseUART+0x774>)
 80042a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
			break;
 80042a4:	e00b      	b.n	80042be <responseUART+0x6b6>
			NFenable = 1;
 80042a6:	4b37      	ldr	r3, [pc, #220]	; (8004384 <responseUART+0x77c>)
 80042a8:	2201      	movs	r2, #1
 80042aa:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, ACK1, 2);
 80042ac:	2202      	movs	r2, #2
 80042ae:	4936      	ldr	r1, [pc, #216]	; (8004388 <responseUART+0x780>)
 80042b0:	4832      	ldr	r0, [pc, #200]	; (800437c <responseUART+0x774>)
 80042b2:	f006 faa9 	bl	800a808 <HAL_UART_Transmit_DMA>
			TxState = 0;
 80042b6:	4b30      	ldr	r3, [pc, #192]	; (8004378 <responseUART+0x770>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	701a      	strb	r2, [r3, #0]
			break;
 80042bc:	bf00      	nop
		break;
 80042be:	e045      	b.n	800434c <responseUART+0x744>

	case 13:
		// Disable end-effector
		switch(TxState){
 80042c0:	4b2d      	ldr	r3, [pc, #180]	; (8004378 <responseUART+0x770>)
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00d      	beq.n	80042e4 <responseUART+0x6dc>
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d13c      	bne.n	8004346 <responseUART+0x73e>
		case 0:
			break;
		case 1:
			NFenable = 0;
 80042cc:	4b2d      	ldr	r3, [pc, #180]	; (8004384 <responseUART+0x77c>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart2, ACK1, 2);
 80042d2:	2202      	movs	r2, #2
 80042d4:	492c      	ldr	r1, [pc, #176]	; (8004388 <responseUART+0x780>)
 80042d6:	4829      	ldr	r0, [pc, #164]	; (800437c <responseUART+0x774>)
 80042d8:	f006 fa96 	bl	800a808 <HAL_UART_Transmit_DMA>
			TxState = 0;
 80042dc:	4b26      	ldr	r3, [pc, #152]	; (8004378 <responseUART+0x770>)
 80042de:	2200      	movs	r2, #0
 80042e0:	701a      	strb	r2, [r3, #0]
			break;
 80042e2:	e000      	b.n	80042e6 <responseUART+0x6de>
			break;
 80042e4:	bf00      	nop
		}
		break;
 80042e6:	e02e      	b.n	8004346 <responseUART+0x73e>

	case 14:	// <<<< 95% COMPLETE >>>>
		// Set home
		switch(TxState){
 80042e8:	4b23      	ldr	r3, [pc, #140]	; (8004378 <responseUART+0x770>)
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d010      	beq.n	8004312 <responseUART+0x70a>
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d12a      	bne.n	800434a <responseUART+0x742>
		case 0:
			break;
		case 1:
			HAL_UART_Transmit_DMA(&huart2, ACK1, 2);
 80042f4:	2202      	movs	r2, #2
 80042f6:	4924      	ldr	r1, [pc, #144]	; (8004388 <responseUART+0x780>)
 80042f8:	4820      	ldr	r0, [pc, #128]	; (800437c <responseUART+0x774>)
 80042fa:	f006 fa85 	bl	800a808 <HAL_UART_Transmit_DMA>
			setzero = 1;
 80042fe:	4b23      	ldr	r3, [pc, #140]	; (800438c <responseUART+0x784>)
 8004300:	2201      	movs	r2, #1
 8004302:	701a      	strb	r2, [r3, #0]
			movingFlag = 14;
 8004304:	4b22      	ldr	r3, [pc, #136]	; (8004390 <responseUART+0x788>)
 8004306:	220e      	movs	r2, #14
 8004308:	701a      	strb	r2, [r3, #0]
			TxState = 0;
 800430a:	4b1b      	ldr	r3, [pc, #108]	; (8004378 <responseUART+0x770>)
 800430c:	2200      	movs	r2, #0
 800430e:	701a      	strb	r2, [r3, #0]
			//timeStamp = HAL_GetTick();								// Optional
			break;
 8004310:	e000      	b.n	8004314 <responseUART+0x70c>
			break;
 8004312:	bf00      	nop
		}
		break;
 8004314:	e019      	b.n	800434a <responseUART+0x742>
		break;
 8004316:	bf00      	nop
 8004318:	e018      	b.n	800434c <responseUART+0x744>
		break;
 800431a:	bf00      	nop
 800431c:	e016      	b.n	800434c <responseUART+0x744>
		break;
 800431e:	bf00      	nop
 8004320:	e014      	b.n	800434c <responseUART+0x744>
		break;
 8004322:	bf00      	nop
 8004324:	e012      	b.n	800434c <responseUART+0x744>
		break;
 8004326:	bf00      	nop
 8004328:	e010      	b.n	800434c <responseUART+0x744>
		break;
 800432a:	bf00      	nop
 800432c:	e00e      	b.n	800434c <responseUART+0x744>
		break;
 800432e:	bf00      	nop
 8004330:	e00c      	b.n	800434c <responseUART+0x744>
		break;
 8004332:	bf00      	nop
 8004334:	e00a      	b.n	800434c <responseUART+0x744>
		break;
 8004336:	bf00      	nop
 8004338:	e008      	b.n	800434c <responseUART+0x744>
		break;
 800433a:	bf00      	nop
 800433c:	e006      	b.n	800434c <responseUART+0x744>
		break;
 800433e:	bf00      	nop
 8004340:	e004      	b.n	800434c <responseUART+0x744>
		break;
 8004342:	bf00      	nop
 8004344:	e002      	b.n	800434c <responseUART+0x744>
		break;
 8004346:	bf00      	nop
 8004348:	e000      	b.n	800434c <responseUART+0x744>
		break;
 800434a:	bf00      	nop
	}
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	bd90      	pop	{r4, r7, pc}
 8004354:	f3af 8000 	nop.w
 8004358:	d97f62b7 	.word	0xd97f62b7
 800435c:	4023193d 	.word	0x4023193d
 8004360:	200005c0 	.word	0x200005c0
 8004364:	2000056c 	.word	0x2000056c
 8004368:	437f0000 	.word	0x437f0000
 800436c:	40240000 	.word	0x40240000
 8004370:	2000054c 	.word	0x2000054c
 8004374:	20000546 	.word	0x20000546
 8004378:	20000545 	.word	0x20000545
 800437c:	200003c0 	.word	0x200003c0
 8004380:	20000563 	.word	0x20000563
 8004384:	20000021 	.word	0x20000021
 8004388:	20000018 	.word	0x20000018
 800438c:	200005ac 	.word	0x200005ac
 8004390:	2000053c 	.word	0x2000053c

08004394 <tranStation>:

uint16_t tranStation(uint8_t num){
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	71fb      	strb	r3, [r7, #7]
	switch(num){
 800439e:	79fb      	ldrb	r3, [r7, #7]
 80043a0:	3b01      	subs	r3, #1
 80043a2:	2b09      	cmp	r3, #9
 80043a4:	d82b      	bhi.n	80043fe <tranStation+0x6a>
 80043a6:	a201      	add	r2, pc, #4	; (adr r2, 80043ac <tranStation+0x18>)
 80043a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ac:	080043d5 	.word	0x080043d5
 80043b0:	080043d9 	.word	0x080043d9
 80043b4:	080043dd 	.word	0x080043dd
 80043b8:	080043e3 	.word	0x080043e3
 80043bc:	080043e7 	.word	0x080043e7
 80043c0:	080043eb 	.word	0x080043eb
 80043c4:	080043ef 	.word	0x080043ef
 80043c8:	080043f3 	.word	0x080043f3
 80043cc:	080043f7 	.word	0x080043f7
 80043d0:	080043fb 	.word	0x080043fb
	case 1:
		return 90;
 80043d4:	235a      	movs	r3, #90	; 0x5a
 80043d6:	e012      	b.n	80043fe <tranStation+0x6a>
		break;
	case 2:
		return 180;
 80043d8:	23b4      	movs	r3, #180	; 0xb4
 80043da:	e010      	b.n	80043fe <tranStation+0x6a>
		break;
	case 3:
		return 330;
 80043dc:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 80043e0:	e00d      	b.n	80043fe <tranStation+0x6a>
		break;
	case 4:
		return 0;
 80043e2:	2300      	movs	r3, #0
 80043e4:	e00b      	b.n	80043fe <tranStation+0x6a>
		break;
	case 5:
		return 180;
 80043e6:	23b4      	movs	r3, #180	; 0xb4
 80043e8:	e009      	b.n	80043fe <tranStation+0x6a>
		break;
	case 6:
		return 0;
 80043ea:	2300      	movs	r3, #0
 80043ec:	e007      	b.n	80043fe <tranStation+0x6a>
		break;
	case 7:
		return 180;
 80043ee:	23b4      	movs	r3, #180	; 0xb4
 80043f0:	e005      	b.n	80043fe <tranStation+0x6a>
		break;
	case 8:
		return 5;
 80043f2:	2305      	movs	r3, #5
 80043f4:	e003      	b.n	80043fe <tranStation+0x6a>
		break;
	case 9:
		return 30;
 80043f6:	231e      	movs	r3, #30
 80043f8:	e001      	b.n	80043fe <tranStation+0x6a>
		break;
	case 10:
		return 60;
 80043fa:	233c      	movs	r3, #60	; 0x3c
 80043fc:	e7ff      	b.n	80043fe <tranStation+0x6a>
		break;
	}
}
 80043fe:	4618      	mov	r0, r3
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop

0800440c <destinationACK>:

void destinationACK(){
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
	if(movingFlag != 0 && Reached ){
 8004410:	4b0d      	ldr	r3, [pc, #52]	; (8004448 <destinationACK+0x3c>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d015      	beq.n	8004444 <destinationACK+0x38>
 8004418:	4b0c      	ldr	r3, [pc, #48]	; (800444c <destinationACK+0x40>)
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d011      	beq.n	8004444 <destinationACK+0x38>
		//((HAL_GetTick()-timeStamp > 10000) || Reached)
	    switch(movingFlag){
 8004420:	4b09      	ldr	r3, [pc, #36]	; (8004448 <destinationACK+0x3c>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b08      	cmp	r3, #8
 8004426:	d001      	beq.n	800442c <destinationACK+0x20>
 8004428:	2b0e      	cmp	r3, #14
	    case 8:
		  HAL_UART_Transmit_DMA(&huart2, ACK2, 2);
		  break;
	    case 14:
//	    	HAL_UART_Transmit_DMA(&huart2, ACK1, 2);
		  break;
 800442a:	e005      	b.n	8004438 <destinationACK+0x2c>
		  HAL_UART_Transmit_DMA(&huart2, ACK2, 2);
 800442c:	2202      	movs	r2, #2
 800442e:	4908      	ldr	r1, [pc, #32]	; (8004450 <destinationACK+0x44>)
 8004430:	4808      	ldr	r0, [pc, #32]	; (8004454 <destinationACK+0x48>)
 8004432:	f006 f9e9 	bl	800a808 <HAL_UART_Transmit_DMA>
		  break;
 8004436:	bf00      	nop
	    }
	    movingFlag = 0;
 8004438:	4b03      	ldr	r3, [pc, #12]	; (8004448 <destinationACK+0x3c>)
 800443a:	2200      	movs	r2, #0
 800443c:	701a      	strb	r2, [r3, #0]
	    Reached = 0;
 800443e:	4b03      	ldr	r3, [pc, #12]	; (800444c <destinationACK+0x40>)
 8004440:	2200      	movs	r2, #0
 8004442:	701a      	strb	r2, [r3, #0]
  }
}
 8004444:	bf00      	nop
 8004446:	bd80      	pop	{r7, pc}
 8004448:	2000053c 	.word	0x2000053c
 800444c:	2000053b 	.word	0x2000053b
 8004450:	2000001c 	.word	0x2000001c
 8004454:	200003c0 	.word	0x200003c0

08004458 <frameConfig>:

uint8_t frameConfig(uint8_t mode){
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	4603      	mov	r3, r0
 8004460:	71fb      	strb	r3, [r7, #7]
	if(mode == 2 || mode == 3 || mode == 8 || mode == 9 || mode == 10 || mode == 11 || mode == 12 || mode == 13 || mode == 14){
 8004462:	79fb      	ldrb	r3, [r7, #7]
 8004464:	2b02      	cmp	r3, #2
 8004466:	d017      	beq.n	8004498 <frameConfig+0x40>
 8004468:	79fb      	ldrb	r3, [r7, #7]
 800446a:	2b03      	cmp	r3, #3
 800446c:	d014      	beq.n	8004498 <frameConfig+0x40>
 800446e:	79fb      	ldrb	r3, [r7, #7]
 8004470:	2b08      	cmp	r3, #8
 8004472:	d011      	beq.n	8004498 <frameConfig+0x40>
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	2b09      	cmp	r3, #9
 8004478:	d00e      	beq.n	8004498 <frameConfig+0x40>
 800447a:	79fb      	ldrb	r3, [r7, #7]
 800447c:	2b0a      	cmp	r3, #10
 800447e:	d00b      	beq.n	8004498 <frameConfig+0x40>
 8004480:	79fb      	ldrb	r3, [r7, #7]
 8004482:	2b0b      	cmp	r3, #11
 8004484:	d008      	beq.n	8004498 <frameConfig+0x40>
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	2b0c      	cmp	r3, #12
 800448a:	d005      	beq.n	8004498 <frameConfig+0x40>
 800448c:	79fb      	ldrb	r3, [r7, #7]
 800448e:	2b0d      	cmp	r3, #13
 8004490:	d002      	beq.n	8004498 <frameConfig+0x40>
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	2b0e      	cmp	r3, #14
 8004496:	d101      	bne.n	800449c <frameConfig+0x44>
		return 1;
 8004498:	2301      	movs	r3, #1
 800449a:	e013      	b.n	80044c4 <frameConfig+0x6c>
	}
	else if(mode == 1 || mode == 4 || mode == 5 ||  mode == 6){
 800449c:	79fb      	ldrb	r3, [r7, #7]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d008      	beq.n	80044b4 <frameConfig+0x5c>
 80044a2:	79fb      	ldrb	r3, [r7, #7]
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	d005      	beq.n	80044b4 <frameConfig+0x5c>
 80044a8:	79fb      	ldrb	r3, [r7, #7]
 80044aa:	2b05      	cmp	r3, #5
 80044ac:	d002      	beq.n	80044b4 <frameConfig+0x5c>
 80044ae:	79fb      	ldrb	r3, [r7, #7]
 80044b0:	2b06      	cmp	r3, #6
 80044b2:	d101      	bne.n	80044b8 <frameConfig+0x60>
		return 3;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e005      	b.n	80044c4 <frameConfig+0x6c>
	}
	else if(mode == 7){
 80044b8:	79fb      	ldrb	r3, [r7, #7]
 80044ba:	2b07      	cmp	r3, #7
 80044bc:	d101      	bne.n	80044c2 <frameConfig+0x6a>
		return 1;									// Keep the number of byte first. (nStation)
 80044be:	2301      	movs	r3, #1
 80044c0:	e000      	b.n	80044c4 <frameConfig+0x6c>
	}
	return 0;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <checkSum>:

uint8_t checkSum(uint8_t var){
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	4603      	mov	r3, r0
 80044d8:	71fb      	strb	r3, [r7, #7]
	//cSum = (~(var%256))%256;						// Spectrator variable
	return (~(var%256))%256;
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	43db      	mvns	r3, r3
 80044de:	425a      	negs	r2, r3
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	bf58      	it	pl
 80044e6:	4253      	negpl	r3, r2
 80044e8:	b2db      	uxtb	r3, r3
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <frameSum>:

uint8_t frameSum(uint8_t *frame, uint8_t num){
 80044f6:	b480      	push	{r7}
 80044f8:	b085      	sub	sp, #20
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	460b      	mov	r3, r1
 8004500:	70fb      	strb	r3, [r7, #3]
	uint8_t var = 0;
 8004502:	2300      	movs	r3, #0
 8004504:	73fb      	strb	r3, [r7, #15]
	for( int i=0; i<num; i+=1){
 8004506:	2300      	movs	r3, #0
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	e009      	b.n	8004520 <frameSum+0x2a>
		var += frame[i];							// Sum all the bits in buffer.
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	4413      	add	r3, r2
 8004512:	781a      	ldrb	r2, [r3, #0]
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	4413      	add	r3, r2
 8004518:	73fb      	strb	r3, [r7, #15]
	for( int i=0; i<num; i+=1){
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	3301      	adds	r3, #1
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	78fb      	ldrb	r3, [r7, #3]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	429a      	cmp	r2, r3
 8004526:	dbf1      	blt.n	800450c <frameSum+0x16>
	}
	return var;
 8004528:	7bfb      	ldrb	r3, [r7, #15]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
	...

08004538 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
	//RxComplete = 1;
	callUART();
 8004540:	f7ff fa14 	bl	800396c <callUART>
	HAL_UART_Receive_DMA(&huart2, Receive, nbyte);
 8004544:	4b05      	ldr	r3, [pc, #20]	; (800455c <HAL_UART_RxCpltCallback+0x24>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	b29b      	uxth	r3, r3
 800454a:	461a      	mov	r2, r3
 800454c:	4904      	ldr	r1, [pc, #16]	; (8004560 <HAL_UART_RxCpltCallback+0x28>)
 800454e:	4805      	ldr	r0, [pc, #20]	; (8004564 <HAL_UART_RxCpltCallback+0x2c>)
 8004550:	f006 f9d8 	bl	800a904 <HAL_UART_Receive_DMA>
}
 8004554:	bf00      	nop
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	2000001e 	.word	0x2000001e
 8004560:	20000550 	.word	0x20000550
 8004564:	200003c0 	.word	0x200003c0

08004568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800456c:	b672      	cpsid	i
}
 800456e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004570:	e7fe      	b.n	8004570 <Error_Handler+0x8>
	...

08004574 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800457a:	2300      	movs	r3, #0
 800457c:	607b      	str	r3, [r7, #4]
 800457e:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <HAL_MspInit+0x4c>)
 8004580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004582:	4a0f      	ldr	r2, [pc, #60]	; (80045c0 <HAL_MspInit+0x4c>)
 8004584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004588:	6453      	str	r3, [r2, #68]	; 0x44
 800458a:	4b0d      	ldr	r3, [pc, #52]	; (80045c0 <HAL_MspInit+0x4c>)
 800458c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004592:	607b      	str	r3, [r7, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004596:	2300      	movs	r3, #0
 8004598:	603b      	str	r3, [r7, #0]
 800459a:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <HAL_MspInit+0x4c>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	4a08      	ldr	r2, [pc, #32]	; (80045c0 <HAL_MspInit+0x4c>)
 80045a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a4:	6413      	str	r3, [r2, #64]	; 0x40
 80045a6:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <HAL_MspInit+0x4c>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ae:	603b      	str	r3, [r7, #0]
 80045b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80045b2:	2007      	movs	r0, #7
 80045b4:	f000 fc84 	bl	8004ec0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045b8:	bf00      	nop
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40023800 	.word	0x40023800

080045c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08a      	sub	sp, #40	; 0x28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045cc:	f107 0314 	add.w	r3, r7, #20
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	605a      	str	r2, [r3, #4]
 80045d6:	609a      	str	r2, [r3, #8]
 80045d8:	60da      	str	r2, [r3, #12]
 80045da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a21      	ldr	r2, [pc, #132]	; (8004668 <HAL_I2C_MspInit+0xa4>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d13c      	bne.n	8004660 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045e6:	2300      	movs	r3, #0
 80045e8:	613b      	str	r3, [r7, #16]
 80045ea:	4b20      	ldr	r3, [pc, #128]	; (800466c <HAL_I2C_MspInit+0xa8>)
 80045ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ee:	4a1f      	ldr	r2, [pc, #124]	; (800466c <HAL_I2C_MspInit+0xa8>)
 80045f0:	f043 0302 	orr.w	r3, r3, #2
 80045f4:	6313      	str	r3, [r2, #48]	; 0x30
 80045f6:	4b1d      	ldr	r3, [pc, #116]	; (800466c <HAL_I2C_MspInit+0xa8>)
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	613b      	str	r3, [r7, #16]
 8004600:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004602:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004608:	2312      	movs	r3, #18
 800460a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800460c:	2300      	movs	r3, #0
 800460e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004610:	2303      	movs	r3, #3
 8004612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004614:	2304      	movs	r3, #4
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004618:	f107 0314 	add.w	r3, r7, #20
 800461c:	4619      	mov	r1, r3
 800461e:	4814      	ldr	r0, [pc, #80]	; (8004670 <HAL_I2C_MspInit+0xac>)
 8004620:	f001 f8a0 	bl	8005764 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004624:	2300      	movs	r3, #0
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	4b10      	ldr	r3, [pc, #64]	; (800466c <HAL_I2C_MspInit+0xa8>)
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	4a0f      	ldr	r2, [pc, #60]	; (800466c <HAL_I2C_MspInit+0xa8>)
 800462e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004632:	6413      	str	r3, [r2, #64]	; 0x40
 8004634:	4b0d      	ldr	r3, [pc, #52]	; (800466c <HAL_I2C_MspInit+0xa8>)
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004640:	2200      	movs	r2, #0
 8004642:	2100      	movs	r1, #0
 8004644:	201f      	movs	r0, #31
 8004646:	f000 fc46 	bl	8004ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800464a:	201f      	movs	r0, #31
 800464c:	f000 fc5f 	bl	8004f0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004650:	2200      	movs	r2, #0
 8004652:	2100      	movs	r1, #0
 8004654:	2020      	movs	r0, #32
 8004656:	f000 fc3e 	bl	8004ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800465a:	2020      	movs	r0, #32
 800465c:	f000 fc57 	bl	8004f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004660:	bf00      	nop
 8004662:	3728      	adds	r7, #40	; 0x28
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40005400 	.word	0x40005400
 800466c:	40023800 	.word	0x40023800
 8004670:	40020400 	.word	0x40020400

08004674 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08a      	sub	sp, #40	; 0x28
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800467c:	f107 0314 	add.w	r3, r7, #20
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	605a      	str	r2, [r3, #4]
 8004686:	609a      	str	r2, [r3, #8]
 8004688:	60da      	str	r2, [r3, #12]
 800468a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a4b      	ldr	r2, [pc, #300]	; (80047c0 <HAL_SPI_MspInit+0x14c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	f040 8090 	bne.w	80047b8 <HAL_SPI_MspInit+0x144>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004698:	2300      	movs	r3, #0
 800469a:	613b      	str	r3, [r7, #16]
 800469c:	4b49      	ldr	r3, [pc, #292]	; (80047c4 <HAL_SPI_MspInit+0x150>)
 800469e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a0:	4a48      	ldr	r2, [pc, #288]	; (80047c4 <HAL_SPI_MspInit+0x150>)
 80046a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a6:	6413      	str	r3, [r2, #64]	; 0x40
 80046a8:	4b46      	ldr	r3, [pc, #280]	; (80047c4 <HAL_SPI_MspInit+0x150>)
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046b0:	613b      	str	r3, [r7, #16]
 80046b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046b4:	2300      	movs	r3, #0
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	4b42      	ldr	r3, [pc, #264]	; (80047c4 <HAL_SPI_MspInit+0x150>)
 80046ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046bc:	4a41      	ldr	r2, [pc, #260]	; (80047c4 <HAL_SPI_MspInit+0x150>)
 80046be:	f043 0302 	orr.w	r3, r3, #2
 80046c2:	6313      	str	r3, [r2, #48]	; 0x30
 80046c4:	4b3f      	ldr	r3, [pc, #252]	; (80047c4 <HAL_SPI_MspInit+0x150>)
 80046c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80046d0:	2338      	movs	r3, #56	; 0x38
 80046d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d4:	2302      	movs	r3, #2
 80046d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d8:	2300      	movs	r3, #0
 80046da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046dc:	2303      	movs	r3, #3
 80046de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80046e0:	2306      	movs	r3, #6
 80046e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046e4:	f107 0314 	add.w	r3, r7, #20
 80046e8:	4619      	mov	r1, r3
 80046ea:	4837      	ldr	r0, [pc, #220]	; (80047c8 <HAL_SPI_MspInit+0x154>)
 80046ec:	f001 f83a 	bl	8005764 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Stream0;
 80046f0:	4b36      	ldr	r3, [pc, #216]	; (80047cc <HAL_SPI_MspInit+0x158>)
 80046f2:	4a37      	ldr	r2, [pc, #220]	; (80047d0 <HAL_SPI_MspInit+0x15c>)
 80046f4:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 80046f6:	4b35      	ldr	r3, [pc, #212]	; (80047cc <HAL_SPI_MspInit+0x158>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046fc:	4b33      	ldr	r3, [pc, #204]	; (80047cc <HAL_SPI_MspInit+0x158>)
 80046fe:	2200      	movs	r2, #0
 8004700:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004702:	4b32      	ldr	r3, [pc, #200]	; (80047cc <HAL_SPI_MspInit+0x158>)
 8004704:	2200      	movs	r2, #0
 8004706:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004708:	4b30      	ldr	r3, [pc, #192]	; (80047cc <HAL_SPI_MspInit+0x158>)
 800470a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800470e:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004710:	4b2e      	ldr	r3, [pc, #184]	; (80047cc <HAL_SPI_MspInit+0x158>)
 8004712:	2200      	movs	r2, #0
 8004714:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004716:	4b2d      	ldr	r3, [pc, #180]	; (80047cc <HAL_SPI_MspInit+0x158>)
 8004718:	2200      	movs	r2, #0
 800471a:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 800471c:	4b2b      	ldr	r3, [pc, #172]	; (80047cc <HAL_SPI_MspInit+0x158>)
 800471e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004722:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004724:	4b29      	ldr	r3, [pc, #164]	; (80047cc <HAL_SPI_MspInit+0x158>)
 8004726:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800472a:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800472c:	4b27      	ldr	r3, [pc, #156]	; (80047cc <HAL_SPI_MspInit+0x158>)
 800472e:	2200      	movs	r2, #0
 8004730:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8004732:	4826      	ldr	r0, [pc, #152]	; (80047cc <HAL_SPI_MspInit+0x158>)
 8004734:	f000 fc06 	bl	8004f44 <HAL_DMA_Init>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 800473e:	f7ff ff13 	bl	8004568 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a21      	ldr	r2, [pc, #132]	; (80047cc <HAL_SPI_MspInit+0x158>)
 8004746:	64da      	str	r2, [r3, #76]	; 0x4c
 8004748:	4a20      	ldr	r2, [pc, #128]	; (80047cc <HAL_SPI_MspInit+0x158>)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 800474e:	4b21      	ldr	r3, [pc, #132]	; (80047d4 <HAL_SPI_MspInit+0x160>)
 8004750:	4a21      	ldr	r2, [pc, #132]	; (80047d8 <HAL_SPI_MspInit+0x164>)
 8004752:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8004754:	4b1f      	ldr	r3, [pc, #124]	; (80047d4 <HAL_SPI_MspInit+0x160>)
 8004756:	2200      	movs	r2, #0
 8004758:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800475a:	4b1e      	ldr	r3, [pc, #120]	; (80047d4 <HAL_SPI_MspInit+0x160>)
 800475c:	2240      	movs	r2, #64	; 0x40
 800475e:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004760:	4b1c      	ldr	r3, [pc, #112]	; (80047d4 <HAL_SPI_MspInit+0x160>)
 8004762:	2200      	movs	r2, #0
 8004764:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004766:	4b1b      	ldr	r3, [pc, #108]	; (80047d4 <HAL_SPI_MspInit+0x160>)
 8004768:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800476c:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800476e:	4b19      	ldr	r3, [pc, #100]	; (80047d4 <HAL_SPI_MspInit+0x160>)
 8004770:	2200      	movs	r2, #0
 8004772:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004774:	4b17      	ldr	r3, [pc, #92]	; (80047d4 <HAL_SPI_MspInit+0x160>)
 8004776:	2200      	movs	r2, #0
 8004778:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800477a:	4b16      	ldr	r3, [pc, #88]	; (80047d4 <HAL_SPI_MspInit+0x160>)
 800477c:	2200      	movs	r2, #0
 800477e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004780:	4b14      	ldr	r3, [pc, #80]	; (80047d4 <HAL_SPI_MspInit+0x160>)
 8004782:	2200      	movs	r2, #0
 8004784:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004786:	4b13      	ldr	r3, [pc, #76]	; (80047d4 <HAL_SPI_MspInit+0x160>)
 8004788:	2200      	movs	r2, #0
 800478a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800478c:	4811      	ldr	r0, [pc, #68]	; (80047d4 <HAL_SPI_MspInit+0x160>)
 800478e:	f000 fbd9 	bl	8004f44 <HAL_DMA_Init>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8004798:	f7ff fee6 	bl	8004568 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a0d      	ldr	r2, [pc, #52]	; (80047d4 <HAL_SPI_MspInit+0x160>)
 80047a0:	649a      	str	r2, [r3, #72]	; 0x48
 80047a2:	4a0c      	ldr	r2, [pc, #48]	; (80047d4 <HAL_SPI_MspInit+0x160>)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80047a8:	2200      	movs	r2, #0
 80047aa:	2100      	movs	r1, #0
 80047ac:	2033      	movs	r0, #51	; 0x33
 80047ae:	f000 fb92 	bl	8004ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80047b2:	2033      	movs	r0, #51	; 0x33
 80047b4:	f000 fbab 	bl	8004f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80047b8:	bf00      	nop
 80047ba:	3728      	adds	r7, #40	; 0x28
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40003c00 	.word	0x40003c00
 80047c4:	40023800 	.word	0x40023800
 80047c8:	40020400 	.word	0x40020400
 80047cc:	20000270 	.word	0x20000270
 80047d0:	40026010 	.word	0x40026010
 80047d4:	200002d0 	.word	0x200002d0
 80047d8:	400260b8 	.word	0x400260b8

080047dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ec:	d116      	bne.n	800481c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80047ee:	2300      	movs	r3, #0
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	4b1a      	ldr	r3, [pc, #104]	; (800485c <HAL_TIM_Base_MspInit+0x80>)
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	4a19      	ldr	r2, [pc, #100]	; (800485c <HAL_TIM_Base_MspInit+0x80>)
 80047f8:	f043 0301 	orr.w	r3, r3, #1
 80047fc:	6413      	str	r3, [r2, #64]	; 0x40
 80047fe:	4b17      	ldr	r3, [pc, #92]	; (800485c <HAL_TIM_Base_MspInit+0x80>)
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	60fb      	str	r3, [r7, #12]
 8004808:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800480a:	2200      	movs	r2, #0
 800480c:	2100      	movs	r1, #0
 800480e:	201c      	movs	r0, #28
 8004810:	f000 fb61 	bl	8004ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004814:	201c      	movs	r0, #28
 8004816:	f000 fb7a 	bl	8004f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800481a:	e01a      	b.n	8004852 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a0f      	ldr	r2, [pc, #60]	; (8004860 <HAL_TIM_Base_MspInit+0x84>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d115      	bne.n	8004852 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004826:	2300      	movs	r3, #0
 8004828:	60bb      	str	r3, [r7, #8]
 800482a:	4b0c      	ldr	r3, [pc, #48]	; (800485c <HAL_TIM_Base_MspInit+0x80>)
 800482c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482e:	4a0b      	ldr	r2, [pc, #44]	; (800485c <HAL_TIM_Base_MspInit+0x80>)
 8004830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004834:	6453      	str	r3, [r2, #68]	; 0x44
 8004836:	4b09      	ldr	r3, [pc, #36]	; (800485c <HAL_TIM_Base_MspInit+0x80>)
 8004838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004842:	2200      	movs	r2, #0
 8004844:	2100      	movs	r1, #0
 8004846:	201a      	movs	r0, #26
 8004848:	f000 fb45 	bl	8004ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800484c:	201a      	movs	r0, #26
 800484e:	f000 fb5e 	bl	8004f0e <HAL_NVIC_EnableIRQ>
}
 8004852:	bf00      	nop
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40023800 	.word	0x40023800
 8004860:	40014800 	.word	0x40014800

08004864 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b088      	sub	sp, #32
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800486c:	f107 030c 	add.w	r3, r7, #12
 8004870:	2200      	movs	r2, #0
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	605a      	str	r2, [r3, #4]
 8004876:	609a      	str	r2, [r3, #8]
 8004878:	60da      	str	r2, [r3, #12]
 800487a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004884:	d11d      	bne.n	80048c2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004886:	2300      	movs	r3, #0
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	4b10      	ldr	r3, [pc, #64]	; (80048cc <HAL_TIM_MspPostInit+0x68>)
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	4a0f      	ldr	r2, [pc, #60]	; (80048cc <HAL_TIM_MspPostInit+0x68>)
 8004890:	f043 0301 	orr.w	r3, r3, #1
 8004894:	6313      	str	r3, [r2, #48]	; 0x30
 8004896:	4b0d      	ldr	r3, [pc, #52]	; (80048cc <HAL_TIM_MspPostInit+0x68>)
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	60bb      	str	r3, [r7, #8]
 80048a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80048a2:	2302      	movs	r3, #2
 80048a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a6:	2302      	movs	r3, #2
 80048a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048aa:	2300      	movs	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048ae:	2300      	movs	r3, #0
 80048b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80048b2:	2301      	movs	r3, #1
 80048b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048b6:	f107 030c 	add.w	r3, r7, #12
 80048ba:	4619      	mov	r1, r3
 80048bc:	4804      	ldr	r0, [pc, #16]	; (80048d0 <HAL_TIM_MspPostInit+0x6c>)
 80048be:	f000 ff51 	bl	8005764 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80048c2:	bf00      	nop
 80048c4:	3720      	adds	r7, #32
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40023800 	.word	0x40023800
 80048d0:	40020000 	.word	0x40020000

080048d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b08a      	sub	sp, #40	; 0x28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048dc:	f107 0314 	add.w	r3, r7, #20
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	605a      	str	r2, [r3, #4]
 80048e6:	609a      	str	r2, [r3, #8]
 80048e8:	60da      	str	r2, [r3, #12]
 80048ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a4c      	ldr	r2, [pc, #304]	; (8004a24 <HAL_UART_MspInit+0x150>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	f040 8092 	bne.w	8004a1c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80048f8:	2300      	movs	r3, #0
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	4b4a      	ldr	r3, [pc, #296]	; (8004a28 <HAL_UART_MspInit+0x154>)
 80048fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004900:	4a49      	ldr	r2, [pc, #292]	; (8004a28 <HAL_UART_MspInit+0x154>)
 8004902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004906:	6413      	str	r3, [r2, #64]	; 0x40
 8004908:	4b47      	ldr	r3, [pc, #284]	; (8004a28 <HAL_UART_MspInit+0x154>)
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	4b43      	ldr	r3, [pc, #268]	; (8004a28 <HAL_UART_MspInit+0x154>)
 800491a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491c:	4a42      	ldr	r2, [pc, #264]	; (8004a28 <HAL_UART_MspInit+0x154>)
 800491e:	f043 0301 	orr.w	r3, r3, #1
 8004922:	6313      	str	r3, [r2, #48]	; 0x30
 8004924:	4b40      	ldr	r3, [pc, #256]	; (8004a28 <HAL_UART_MspInit+0x154>)
 8004926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004930:	230c      	movs	r3, #12
 8004932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004934:	2302      	movs	r3, #2
 8004936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004938:	2300      	movs	r3, #0
 800493a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800493c:	2303      	movs	r3, #3
 800493e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004940:	2307      	movs	r3, #7
 8004942:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004944:	f107 0314 	add.w	r3, r7, #20
 8004948:	4619      	mov	r1, r3
 800494a:	4838      	ldr	r0, [pc, #224]	; (8004a2c <HAL_UART_MspInit+0x158>)
 800494c:	f000 ff0a 	bl	8005764 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004950:	4b37      	ldr	r3, [pc, #220]	; (8004a30 <HAL_UART_MspInit+0x15c>)
 8004952:	4a38      	ldr	r2, [pc, #224]	; (8004a34 <HAL_UART_MspInit+0x160>)
 8004954:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004956:	4b36      	ldr	r3, [pc, #216]	; (8004a30 <HAL_UART_MspInit+0x15c>)
 8004958:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800495c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800495e:	4b34      	ldr	r3, [pc, #208]	; (8004a30 <HAL_UART_MspInit+0x15c>)
 8004960:	2240      	movs	r2, #64	; 0x40
 8004962:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004964:	4b32      	ldr	r3, [pc, #200]	; (8004a30 <HAL_UART_MspInit+0x15c>)
 8004966:	2200      	movs	r2, #0
 8004968:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800496a:	4b31      	ldr	r3, [pc, #196]	; (8004a30 <HAL_UART_MspInit+0x15c>)
 800496c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004970:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004972:	4b2f      	ldr	r3, [pc, #188]	; (8004a30 <HAL_UART_MspInit+0x15c>)
 8004974:	2200      	movs	r2, #0
 8004976:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004978:	4b2d      	ldr	r3, [pc, #180]	; (8004a30 <HAL_UART_MspInit+0x15c>)
 800497a:	2200      	movs	r2, #0
 800497c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800497e:	4b2c      	ldr	r3, [pc, #176]	; (8004a30 <HAL_UART_MspInit+0x15c>)
 8004980:	2200      	movs	r2, #0
 8004982:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004984:	4b2a      	ldr	r3, [pc, #168]	; (8004a30 <HAL_UART_MspInit+0x15c>)
 8004986:	2200      	movs	r2, #0
 8004988:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800498a:	4b29      	ldr	r3, [pc, #164]	; (8004a30 <HAL_UART_MspInit+0x15c>)
 800498c:	2200      	movs	r2, #0
 800498e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004990:	4827      	ldr	r0, [pc, #156]	; (8004a30 <HAL_UART_MspInit+0x15c>)
 8004992:	f000 fad7 	bl	8004f44 <HAL_DMA_Init>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800499c:	f7ff fde4 	bl	8004568 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a23      	ldr	r2, [pc, #140]	; (8004a30 <HAL_UART_MspInit+0x15c>)
 80049a4:	635a      	str	r2, [r3, #52]	; 0x34
 80049a6:	4a22      	ldr	r2, [pc, #136]	; (8004a30 <HAL_UART_MspInit+0x15c>)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80049ac:	4b22      	ldr	r3, [pc, #136]	; (8004a38 <HAL_UART_MspInit+0x164>)
 80049ae:	4a23      	ldr	r2, [pc, #140]	; (8004a3c <HAL_UART_MspInit+0x168>)
 80049b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80049b2:	4b21      	ldr	r3, [pc, #132]	; (8004a38 <HAL_UART_MspInit+0x164>)
 80049b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80049b8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049ba:	4b1f      	ldr	r3, [pc, #124]	; (8004a38 <HAL_UART_MspInit+0x164>)
 80049bc:	2200      	movs	r2, #0
 80049be:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049c0:	4b1d      	ldr	r3, [pc, #116]	; (8004a38 <HAL_UART_MspInit+0x164>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80049c6:	4b1c      	ldr	r3, [pc, #112]	; (8004a38 <HAL_UART_MspInit+0x164>)
 80049c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049cc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049ce:	4b1a      	ldr	r3, [pc, #104]	; (8004a38 <HAL_UART_MspInit+0x164>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049d4:	4b18      	ldr	r3, [pc, #96]	; (8004a38 <HAL_UART_MspInit+0x164>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80049da:	4b17      	ldr	r3, [pc, #92]	; (8004a38 <HAL_UART_MspInit+0x164>)
 80049dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049e0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80049e2:	4b15      	ldr	r3, [pc, #84]	; (8004a38 <HAL_UART_MspInit+0x164>)
 80049e4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80049e8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049ea:	4b13      	ldr	r3, [pc, #76]	; (8004a38 <HAL_UART_MspInit+0x164>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80049f0:	4811      	ldr	r0, [pc, #68]	; (8004a38 <HAL_UART_MspInit+0x164>)
 80049f2:	f000 faa7 	bl	8004f44 <HAL_DMA_Init>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80049fc:	f7ff fdb4 	bl	8004568 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a0d      	ldr	r2, [pc, #52]	; (8004a38 <HAL_UART_MspInit+0x164>)
 8004a04:	639a      	str	r2, [r3, #56]	; 0x38
 8004a06:	4a0c      	ldr	r2, [pc, #48]	; (8004a38 <HAL_UART_MspInit+0x164>)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	2100      	movs	r1, #0
 8004a10:	2026      	movs	r0, #38	; 0x26
 8004a12:	f000 fa60 	bl	8004ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004a16:	2026      	movs	r0, #38	; 0x26
 8004a18:	f000 fa79 	bl	8004f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004a1c:	bf00      	nop
 8004a1e:	3728      	adds	r7, #40	; 0x28
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40004400 	.word	0x40004400
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	40020000 	.word	0x40020000
 8004a30:	20000404 	.word	0x20000404
 8004a34:	400260a0 	.word	0x400260a0
 8004a38:	20000464 	.word	0x20000464
 8004a3c:	40026088 	.word	0x40026088

08004a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a44:	e7fe      	b.n	8004a44 <NMI_Handler+0x4>

08004a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a46:	b480      	push	{r7}
 8004a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a4a:	e7fe      	b.n	8004a4a <HardFault_Handler+0x4>

08004a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a50:	e7fe      	b.n	8004a50 <MemManage_Handler+0x4>

08004a52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a52:	b480      	push	{r7}
 8004a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a56:	e7fe      	b.n	8004a56 <BusFault_Handler+0x4>

08004a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a5c:	e7fe      	b.n	8004a5c <UsageFault_Handler+0x4>

08004a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a62:	bf00      	nop
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a70:	bf00      	nop
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a7e:	bf00      	nop
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a8c:	f000 f904 	bl	8004c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a90:	bf00      	nop
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8004a98:	4802      	ldr	r0, [pc, #8]	; (8004aa4 <DMA1_Stream0_IRQHandler+0x10>)
 8004a9a:	f000 fbeb 	bl	8005274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004a9e:	bf00      	nop
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000270 	.word	0x20000270

08004aa8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004aac:	4802      	ldr	r0, [pc, #8]	; (8004ab8 <DMA1_Stream5_IRQHandler+0x10>)
 8004aae:	f000 fbe1 	bl	8005274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004ab2:	bf00      	nop
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20000464 	.word	0x20000464

08004abc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004ac0:	4802      	ldr	r0, [pc, #8]	; (8004acc <DMA1_Stream6_IRQHandler+0x10>)
 8004ac2:	f000 fbd7 	bl	8005274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004ac6:	bf00      	nop
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	20000404 	.word	0x20000404

08004ad0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004ad4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004ad8:	f000 fffa 	bl	8005ad0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004adc:	bf00      	nop
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8004ae4:	4802      	ldr	r0, [pc, #8]	; (8004af0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8004ae6:	f005 f839 	bl	8009b5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004aea:	bf00      	nop
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	20000378 	.word	0x20000378

08004af4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004af8:	4802      	ldr	r0, [pc, #8]	; (8004b04 <TIM2_IRQHandler+0x10>)
 8004afa:	f005 f82f 	bl	8009b5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004afe:	bf00      	nop
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	20000330 	.word	0x20000330

08004b08 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004b0c:	4802      	ldr	r0, [pc, #8]	; (8004b18 <I2C1_EV_IRQHandler+0x10>)
 8004b0e:	f001 fc5f 	bl	80063d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004b12:	bf00      	nop
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	200001c4 	.word	0x200001c4

08004b1c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004b20:	4802      	ldr	r0, [pc, #8]	; (8004b2c <I2C1_ER_IRQHandler+0x10>)
 8004b22:	f001 fdc6 	bl	80066b2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004b26:	bf00      	nop
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	200001c4 	.word	0x200001c4

08004b30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004b34:	4802      	ldr	r0, [pc, #8]	; (8004b40 <USART2_IRQHandler+0x10>)
 8004b36:	f005 ff95 	bl	800aa64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004b3a:	bf00      	nop
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	200003c0 	.word	0x200003c0

08004b44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004b48:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004b4c:	f000 ffc0 	bl	8005ad0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004b50:	bf00      	nop
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8004b58:	4802      	ldr	r0, [pc, #8]	; (8004b64 <DMA1_Stream7_IRQHandler+0x10>)
 8004b5a:	f000 fb8b 	bl	8005274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004b5e:	bf00      	nop
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	200002d0 	.word	0x200002d0

08004b68 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8004b6c:	4802      	ldr	r0, [pc, #8]	; (8004b78 <SPI3_IRQHandler+0x10>)
 8004b6e:	f004 fa9b 	bl	80090a8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8004b72:	bf00      	nop
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20000218 	.word	0x20000218

08004b7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b80:	4b06      	ldr	r3, [pc, #24]	; (8004b9c <SystemInit+0x20>)
 8004b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b86:	4a05      	ldr	r2, [pc, #20]	; (8004b9c <SystemInit+0x20>)
 8004b88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b90:	bf00      	nop
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	e000ed00 	.word	0xe000ed00

08004ba0 <Reset_Handler>:
 8004ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004bd8 <LoopFillZerobss+0x12>
 8004ba4:	480d      	ldr	r0, [pc, #52]	; (8004bdc <LoopFillZerobss+0x16>)
 8004ba6:	490e      	ldr	r1, [pc, #56]	; (8004be0 <LoopFillZerobss+0x1a>)
 8004ba8:	4a0e      	ldr	r2, [pc, #56]	; (8004be4 <LoopFillZerobss+0x1e>)
 8004baa:	2300      	movs	r3, #0
 8004bac:	e002      	b.n	8004bb4 <LoopCopyDataInit>

08004bae <CopyDataInit>:
 8004bae:	58d4      	ldr	r4, [r2, r3]
 8004bb0:	50c4      	str	r4, [r0, r3]
 8004bb2:	3304      	adds	r3, #4

08004bb4 <LoopCopyDataInit>:
 8004bb4:	18c4      	adds	r4, r0, r3
 8004bb6:	428c      	cmp	r4, r1
 8004bb8:	d3f9      	bcc.n	8004bae <CopyDataInit>
 8004bba:	4a0b      	ldr	r2, [pc, #44]	; (8004be8 <LoopFillZerobss+0x22>)
 8004bbc:	4c0b      	ldr	r4, [pc, #44]	; (8004bec <LoopFillZerobss+0x26>)
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	e001      	b.n	8004bc6 <LoopFillZerobss>

08004bc2 <FillZerobss>:
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	3204      	adds	r2, #4

08004bc6 <LoopFillZerobss>:
 8004bc6:	42a2      	cmp	r2, r4
 8004bc8:	d3fb      	bcc.n	8004bc2 <FillZerobss>
 8004bca:	f7ff ffd7 	bl	8004b7c <SystemInit>
 8004bce:	f007 f839 	bl	800bc44 <__libc_init_array>
 8004bd2:	f7fc f961 	bl	8000e98 <main>
 8004bd6:	4770      	bx	lr
 8004bd8:	20020000 	.word	0x20020000
 8004bdc:	20000000 	.word	0x20000000
 8004be0:	200001a4 	.word	0x200001a4
 8004be4:	0800bea0 	.word	0x0800bea0
 8004be8:	200001a8 	.word	0x200001a8
 8004bec:	20000828 	.word	0x20000828

08004bf0 <ADC_IRQHandler>:
 8004bf0:	e7fe      	b.n	8004bf0 <ADC_IRQHandler>
	...

08004bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004bf8:	4b0e      	ldr	r3, [pc, #56]	; (8004c34 <HAL_Init+0x40>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a0d      	ldr	r2, [pc, #52]	; (8004c34 <HAL_Init+0x40>)
 8004bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c04:	4b0b      	ldr	r3, [pc, #44]	; (8004c34 <HAL_Init+0x40>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a0a      	ldr	r2, [pc, #40]	; (8004c34 <HAL_Init+0x40>)
 8004c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c10:	4b08      	ldr	r3, [pc, #32]	; (8004c34 <HAL_Init+0x40>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a07      	ldr	r2, [pc, #28]	; (8004c34 <HAL_Init+0x40>)
 8004c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c1c:	2003      	movs	r0, #3
 8004c1e:	f000 f94f 	bl	8004ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c22:	2000      	movs	r0, #0
 8004c24:	f000 f808 	bl	8004c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c28:	f7ff fca4 	bl	8004574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40023c00 	.word	0x40023c00

08004c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c40:	4b12      	ldr	r3, [pc, #72]	; (8004c8c <HAL_InitTick+0x54>)
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	4b12      	ldr	r3, [pc, #72]	; (8004c90 <HAL_InitTick+0x58>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	4619      	mov	r1, r3
 8004c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 f967 	bl	8004f2a <HAL_SYSTICK_Config>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e00e      	b.n	8004c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b0f      	cmp	r3, #15
 8004c6a:	d80a      	bhi.n	8004c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	6879      	ldr	r1, [r7, #4]
 8004c70:	f04f 30ff 	mov.w	r0, #4294967295
 8004c74:	f000 f92f 	bl	8004ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c78:	4a06      	ldr	r2, [pc, #24]	; (8004c94 <HAL_InitTick+0x5c>)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	e000      	b.n	8004c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	20000134 	.word	0x20000134
 8004c90:	2000013c 	.word	0x2000013c
 8004c94:	20000138 	.word	0x20000138

08004c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c9c:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <HAL_IncTick+0x20>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <HAL_IncTick+0x24>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	4a04      	ldr	r2, [pc, #16]	; (8004cbc <HAL_IncTick+0x24>)
 8004caa:	6013      	str	r3, [r2, #0]
}
 8004cac:	bf00      	nop
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	2000013c 	.word	0x2000013c
 8004cbc:	20000824 	.word	0x20000824

08004cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8004cc4:	4b03      	ldr	r3, [pc, #12]	; (8004cd4 <HAL_GetTick+0x14>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	20000824 	.word	0x20000824

08004cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ce0:	f7ff ffee 	bl	8004cc0 <HAL_GetTick>
 8004ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf0:	d005      	beq.n	8004cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004cf2:	4b0a      	ldr	r3, [pc, #40]	; (8004d1c <HAL_Delay+0x44>)
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004cfe:	bf00      	nop
 8004d00:	f7ff ffde 	bl	8004cc0 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d8f7      	bhi.n	8004d00 <HAL_Delay+0x28>
  {
  }
}
 8004d10:	bf00      	nop
 8004d12:	bf00      	nop
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	2000013c 	.word	0x2000013c

08004d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f003 0307 	and.w	r3, r3, #7
 8004d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d30:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <__NVIC_SetPriorityGrouping+0x44>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d52:	4a04      	ldr	r2, [pc, #16]	; (8004d64 <__NVIC_SetPriorityGrouping+0x44>)
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	60d3      	str	r3, [r2, #12]
}
 8004d58:	bf00      	nop
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr
 8004d64:	e000ed00 	.word	0xe000ed00

08004d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d6c:	4b04      	ldr	r3, [pc, #16]	; (8004d80 <__NVIC_GetPriorityGrouping+0x18>)
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	0a1b      	lsrs	r3, r3, #8
 8004d72:	f003 0307 	and.w	r3, r3, #7
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	e000ed00 	.word	0xe000ed00

08004d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	db0b      	blt.n	8004dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d96:	79fb      	ldrb	r3, [r7, #7]
 8004d98:	f003 021f 	and.w	r2, r3, #31
 8004d9c:	4907      	ldr	r1, [pc, #28]	; (8004dbc <__NVIC_EnableIRQ+0x38>)
 8004d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	2001      	movs	r0, #1
 8004da6:	fa00 f202 	lsl.w	r2, r0, r2
 8004daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	e000e100 	.word	0xe000e100

08004dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	6039      	str	r1, [r7, #0]
 8004dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	db0a      	blt.n	8004dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	b2da      	uxtb	r2, r3
 8004dd8:	490c      	ldr	r1, [pc, #48]	; (8004e0c <__NVIC_SetPriority+0x4c>)
 8004dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dde:	0112      	lsls	r2, r2, #4
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	440b      	add	r3, r1
 8004de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004de8:	e00a      	b.n	8004e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	4908      	ldr	r1, [pc, #32]	; (8004e10 <__NVIC_SetPriority+0x50>)
 8004df0:	79fb      	ldrb	r3, [r7, #7]
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	3b04      	subs	r3, #4
 8004df8:	0112      	lsls	r2, r2, #4
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	440b      	add	r3, r1
 8004dfe:	761a      	strb	r2, [r3, #24]
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	e000e100 	.word	0xe000e100
 8004e10:	e000ed00 	.word	0xe000ed00

08004e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b089      	sub	sp, #36	; 0x24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f003 0307 	and.w	r3, r3, #7
 8004e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	f1c3 0307 	rsb	r3, r3, #7
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	bf28      	it	cs
 8004e32:	2304      	movcs	r3, #4
 8004e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	3304      	adds	r3, #4
 8004e3a:	2b06      	cmp	r3, #6
 8004e3c:	d902      	bls.n	8004e44 <NVIC_EncodePriority+0x30>
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	3b03      	subs	r3, #3
 8004e42:	e000      	b.n	8004e46 <NVIC_EncodePriority+0x32>
 8004e44:	2300      	movs	r3, #0
 8004e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e48:	f04f 32ff 	mov.w	r2, #4294967295
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	43da      	mvns	r2, r3
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	401a      	ands	r2, r3
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	fa01 f303 	lsl.w	r3, r1, r3
 8004e66:	43d9      	mvns	r1, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e6c:	4313      	orrs	r3, r2
         );
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3724      	adds	r7, #36	; 0x24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
	...

08004e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e8c:	d301      	bcc.n	8004e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e00f      	b.n	8004eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e92:	4a0a      	ldr	r2, [pc, #40]	; (8004ebc <SysTick_Config+0x40>)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e9a:	210f      	movs	r1, #15
 8004e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea0:	f7ff ff8e 	bl	8004dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ea4:	4b05      	ldr	r3, [pc, #20]	; (8004ebc <SysTick_Config+0x40>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004eaa:	4b04      	ldr	r3, [pc, #16]	; (8004ebc <SysTick_Config+0x40>)
 8004eac:	2207      	movs	r2, #7
 8004eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	e000e010 	.word	0xe000e010

08004ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7ff ff29 	bl	8004d20 <__NVIC_SetPriorityGrouping>
}
 8004ece:	bf00      	nop
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b086      	sub	sp, #24
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	4603      	mov	r3, r0
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	607a      	str	r2, [r7, #4]
 8004ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ee8:	f7ff ff3e 	bl	8004d68 <__NVIC_GetPriorityGrouping>
 8004eec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	68b9      	ldr	r1, [r7, #8]
 8004ef2:	6978      	ldr	r0, [r7, #20]
 8004ef4:	f7ff ff8e 	bl	8004e14 <NVIC_EncodePriority>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004efe:	4611      	mov	r1, r2
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7ff ff5d 	bl	8004dc0 <__NVIC_SetPriority>
}
 8004f06:	bf00      	nop
 8004f08:	3718      	adds	r7, #24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b082      	sub	sp, #8
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	4603      	mov	r3, r0
 8004f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7ff ff31 	bl	8004d84 <__NVIC_EnableIRQ>
}
 8004f22:	bf00      	nop
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b082      	sub	sp, #8
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7ff ffa2 	bl	8004e7c <SysTick_Config>
 8004f38:	4603      	mov	r3, r0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
	...

08004f44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f50:	f7ff feb6 	bl	8004cc0 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e099      	b.n	8005094 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 0201 	bic.w	r2, r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f80:	e00f      	b.n	8004fa2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f82:	f7ff fe9d 	bl	8004cc0 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b05      	cmp	r3, #5
 8004f8e:	d908      	bls.n	8004fa2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2220      	movs	r2, #32
 8004f94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2203      	movs	r2, #3
 8004f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e078      	b.n	8005094 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1e8      	bne.n	8004f82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	4b38      	ldr	r3, [pc, #224]	; (800509c <HAL_DMA_Init+0x158>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fe6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	2b04      	cmp	r3, #4
 8004ffa:	d107      	bne.n	800500c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005004:	4313      	orrs	r3, r2
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	4313      	orrs	r3, r2
 800500a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f023 0307 	bic.w	r3, r3, #7
 8005022:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	4313      	orrs	r3, r2
 800502c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	2b04      	cmp	r3, #4
 8005034:	d117      	bne.n	8005066 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	4313      	orrs	r3, r2
 800503e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00e      	beq.n	8005066 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 fb0f 	bl	800566c <DMA_CheckFifoParam>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d008      	beq.n	8005066 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2240      	movs	r2, #64	; 0x40
 8005058:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005062:	2301      	movs	r3, #1
 8005064:	e016      	b.n	8005094 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fac6 	bl	8005600 <DMA_CalcBaseAndBitshift>
 8005074:	4603      	mov	r3, r0
 8005076:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800507c:	223f      	movs	r2, #63	; 0x3f
 800507e:	409a      	lsls	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3718      	adds	r7, #24
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	f010803f 	.word	0xf010803f

080050a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
 80050ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050ae:	2300      	movs	r3, #0
 80050b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d101      	bne.n	80050c6 <HAL_DMA_Start_IT+0x26>
 80050c2:	2302      	movs	r3, #2
 80050c4:	e040      	b.n	8005148 <HAL_DMA_Start_IT+0xa8>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d12f      	bne.n	800513a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2202      	movs	r2, #2
 80050de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	68b9      	ldr	r1, [r7, #8]
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 fa58 	bl	80055a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f8:	223f      	movs	r2, #63	; 0x3f
 80050fa:	409a      	lsls	r2, r3
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0216 	orr.w	r2, r2, #22
 800510e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	2b00      	cmp	r3, #0
 8005116:	d007      	beq.n	8005128 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0208 	orr.w	r2, r2, #8
 8005126:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f042 0201 	orr.w	r2, r2, #1
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	e005      	b.n	8005146 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005142:	2302      	movs	r3, #2
 8005144:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005146:	7dfb      	ldrb	r3, [r7, #23]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3718      	adds	r7, #24
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800515e:	f7ff fdaf 	bl	8004cc0 <HAL_GetTick>
 8005162:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d008      	beq.n	8005182 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2280      	movs	r2, #128	; 0x80
 8005174:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e052      	b.n	8005228 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 0216 	bic.w	r2, r2, #22
 8005190:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	695a      	ldr	r2, [r3, #20]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d103      	bne.n	80051b2 <HAL_DMA_Abort+0x62>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d007      	beq.n	80051c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f022 0208 	bic.w	r2, r2, #8
 80051c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 0201 	bic.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051d2:	e013      	b.n	80051fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051d4:	f7ff fd74 	bl	8004cc0 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b05      	cmp	r3, #5
 80051e0:	d90c      	bls.n	80051fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2220      	movs	r2, #32
 80051e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2203      	movs	r2, #3
 80051ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e015      	b.n	8005228 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1e4      	bne.n	80051d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800520e:	223f      	movs	r2, #63	; 0x3f
 8005210:	409a      	lsls	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d004      	beq.n	800524e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2280      	movs	r2, #128	; 0x80
 8005248:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e00c      	b.n	8005268 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2205      	movs	r2, #5
 8005252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0201 	bic.w	r2, r2, #1
 8005264:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005280:	4b8e      	ldr	r3, [pc, #568]	; (80054bc <HAL_DMA_IRQHandler+0x248>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a8e      	ldr	r2, [pc, #568]	; (80054c0 <HAL_DMA_IRQHandler+0x24c>)
 8005286:	fba2 2303 	umull	r2, r3, r2, r3
 800528a:	0a9b      	lsrs	r3, r3, #10
 800528c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005292:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800529e:	2208      	movs	r2, #8
 80052a0:	409a      	lsls	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	4013      	ands	r3, r2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d01a      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d013      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0204 	bic.w	r2, r2, #4
 80052c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052cc:	2208      	movs	r2, #8
 80052ce:	409a      	lsls	r2, r3
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d8:	f043 0201 	orr.w	r2, r3, #1
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e4:	2201      	movs	r2, #1
 80052e6:	409a      	lsls	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4013      	ands	r3, r2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d012      	beq.n	8005316 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00b      	beq.n	8005316 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005302:	2201      	movs	r2, #1
 8005304:	409a      	lsls	r2, r3
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530e:	f043 0202 	orr.w	r2, r3, #2
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800531a:	2204      	movs	r2, #4
 800531c:	409a      	lsls	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	4013      	ands	r3, r2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d012      	beq.n	800534c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00b      	beq.n	800534c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005338:	2204      	movs	r2, #4
 800533a:	409a      	lsls	r2, r3
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005344:	f043 0204 	orr.w	r2, r3, #4
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005350:	2210      	movs	r2, #16
 8005352:	409a      	lsls	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4013      	ands	r3, r2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d043      	beq.n	80053e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b00      	cmp	r3, #0
 8005368:	d03c      	beq.n	80053e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800536e:	2210      	movs	r2, #16
 8005370:	409a      	lsls	r2, r3
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d018      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d108      	bne.n	80053a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005396:	2b00      	cmp	r3, #0
 8005398:	d024      	beq.n	80053e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	4798      	blx	r3
 80053a2:	e01f      	b.n	80053e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d01b      	beq.n	80053e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	4798      	blx	r3
 80053b4:	e016      	b.n	80053e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d107      	bne.n	80053d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0208 	bic.w	r2, r2, #8
 80053d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e8:	2220      	movs	r2, #32
 80053ea:	409a      	lsls	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4013      	ands	r3, r2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 808f 	beq.w	8005514 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0310 	and.w	r3, r3, #16
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 8087 	beq.w	8005514 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800540a:	2220      	movs	r2, #32
 800540c:	409a      	lsls	r2, r3
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b05      	cmp	r3, #5
 800541c:	d136      	bne.n	800548c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0216 	bic.w	r2, r2, #22
 800542c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	695a      	ldr	r2, [r3, #20]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800543c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	2b00      	cmp	r3, #0
 8005444:	d103      	bne.n	800544e <HAL_DMA_IRQHandler+0x1da>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800544a:	2b00      	cmp	r3, #0
 800544c:	d007      	beq.n	800545e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f022 0208 	bic.w	r2, r2, #8
 800545c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005462:	223f      	movs	r2, #63	; 0x3f
 8005464:	409a      	lsls	r2, r3
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800547e:	2b00      	cmp	r3, #0
 8005480:	d07e      	beq.n	8005580 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	4798      	blx	r3
        }
        return;
 800548a:	e079      	b.n	8005580 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d01d      	beq.n	80054d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10d      	bne.n	80054c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d031      	beq.n	8005514 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	4798      	blx	r3
 80054b8:	e02c      	b.n	8005514 <HAL_DMA_IRQHandler+0x2a0>
 80054ba:	bf00      	nop
 80054bc:	20000134 	.word	0x20000134
 80054c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d023      	beq.n	8005514 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	4798      	blx	r3
 80054d4:	e01e      	b.n	8005514 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10f      	bne.n	8005504 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 0210 	bic.w	r2, r2, #16
 80054f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005518:	2b00      	cmp	r3, #0
 800551a:	d032      	beq.n	8005582 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b00      	cmp	r3, #0
 8005526:	d022      	beq.n	800556e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2205      	movs	r2, #5
 800552c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0201 	bic.w	r2, r2, #1
 800553e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	3301      	adds	r3, #1
 8005544:	60bb      	str	r3, [r7, #8]
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	429a      	cmp	r2, r3
 800554a:	d307      	bcc.n	800555c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1f2      	bne.n	8005540 <HAL_DMA_IRQHandler+0x2cc>
 800555a:	e000      	b.n	800555e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800555c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005572:	2b00      	cmp	r3, #0
 8005574:	d005      	beq.n	8005582 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	4798      	blx	r3
 800557e:	e000      	b.n	8005582 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005580:	bf00      	nop
    }
  }
}
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005596:	b2db      	uxtb	r3, r3
}
 8005598:	4618      	mov	r0, r3
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
 80055b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80055c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	2b40      	cmp	r3, #64	; 0x40
 80055d0:	d108      	bne.n	80055e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80055e2:	e007      	b.n	80055f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	60da      	str	r2, [r3, #12]
}
 80055f4:	bf00      	nop
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	3b10      	subs	r3, #16
 8005610:	4a14      	ldr	r2, [pc, #80]	; (8005664 <DMA_CalcBaseAndBitshift+0x64>)
 8005612:	fba2 2303 	umull	r2, r3, r2, r3
 8005616:	091b      	lsrs	r3, r3, #4
 8005618:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800561a:	4a13      	ldr	r2, [pc, #76]	; (8005668 <DMA_CalcBaseAndBitshift+0x68>)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4413      	add	r3, r2
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2b03      	cmp	r3, #3
 800562c:	d909      	bls.n	8005642 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005636:	f023 0303 	bic.w	r3, r3, #3
 800563a:	1d1a      	adds	r2, r3, #4
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	659a      	str	r2, [r3, #88]	; 0x58
 8005640:	e007      	b.n	8005652 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800564a:	f023 0303 	bic.w	r3, r3, #3
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	aaaaaaab 	.word	0xaaaaaaab
 8005668:	0800be88 	.word	0x0800be88

0800566c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005674:	2300      	movs	r3, #0
 8005676:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d11f      	bne.n	80056c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	2b03      	cmp	r3, #3
 800568a:	d856      	bhi.n	800573a <DMA_CheckFifoParam+0xce>
 800568c:	a201      	add	r2, pc, #4	; (adr r2, 8005694 <DMA_CheckFifoParam+0x28>)
 800568e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005692:	bf00      	nop
 8005694:	080056a5 	.word	0x080056a5
 8005698:	080056b7 	.word	0x080056b7
 800569c:	080056a5 	.word	0x080056a5
 80056a0:	0800573b 	.word	0x0800573b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d046      	beq.n	800573e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056b4:	e043      	b.n	800573e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056be:	d140      	bne.n	8005742 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056c4:	e03d      	b.n	8005742 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ce:	d121      	bne.n	8005714 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2b03      	cmp	r3, #3
 80056d4:	d837      	bhi.n	8005746 <DMA_CheckFifoParam+0xda>
 80056d6:	a201      	add	r2, pc, #4	; (adr r2, 80056dc <DMA_CheckFifoParam+0x70>)
 80056d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056dc:	080056ed 	.word	0x080056ed
 80056e0:	080056f3 	.word	0x080056f3
 80056e4:	080056ed 	.word	0x080056ed
 80056e8:	08005705 	.word	0x08005705
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	73fb      	strb	r3, [r7, #15]
      break;
 80056f0:	e030      	b.n	8005754 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d025      	beq.n	800574a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005702:	e022      	b.n	800574a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005708:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800570c:	d11f      	bne.n	800574e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005712:	e01c      	b.n	800574e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2b02      	cmp	r3, #2
 8005718:	d903      	bls.n	8005722 <DMA_CheckFifoParam+0xb6>
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2b03      	cmp	r3, #3
 800571e:	d003      	beq.n	8005728 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005720:	e018      	b.n	8005754 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	73fb      	strb	r3, [r7, #15]
      break;
 8005726:	e015      	b.n	8005754 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00e      	beq.n	8005752 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	73fb      	strb	r3, [r7, #15]
      break;
 8005738:	e00b      	b.n	8005752 <DMA_CheckFifoParam+0xe6>
      break;
 800573a:	bf00      	nop
 800573c:	e00a      	b.n	8005754 <DMA_CheckFifoParam+0xe8>
      break;
 800573e:	bf00      	nop
 8005740:	e008      	b.n	8005754 <DMA_CheckFifoParam+0xe8>
      break;
 8005742:	bf00      	nop
 8005744:	e006      	b.n	8005754 <DMA_CheckFifoParam+0xe8>
      break;
 8005746:	bf00      	nop
 8005748:	e004      	b.n	8005754 <DMA_CheckFifoParam+0xe8>
      break;
 800574a:	bf00      	nop
 800574c:	e002      	b.n	8005754 <DMA_CheckFifoParam+0xe8>
      break;   
 800574e:	bf00      	nop
 8005750:	e000      	b.n	8005754 <DMA_CheckFifoParam+0xe8>
      break;
 8005752:	bf00      	nop
    }
  } 
  
  return status; 
 8005754:	7bfb      	ldrb	r3, [r7, #15]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop

08005764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005764:	b480      	push	{r7}
 8005766:	b089      	sub	sp, #36	; 0x24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800576e:	2300      	movs	r3, #0
 8005770:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005772:	2300      	movs	r3, #0
 8005774:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005776:	2300      	movs	r3, #0
 8005778:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800577a:	2300      	movs	r3, #0
 800577c:	61fb      	str	r3, [r7, #28]
 800577e:	e159      	b.n	8005a34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005780:	2201      	movs	r2, #1
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	4013      	ands	r3, r2
 8005792:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	429a      	cmp	r2, r3
 800579a:	f040 8148 	bne.w	8005a2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f003 0303 	and.w	r3, r3, #3
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d005      	beq.n	80057b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d130      	bne.n	8005818 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	2203      	movs	r2, #3
 80057c2:	fa02 f303 	lsl.w	r3, r2, r3
 80057c6:	43db      	mvns	r3, r3
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	4013      	ands	r3, r2
 80057cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	005b      	lsls	r3, r3, #1
 80057d6:	fa02 f303 	lsl.w	r3, r2, r3
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	4313      	orrs	r3, r2
 80057de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057ec:	2201      	movs	r2, #1
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	fa02 f303 	lsl.w	r3, r2, r3
 80057f4:	43db      	mvns	r3, r3
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	4013      	ands	r3, r2
 80057fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	091b      	lsrs	r3, r3, #4
 8005802:	f003 0201 	and.w	r2, r3, #1
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	4313      	orrs	r3, r2
 8005810:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f003 0303 	and.w	r3, r3, #3
 8005820:	2b03      	cmp	r3, #3
 8005822:	d017      	beq.n	8005854 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	2203      	movs	r2, #3
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	43db      	mvns	r3, r3
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	4013      	ands	r3, r2
 800583a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	4313      	orrs	r3, r2
 800584c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f003 0303 	and.w	r3, r3, #3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d123      	bne.n	80058a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	08da      	lsrs	r2, r3, #3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	3208      	adds	r2, #8
 8005868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800586c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	220f      	movs	r2, #15
 8005878:	fa02 f303 	lsl.w	r3, r2, r3
 800587c:	43db      	mvns	r3, r3
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	4013      	ands	r3, r2
 8005882:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	691a      	ldr	r2, [r3, #16]
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	f003 0307 	and.w	r3, r3, #7
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	fa02 f303 	lsl.w	r3, r2, r3
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	4313      	orrs	r3, r2
 8005898:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	08da      	lsrs	r2, r3, #3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	3208      	adds	r2, #8
 80058a2:	69b9      	ldr	r1, [r7, #24]
 80058a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	2203      	movs	r2, #3
 80058b4:	fa02 f303 	lsl.w	r3, r2, r3
 80058b8:	43db      	mvns	r3, r3
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	4013      	ands	r3, r2
 80058be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f003 0203 	and.w	r2, r3, #3
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	fa02 f303 	lsl.w	r3, r2, r3
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 80a2 	beq.w	8005a2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ea:	2300      	movs	r3, #0
 80058ec:	60fb      	str	r3, [r7, #12]
 80058ee:	4b57      	ldr	r3, [pc, #348]	; (8005a4c <HAL_GPIO_Init+0x2e8>)
 80058f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f2:	4a56      	ldr	r2, [pc, #344]	; (8005a4c <HAL_GPIO_Init+0x2e8>)
 80058f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058f8:	6453      	str	r3, [r2, #68]	; 0x44
 80058fa:	4b54      	ldr	r3, [pc, #336]	; (8005a4c <HAL_GPIO_Init+0x2e8>)
 80058fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005906:	4a52      	ldr	r2, [pc, #328]	; (8005a50 <HAL_GPIO_Init+0x2ec>)
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	089b      	lsrs	r3, r3, #2
 800590c:	3302      	adds	r3, #2
 800590e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	220f      	movs	r2, #15
 800591e:	fa02 f303 	lsl.w	r3, r2, r3
 8005922:	43db      	mvns	r3, r3
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	4013      	ands	r3, r2
 8005928:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a49      	ldr	r2, [pc, #292]	; (8005a54 <HAL_GPIO_Init+0x2f0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d019      	beq.n	8005966 <HAL_GPIO_Init+0x202>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a48      	ldr	r2, [pc, #288]	; (8005a58 <HAL_GPIO_Init+0x2f4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d013      	beq.n	8005962 <HAL_GPIO_Init+0x1fe>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a47      	ldr	r2, [pc, #284]	; (8005a5c <HAL_GPIO_Init+0x2f8>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00d      	beq.n	800595e <HAL_GPIO_Init+0x1fa>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a46      	ldr	r2, [pc, #280]	; (8005a60 <HAL_GPIO_Init+0x2fc>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d007      	beq.n	800595a <HAL_GPIO_Init+0x1f6>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a45      	ldr	r2, [pc, #276]	; (8005a64 <HAL_GPIO_Init+0x300>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d101      	bne.n	8005956 <HAL_GPIO_Init+0x1f2>
 8005952:	2304      	movs	r3, #4
 8005954:	e008      	b.n	8005968 <HAL_GPIO_Init+0x204>
 8005956:	2307      	movs	r3, #7
 8005958:	e006      	b.n	8005968 <HAL_GPIO_Init+0x204>
 800595a:	2303      	movs	r3, #3
 800595c:	e004      	b.n	8005968 <HAL_GPIO_Init+0x204>
 800595e:	2302      	movs	r3, #2
 8005960:	e002      	b.n	8005968 <HAL_GPIO_Init+0x204>
 8005962:	2301      	movs	r3, #1
 8005964:	e000      	b.n	8005968 <HAL_GPIO_Init+0x204>
 8005966:	2300      	movs	r3, #0
 8005968:	69fa      	ldr	r2, [r7, #28]
 800596a:	f002 0203 	and.w	r2, r2, #3
 800596e:	0092      	lsls	r2, r2, #2
 8005970:	4093      	lsls	r3, r2
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	4313      	orrs	r3, r2
 8005976:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005978:	4935      	ldr	r1, [pc, #212]	; (8005a50 <HAL_GPIO_Init+0x2ec>)
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	089b      	lsrs	r3, r3, #2
 800597e:	3302      	adds	r3, #2
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005986:	4b38      	ldr	r3, [pc, #224]	; (8005a68 <HAL_GPIO_Init+0x304>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	43db      	mvns	r3, r3
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	4013      	ands	r3, r2
 8005994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059aa:	4a2f      	ldr	r2, [pc, #188]	; (8005a68 <HAL_GPIO_Init+0x304>)
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059b0:	4b2d      	ldr	r3, [pc, #180]	; (8005a68 <HAL_GPIO_Init+0x304>)
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	43db      	mvns	r3, r3
 80059ba:	69ba      	ldr	r2, [r7, #24]
 80059bc:	4013      	ands	r3, r2
 80059be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d003      	beq.n	80059d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059d4:	4a24      	ldr	r2, [pc, #144]	; (8005a68 <HAL_GPIO_Init+0x304>)
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80059da:	4b23      	ldr	r3, [pc, #140]	; (8005a68 <HAL_GPIO_Init+0x304>)
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	43db      	mvns	r3, r3
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	4013      	ands	r3, r2
 80059e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059fe:	4a1a      	ldr	r2, [pc, #104]	; (8005a68 <HAL_GPIO_Init+0x304>)
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a04:	4b18      	ldr	r3, [pc, #96]	; (8005a68 <HAL_GPIO_Init+0x304>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	43db      	mvns	r3, r3
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	4013      	ands	r3, r2
 8005a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a28:	4a0f      	ldr	r2, [pc, #60]	; (8005a68 <HAL_GPIO_Init+0x304>)
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	3301      	adds	r3, #1
 8005a32:	61fb      	str	r3, [r7, #28]
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	2b0f      	cmp	r3, #15
 8005a38:	f67f aea2 	bls.w	8005780 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a3c:	bf00      	nop
 8005a3e:	bf00      	nop
 8005a40:	3724      	adds	r7, #36	; 0x24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	40023800 	.word	0x40023800
 8005a50:	40013800 	.word	0x40013800
 8005a54:	40020000 	.word	0x40020000
 8005a58:	40020400 	.word	0x40020400
 8005a5c:	40020800 	.word	0x40020800
 8005a60:	40020c00 	.word	0x40020c00
 8005a64:	40021000 	.word	0x40021000
 8005a68:	40013c00 	.word	0x40013c00

08005a6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	460b      	mov	r3, r1
 8005a76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	691a      	ldr	r2, [r3, #16]
 8005a7c:	887b      	ldrh	r3, [r7, #2]
 8005a7e:	4013      	ands	r3, r2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a84:	2301      	movs	r3, #1
 8005a86:	73fb      	strb	r3, [r7, #15]
 8005a88:	e001      	b.n	8005a8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	807b      	strh	r3, [r7, #2]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005aac:	787b      	ldrb	r3, [r7, #1]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ab2:	887a      	ldrh	r2, [r7, #2]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ab8:	e003      	b.n	8005ac2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005aba:	887b      	ldrh	r3, [r7, #2]
 8005abc:	041a      	lsls	r2, r3, #16
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	619a      	str	r2, [r3, #24]
}
 8005ac2:	bf00      	nop
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
	...

08005ad0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005ada:	4b08      	ldr	r3, [pc, #32]	; (8005afc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005adc:	695a      	ldr	r2, [r3, #20]
 8005ade:	88fb      	ldrh	r3, [r7, #6]
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d006      	beq.n	8005af4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ae6:	4a05      	ldr	r2, [pc, #20]	; (8005afc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ae8:	88fb      	ldrh	r3, [r7, #6]
 8005aea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005aec:	88fb      	ldrh	r3, [r7, #6]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fd feb0 	bl	8003854 <HAL_GPIO_EXTI_Callback>
  }
}
 8005af4:	bf00      	nop
 8005af6:	3708      	adds	r7, #8
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	40013c00 	.word	0x40013c00

08005b00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e12b      	b.n	8005d6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d106      	bne.n	8005b2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7fe fd4c 	bl	80045c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2224      	movs	r2, #36	; 0x24
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 0201 	bic.w	r2, r2, #1
 8005b42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b64:	f003 f8ac 	bl	8008cc0 <HAL_RCC_GetPCLK1Freq>
 8005b68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	4a81      	ldr	r2, [pc, #516]	; (8005d74 <HAL_I2C_Init+0x274>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d807      	bhi.n	8005b84 <HAL_I2C_Init+0x84>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4a80      	ldr	r2, [pc, #512]	; (8005d78 <HAL_I2C_Init+0x278>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	bf94      	ite	ls
 8005b7c:	2301      	movls	r3, #1
 8005b7e:	2300      	movhi	r3, #0
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	e006      	b.n	8005b92 <HAL_I2C_Init+0x92>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4a7d      	ldr	r2, [pc, #500]	; (8005d7c <HAL_I2C_Init+0x27c>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	bf94      	ite	ls
 8005b8c:	2301      	movls	r3, #1
 8005b8e:	2300      	movhi	r3, #0
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e0e7      	b.n	8005d6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4a78      	ldr	r2, [pc, #480]	; (8005d80 <HAL_I2C_Init+0x280>)
 8005b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba2:	0c9b      	lsrs	r3, r3, #18
 8005ba4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	4a6a      	ldr	r2, [pc, #424]	; (8005d74 <HAL_I2C_Init+0x274>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d802      	bhi.n	8005bd4 <HAL_I2C_Init+0xd4>
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	e009      	b.n	8005be8 <HAL_I2C_Init+0xe8>
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005bda:	fb02 f303 	mul.w	r3, r2, r3
 8005bde:	4a69      	ldr	r2, [pc, #420]	; (8005d84 <HAL_I2C_Init+0x284>)
 8005be0:	fba2 2303 	umull	r2, r3, r2, r3
 8005be4:	099b      	lsrs	r3, r3, #6
 8005be6:	3301      	adds	r3, #1
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	6812      	ldr	r2, [r2, #0]
 8005bec:	430b      	orrs	r3, r1
 8005bee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005bfa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	495c      	ldr	r1, [pc, #368]	; (8005d74 <HAL_I2C_Init+0x274>)
 8005c04:	428b      	cmp	r3, r1
 8005c06:	d819      	bhi.n	8005c3c <HAL_I2C_Init+0x13c>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	1e59      	subs	r1, r3, #1
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c16:	1c59      	adds	r1, r3, #1
 8005c18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005c1c:	400b      	ands	r3, r1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00a      	beq.n	8005c38 <HAL_I2C_Init+0x138>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	1e59      	subs	r1, r3, #1
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c30:	3301      	adds	r3, #1
 8005c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c36:	e051      	b.n	8005cdc <HAL_I2C_Init+0x1dc>
 8005c38:	2304      	movs	r3, #4
 8005c3a:	e04f      	b.n	8005cdc <HAL_I2C_Init+0x1dc>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d111      	bne.n	8005c68 <HAL_I2C_Init+0x168>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	1e58      	subs	r0, r3, #1
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6859      	ldr	r1, [r3, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	440b      	add	r3, r1
 8005c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c56:	3301      	adds	r3, #1
 8005c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	bf0c      	ite	eq
 8005c60:	2301      	moveq	r3, #1
 8005c62:	2300      	movne	r3, #0
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	e012      	b.n	8005c8e <HAL_I2C_Init+0x18e>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	1e58      	subs	r0, r3, #1
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6859      	ldr	r1, [r3, #4]
 8005c70:	460b      	mov	r3, r1
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	440b      	add	r3, r1
 8005c76:	0099      	lsls	r1, r3, #2
 8005c78:	440b      	add	r3, r1
 8005c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c7e:	3301      	adds	r3, #1
 8005c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	bf0c      	ite	eq
 8005c88:	2301      	moveq	r3, #1
 8005c8a:	2300      	movne	r3, #0
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <HAL_I2C_Init+0x196>
 8005c92:	2301      	movs	r3, #1
 8005c94:	e022      	b.n	8005cdc <HAL_I2C_Init+0x1dc>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10e      	bne.n	8005cbc <HAL_I2C_Init+0x1bc>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	1e58      	subs	r0, r3, #1
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6859      	ldr	r1, [r3, #4]
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	440b      	add	r3, r1
 8005cac:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cba:	e00f      	b.n	8005cdc <HAL_I2C_Init+0x1dc>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	1e58      	subs	r0, r3, #1
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6859      	ldr	r1, [r3, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	440b      	add	r3, r1
 8005cca:	0099      	lsls	r1, r3, #2
 8005ccc:	440b      	add	r3, r1
 8005cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	6809      	ldr	r1, [r1, #0]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	69da      	ldr	r2, [r3, #28]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005d0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6911      	ldr	r1, [r2, #16]
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	68d2      	ldr	r2, [r2, #12]
 8005d16:	4311      	orrs	r1, r2
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6812      	ldr	r2, [r2, #0]
 8005d1c:	430b      	orrs	r3, r1
 8005d1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	695a      	ldr	r2, [r3, #20]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	431a      	orrs	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0201 	orr.w	r2, r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2220      	movs	r2, #32
 8005d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	000186a0 	.word	0x000186a0
 8005d78:	001e847f 	.word	0x001e847f
 8005d7c:	003d08ff 	.word	0x003d08ff
 8005d80:	431bde83 	.word	0x431bde83
 8005d84:	10624dd3 	.word	0x10624dd3

08005d88 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b088      	sub	sp, #32
 8005d8c:	af02      	add	r7, sp, #8
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	607a      	str	r2, [r7, #4]
 8005d92:	461a      	mov	r2, r3
 8005d94:	460b      	mov	r3, r1
 8005d96:	817b      	strh	r3, [r7, #10]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d9c:	f7fe ff90 	bl	8004cc0 <HAL_GetTick>
 8005da0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b20      	cmp	r3, #32
 8005dac:	f040 80e0 	bne.w	8005f70 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	2319      	movs	r3, #25
 8005db6:	2201      	movs	r2, #1
 8005db8:	4970      	ldr	r1, [pc, #448]	; (8005f7c <HAL_I2C_Master_Transmit+0x1f4>)
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f002 f8e6 	bl	8007f8c <I2C_WaitOnFlagUntilTimeout>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	e0d3      	b.n	8005f72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d101      	bne.n	8005dd8 <HAL_I2C_Master_Transmit+0x50>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	e0cc      	b.n	8005f72 <HAL_I2C_Master_Transmit+0x1ea>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d007      	beq.n	8005dfe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f042 0201 	orr.w	r2, r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2221      	movs	r2, #33	; 0x21
 8005e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2210      	movs	r2, #16
 8005e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	893a      	ldrh	r2, [r7, #8]
 8005e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4a50      	ldr	r2, [pc, #320]	; (8005f80 <HAL_I2C_Master_Transmit+0x1f8>)
 8005e3e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005e40:	8979      	ldrh	r1, [r7, #10]
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	6a3a      	ldr	r2, [r7, #32]
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f001 fea8 	bl	8007b9c <I2C_MasterRequestWrite>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e08d      	b.n	8005f72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e56:	2300      	movs	r3, #0
 8005e58:	613b      	str	r3, [r7, #16]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	613b      	str	r3, [r7, #16]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	613b      	str	r3, [r7, #16]
 8005e6a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005e6c:	e066      	b.n	8005f3c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	6a39      	ldr	r1, [r7, #32]
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f002 f960 	bl	8008138 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00d      	beq.n	8005e9a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	d107      	bne.n	8005e96 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e06b      	b.n	8005f72 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	781a      	ldrb	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	f003 0304 	and.w	r3, r3, #4
 8005ed4:	2b04      	cmp	r3, #4
 8005ed6:	d11b      	bne.n	8005f10 <HAL_I2C_Master_Transmit+0x188>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d017      	beq.n	8005f10 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	781a      	ldrb	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	1c5a      	adds	r2, r3, #1
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	3b01      	subs	r3, #1
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	6a39      	ldr	r1, [r7, #32]
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f002 f950 	bl	80081ba <I2C_WaitOnBTFFlagUntilTimeout>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00d      	beq.n	8005f3c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d107      	bne.n	8005f38 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f36:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e01a      	b.n	8005f72 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d194      	bne.n	8005e6e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2220      	movs	r2, #32
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	e000      	b.n	8005f72 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005f70:	2302      	movs	r3, #2
  }
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3718      	adds	r7, #24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	00100002 	.word	0x00100002
 8005f80:	ffff0000 	.word	0xffff0000

08005f84 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08c      	sub	sp, #48	; 0x30
 8005f88:	af02      	add	r7, sp, #8
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	607a      	str	r2, [r7, #4]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	460b      	mov	r3, r1
 8005f92:	817b      	strh	r3, [r7, #10]
 8005f94:	4613      	mov	r3, r2
 8005f96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f98:	f7fe fe92 	bl	8004cc0 <HAL_GetTick>
 8005f9c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b20      	cmp	r3, #32
 8005fa8:	f040 820b 	bne.w	80063c2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	2319      	movs	r3, #25
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	497c      	ldr	r1, [pc, #496]	; (80061a8 <HAL_I2C_Master_Receive+0x224>)
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f001 ffe8 	bl	8007f8c <I2C_WaitOnFlagUntilTimeout>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	e1fe      	b.n	80063c4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d101      	bne.n	8005fd4 <HAL_I2C_Master_Receive+0x50>
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	e1f7      	b.n	80063c4 <HAL_I2C_Master_Receive+0x440>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d007      	beq.n	8005ffa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f042 0201 	orr.w	r2, r2, #1
 8005ff8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006008:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2222      	movs	r2, #34	; 0x22
 800600e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2210      	movs	r2, #16
 8006016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	893a      	ldrh	r2, [r7, #8]
 800602a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4a5c      	ldr	r2, [pc, #368]	; (80061ac <HAL_I2C_Master_Receive+0x228>)
 800603a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800603c:	8979      	ldrh	r1, [r7, #10]
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f001 fe2c 	bl	8007ca0 <I2C_MasterRequestRead>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e1b8      	b.n	80063c4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006056:	2b00      	cmp	r3, #0
 8006058:	d113      	bne.n	8006082 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800605a:	2300      	movs	r3, #0
 800605c:	623b      	str	r3, [r7, #32]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	623b      	str	r3, [r7, #32]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	623b      	str	r3, [r7, #32]
 800606e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	e18c      	b.n	800639c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006086:	2b01      	cmp	r3, #1
 8006088:	d11b      	bne.n	80060c2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006098:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800609a:	2300      	movs	r3, #0
 800609c:	61fb      	str	r3, [r7, #28]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	61fb      	str	r3, [r7, #28]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	61fb      	str	r3, [r7, #28]
 80060ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060be:	601a      	str	r2, [r3, #0]
 80060c0:	e16c      	b.n	800639c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d11b      	bne.n	8006102 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ea:	2300      	movs	r3, #0
 80060ec:	61bb      	str	r3, [r7, #24]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	61bb      	str	r3, [r7, #24]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	61bb      	str	r3, [r7, #24]
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	e14c      	b.n	800639c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006110:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006112:	2300      	movs	r3, #0
 8006114:	617b      	str	r3, [r7, #20]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	617b      	str	r3, [r7, #20]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	617b      	str	r3, [r7, #20]
 8006126:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006128:	e138      	b.n	800639c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800612e:	2b03      	cmp	r3, #3
 8006130:	f200 80f1 	bhi.w	8006316 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006138:	2b01      	cmp	r3, #1
 800613a:	d123      	bne.n	8006184 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800613c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800613e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f002 f8ad 	bl	80082a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e139      	b.n	80063c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	691a      	ldr	r2, [r3, #16]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	b2d2      	uxtb	r2, r2
 800615c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800616c:	3b01      	subs	r3, #1
 800616e:	b29a      	uxth	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006178:	b29b      	uxth	r3, r3
 800617a:	3b01      	subs	r3, #1
 800617c:	b29a      	uxth	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006182:	e10b      	b.n	800639c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006188:	2b02      	cmp	r3, #2
 800618a:	d14e      	bne.n	800622a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006192:	2200      	movs	r2, #0
 8006194:	4906      	ldr	r1, [pc, #24]	; (80061b0 <HAL_I2C_Master_Receive+0x22c>)
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f001 fef8 	bl	8007f8c <I2C_WaitOnFlagUntilTimeout>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d008      	beq.n	80061b4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e10e      	b.n	80063c4 <HAL_I2C_Master_Receive+0x440>
 80061a6:	bf00      	nop
 80061a8:	00100002 	.word	0x00100002
 80061ac:	ffff0000 	.word	0xffff0000
 80061b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	691a      	ldr	r2, [r3, #16]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e0:	3b01      	subs	r3, #1
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	3b01      	subs	r3, #1
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006200:	b2d2      	uxtb	r2, r2
 8006202:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006212:	3b01      	subs	r3, #1
 8006214:	b29a      	uxth	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800621e:	b29b      	uxth	r3, r3
 8006220:	3b01      	subs	r3, #1
 8006222:	b29a      	uxth	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006228:	e0b8      	b.n	800639c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006230:	2200      	movs	r2, #0
 8006232:	4966      	ldr	r1, [pc, #408]	; (80063cc <HAL_I2C_Master_Receive+0x448>)
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f001 fea9 	bl	8007f8c <I2C_WaitOnFlagUntilTimeout>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d001      	beq.n	8006244 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e0bf      	b.n	80063c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006252:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	691a      	ldr	r2, [r3, #16]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	b2d2      	uxtb	r2, r2
 8006260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006266:	1c5a      	adds	r2, r3, #1
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006270:	3b01      	subs	r3, #1
 8006272:	b29a      	uxth	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800627c:	b29b      	uxth	r3, r3
 800627e:	3b01      	subs	r3, #1
 8006280:	b29a      	uxth	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628c:	2200      	movs	r2, #0
 800628e:	494f      	ldr	r1, [pc, #316]	; (80063cc <HAL_I2C_Master_Receive+0x448>)
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f001 fe7b 	bl	8007f8c <I2C_WaitOnFlagUntilTimeout>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e091      	b.n	80063c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	691a      	ldr	r2, [r3, #16]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ba:	b2d2      	uxtb	r2, r2
 80062bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c2:	1c5a      	adds	r2, r3, #1
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062cc:	3b01      	subs	r3, #1
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d8:	b29b      	uxth	r3, r3
 80062da:	3b01      	subs	r3, #1
 80062dc:	b29a      	uxth	r2, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	691a      	ldr	r2, [r3, #16]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ec:	b2d2      	uxtb	r2, r2
 80062ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f4:	1c5a      	adds	r2, r3, #1
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062fe:	3b01      	subs	r3, #1
 8006300:	b29a      	uxth	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800630a:	b29b      	uxth	r3, r3
 800630c:	3b01      	subs	r3, #1
 800630e:	b29a      	uxth	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006314:	e042      	b.n	800639c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006318:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f001 ffc0 	bl	80082a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e04c      	b.n	80063c4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	691a      	ldr	r2, [r3, #16]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006334:	b2d2      	uxtb	r2, r2
 8006336:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633c:	1c5a      	adds	r2, r3, #1
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006346:	3b01      	subs	r3, #1
 8006348:	b29a      	uxth	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006352:	b29b      	uxth	r3, r3
 8006354:	3b01      	subs	r3, #1
 8006356:	b29a      	uxth	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	f003 0304 	and.w	r3, r3, #4
 8006366:	2b04      	cmp	r3, #4
 8006368:	d118      	bne.n	800639c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	691a      	ldr	r2, [r3, #16]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637c:	1c5a      	adds	r2, r3, #1
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006386:	3b01      	subs	r3, #1
 8006388:	b29a      	uxth	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006392:	b29b      	uxth	r3, r3
 8006394:	3b01      	subs	r3, #1
 8006396:	b29a      	uxth	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f47f aec2 	bne.w	800612a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2220      	movs	r2, #32
 80063aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	e000      	b.n	80063c4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80063c2:	2302      	movs	r3, #2
  }
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3728      	adds	r7, #40	; 0x28
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	00010004 	.word	0x00010004

080063d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b088      	sub	sp, #32
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80063d8:	2300      	movs	r3, #0
 80063da:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063f0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063f8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
 80063fc:	2b10      	cmp	r3, #16
 80063fe:	d003      	beq.n	8006408 <HAL_I2C_EV_IRQHandler+0x38>
 8006400:	7bfb      	ldrb	r3, [r7, #15]
 8006402:	2b40      	cmp	r3, #64	; 0x40
 8006404:	f040 80c1 	bne.w	800658a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10d      	bne.n	800643e <HAL_I2C_EV_IRQHandler+0x6e>
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006428:	d003      	beq.n	8006432 <HAL_I2C_EV_IRQHandler+0x62>
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006430:	d101      	bne.n	8006436 <HAL_I2C_EV_IRQHandler+0x66>
 8006432:	2301      	movs	r3, #1
 8006434:	e000      	b.n	8006438 <HAL_I2C_EV_IRQHandler+0x68>
 8006436:	2300      	movs	r3, #0
 8006438:	2b01      	cmp	r3, #1
 800643a:	f000 8132 	beq.w	80066a2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00c      	beq.n	8006462 <HAL_I2C_EV_IRQHandler+0x92>
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	0a5b      	lsrs	r3, r3, #9
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	2b00      	cmp	r3, #0
 8006452:	d006      	beq.n	8006462 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f001 ffa8 	bl	80083aa <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fd83 	bl	8006f66 <I2C_Master_SB>
 8006460:	e092      	b.n	8006588 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	08db      	lsrs	r3, r3, #3
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	d009      	beq.n	8006482 <HAL_I2C_EV_IRQHandler+0xb2>
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	0a5b      	lsrs	r3, r3, #9
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fdf9 	bl	8007072 <I2C_Master_ADD10>
 8006480:	e082      	b.n	8006588 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	085b      	lsrs	r3, r3, #1
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b00      	cmp	r3, #0
 800648c:	d009      	beq.n	80064a2 <HAL_I2C_EV_IRQHandler+0xd2>
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	0a5b      	lsrs	r3, r3, #9
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fe13 	bl	80070c6 <I2C_Master_ADDR>
 80064a0:	e072      	b.n	8006588 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	089b      	lsrs	r3, r3, #2
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d03b      	beq.n	8006526 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064bc:	f000 80f3 	beq.w	80066a6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	09db      	lsrs	r3, r3, #7
 80064c4:	f003 0301 	and.w	r3, r3, #1
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00f      	beq.n	80064ec <HAL_I2C_EV_IRQHandler+0x11c>
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	0a9b      	lsrs	r3, r3, #10
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d009      	beq.n	80064ec <HAL_I2C_EV_IRQHandler+0x11c>
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	089b      	lsrs	r3, r3, #2
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d103      	bne.n	80064ec <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f9f3 	bl	80068d0 <I2C_MasterTransmit_TXE>
 80064ea:	e04d      	b.n	8006588 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	089b      	lsrs	r3, r3, #2
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 80d6 	beq.w	80066a6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	0a5b      	lsrs	r3, r3, #9
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	f000 80cf 	beq.w	80066a6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006508:	7bbb      	ldrb	r3, [r7, #14]
 800650a:	2b21      	cmp	r3, #33	; 0x21
 800650c:	d103      	bne.n	8006516 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fa7a 	bl	8006a08 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006514:	e0c7      	b.n	80066a6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006516:	7bfb      	ldrb	r3, [r7, #15]
 8006518:	2b40      	cmp	r3, #64	; 0x40
 800651a:	f040 80c4 	bne.w	80066a6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fae8 	bl	8006af4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006524:	e0bf      	b.n	80066a6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006534:	f000 80b7 	beq.w	80066a6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	099b      	lsrs	r3, r3, #6
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00f      	beq.n	8006564 <HAL_I2C_EV_IRQHandler+0x194>
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	0a9b      	lsrs	r3, r3, #10
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	2b00      	cmp	r3, #0
 800654e:	d009      	beq.n	8006564 <HAL_I2C_EV_IRQHandler+0x194>
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	089b      	lsrs	r3, r3, #2
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b00      	cmp	r3, #0
 800655a:	d103      	bne.n	8006564 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fb5d 	bl	8006c1c <I2C_MasterReceive_RXNE>
 8006562:	e011      	b.n	8006588 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	089b      	lsrs	r3, r3, #2
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 809a 	beq.w	80066a6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	0a5b      	lsrs	r3, r3, #9
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b00      	cmp	r3, #0
 800657c:	f000 8093 	beq.w	80066a6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fc06 	bl	8006d92 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006586:	e08e      	b.n	80066a6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006588:	e08d      	b.n	80066a6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	2b00      	cmp	r3, #0
 8006590:	d004      	beq.n	800659c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	61fb      	str	r3, [r7, #28]
 800659a:	e007      	b.n	80065ac <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	085b      	lsrs	r3, r3, #1
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d012      	beq.n	80065de <HAL_I2C_EV_IRQHandler+0x20e>
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	0a5b      	lsrs	r3, r3, #9
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00c      	beq.n	80065de <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80065d4:	69b9      	ldr	r1, [r7, #24]
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 ffc4 	bl	8007564 <I2C_Slave_ADDR>
 80065dc:	e066      	b.n	80066ac <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	091b      	lsrs	r3, r3, #4
 80065e2:	f003 0301 	and.w	r3, r3, #1
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d009      	beq.n	80065fe <HAL_I2C_EV_IRQHandler+0x22e>
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	0a5b      	lsrs	r3, r3, #9
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fffe 	bl	80075f8 <I2C_Slave_STOPF>
 80065fc:	e056      	b.n	80066ac <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80065fe:	7bbb      	ldrb	r3, [r7, #14]
 8006600:	2b21      	cmp	r3, #33	; 0x21
 8006602:	d002      	beq.n	800660a <HAL_I2C_EV_IRQHandler+0x23a>
 8006604:	7bbb      	ldrb	r3, [r7, #14]
 8006606:	2b29      	cmp	r3, #41	; 0x29
 8006608:	d125      	bne.n	8006656 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	09db      	lsrs	r3, r3, #7
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00f      	beq.n	8006636 <HAL_I2C_EV_IRQHandler+0x266>
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	0a9b      	lsrs	r3, r3, #10
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	2b00      	cmp	r3, #0
 8006620:	d009      	beq.n	8006636 <HAL_I2C_EV_IRQHandler+0x266>
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	089b      	lsrs	r3, r3, #2
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b00      	cmp	r3, #0
 800662c:	d103      	bne.n	8006636 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 feda 	bl	80073e8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006634:	e039      	b.n	80066aa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	089b      	lsrs	r3, r3, #2
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d033      	beq.n	80066aa <HAL_I2C_EV_IRQHandler+0x2da>
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	0a5b      	lsrs	r3, r3, #9
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d02d      	beq.n	80066aa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 ff07 	bl	8007462 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006654:	e029      	b.n	80066aa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	099b      	lsrs	r3, r3, #6
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00f      	beq.n	8006682 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	0a9b      	lsrs	r3, r3, #10
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	2b00      	cmp	r3, #0
 800666c:	d009      	beq.n	8006682 <HAL_I2C_EV_IRQHandler+0x2b2>
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	089b      	lsrs	r3, r3, #2
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d103      	bne.n	8006682 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 ff12 	bl	80074a4 <I2C_SlaveReceive_RXNE>
 8006680:	e014      	b.n	80066ac <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	089b      	lsrs	r3, r3, #2
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00e      	beq.n	80066ac <HAL_I2C_EV_IRQHandler+0x2dc>
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	0a5b      	lsrs	r3, r3, #9
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b00      	cmp	r3, #0
 8006698:	d008      	beq.n	80066ac <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 ff40 	bl	8007520 <I2C_SlaveReceive_BTF>
 80066a0:	e004      	b.n	80066ac <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80066a2:	bf00      	nop
 80066a4:	e002      	b.n	80066ac <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066a6:	bf00      	nop
 80066a8:	e000      	b.n	80066ac <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80066aa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80066ac:	3720      	adds	r7, #32
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b08a      	sub	sp, #40	; 0x28
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80066ca:	2300      	movs	r3, #0
 80066cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066d4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80066d6:	6a3b      	ldr	r3, [r7, #32]
 80066d8:	0a1b      	lsrs	r3, r3, #8
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00e      	beq.n	8006700 <HAL_I2C_ER_IRQHandler+0x4e>
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	0a1b      	lsrs	r3, r3, #8
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d008      	beq.n	8006700 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80066ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f0:	f043 0301 	orr.w	r3, r3, #1
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80066fe:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006700:	6a3b      	ldr	r3, [r7, #32]
 8006702:	0a5b      	lsrs	r3, r3, #9
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00e      	beq.n	800672a <HAL_I2C_ER_IRQHandler+0x78>
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	0a1b      	lsrs	r3, r3, #8
 8006710:	f003 0301 	and.w	r3, r3, #1
 8006714:	2b00      	cmp	r3, #0
 8006716:	d008      	beq.n	800672a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	f043 0302 	orr.w	r3, r3, #2
 800671e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006728:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	0a9b      	lsrs	r3, r3, #10
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	2b00      	cmp	r3, #0
 8006734:	d03f      	beq.n	80067b6 <HAL_I2C_ER_IRQHandler+0x104>
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	0a1b      	lsrs	r3, r3, #8
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d039      	beq.n	80067b6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006742:	7efb      	ldrb	r3, [r7, #27]
 8006744:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800674a:	b29b      	uxth	r3, r3
 800674c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006754:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800675c:	7ebb      	ldrb	r3, [r7, #26]
 800675e:	2b20      	cmp	r3, #32
 8006760:	d112      	bne.n	8006788 <HAL_I2C_ER_IRQHandler+0xd6>
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10f      	bne.n	8006788 <HAL_I2C_ER_IRQHandler+0xd6>
 8006768:	7cfb      	ldrb	r3, [r7, #19]
 800676a:	2b21      	cmp	r3, #33	; 0x21
 800676c:	d008      	beq.n	8006780 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800676e:	7cfb      	ldrb	r3, [r7, #19]
 8006770:	2b29      	cmp	r3, #41	; 0x29
 8006772:	d005      	beq.n	8006780 <HAL_I2C_ER_IRQHandler+0xce>
 8006774:	7cfb      	ldrb	r3, [r7, #19]
 8006776:	2b28      	cmp	r3, #40	; 0x28
 8006778:	d106      	bne.n	8006788 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2b21      	cmp	r3, #33	; 0x21
 800677e:	d103      	bne.n	8006788 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f001 f869 	bl	8007858 <I2C_Slave_AF>
 8006786:	e016      	b.n	80067b6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006790:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006794:	f043 0304 	orr.w	r3, r3, #4
 8006798:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800679a:	7efb      	ldrb	r3, [r7, #27]
 800679c:	2b10      	cmp	r3, #16
 800679e:	d002      	beq.n	80067a6 <HAL_I2C_ER_IRQHandler+0xf4>
 80067a0:	7efb      	ldrb	r3, [r7, #27]
 80067a2:	2b40      	cmp	r3, #64	; 0x40
 80067a4:	d107      	bne.n	80067b6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067b4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80067b6:	6a3b      	ldr	r3, [r7, #32]
 80067b8:	0adb      	lsrs	r3, r3, #11
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00e      	beq.n	80067e0 <HAL_I2C_ER_IRQHandler+0x12e>
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	0a1b      	lsrs	r3, r3, #8
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d008      	beq.n	80067e0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	f043 0308 	orr.w	r3, r3, #8
 80067d4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80067de:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d008      	beq.n	80067f8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	431a      	orrs	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f001 f8a0 	bl	8007938 <I2C_ITError>
  }
}
 80067f8:	bf00      	nop
 80067fa:	3728      	adds	r7, #40	; 0x28
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	460b      	mov	r3, r1
 800685a:	70fb      	strb	r3, [r7, #3]
 800685c:	4613      	mov	r3, r2
 800685e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068de:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068e6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ec:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d150      	bne.n	8006998 <I2C_MasterTransmit_TXE+0xc8>
 80068f6:	7bfb      	ldrb	r3, [r7, #15]
 80068f8:	2b21      	cmp	r3, #33	; 0x21
 80068fa:	d14d      	bne.n	8006998 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	2b08      	cmp	r3, #8
 8006900:	d01d      	beq.n	800693e <I2C_MasterTransmit_TXE+0x6e>
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2b20      	cmp	r3, #32
 8006906:	d01a      	beq.n	800693e <I2C_MasterTransmit_TXE+0x6e>
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800690e:	d016      	beq.n	800693e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800691e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2211      	movs	r2, #17
 8006924:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2220      	movs	r2, #32
 8006932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7ff ff62 	bl	8006800 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800693c:	e060      	b.n	8006a00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800694c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800695c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2220      	movs	r2, #32
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006972:	b2db      	uxtb	r3, r3
 8006974:	2b40      	cmp	r3, #64	; 0x40
 8006976:	d107      	bne.n	8006988 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7ff ff7d 	bl	8006880 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006986:	e03b      	b.n	8006a00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7ff ff35 	bl	8006800 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006996:	e033      	b.n	8006a00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006998:	7bfb      	ldrb	r3, [r7, #15]
 800699a:	2b21      	cmp	r3, #33	; 0x21
 800699c:	d005      	beq.n	80069aa <I2C_MasterTransmit_TXE+0xda>
 800699e:	7bbb      	ldrb	r3, [r7, #14]
 80069a0:	2b40      	cmp	r3, #64	; 0x40
 80069a2:	d12d      	bne.n	8006a00 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
 80069a6:	2b22      	cmp	r3, #34	; 0x22
 80069a8:	d12a      	bne.n	8006a00 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d108      	bne.n	80069c6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069c2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80069c4:	e01c      	b.n	8006a00 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b40      	cmp	r3, #64	; 0x40
 80069d0:	d103      	bne.n	80069da <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f88e 	bl	8006af4 <I2C_MemoryTransmit_TXE_BTF>
}
 80069d8:	e012      	b.n	8006a00 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069de:	781a      	ldrb	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ea:	1c5a      	adds	r2, r3, #1
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	3b01      	subs	r3, #1
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80069fe:	e7ff      	b.n	8006a00 <I2C_MasterTransmit_TXE+0x130>
 8006a00:	bf00      	nop
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a14:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b21      	cmp	r3, #33	; 0x21
 8006a20:	d164      	bne.n	8006aec <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d012      	beq.n	8006a52 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	781a      	ldrb	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3c:	1c5a      	adds	r2, r3, #1
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006a50:	e04c      	b.n	8006aec <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2b08      	cmp	r3, #8
 8006a56:	d01d      	beq.n	8006a94 <I2C_MasterTransmit_BTF+0x8c>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2b20      	cmp	r3, #32
 8006a5c:	d01a      	beq.n	8006a94 <I2C_MasterTransmit_BTF+0x8c>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a64:	d016      	beq.n	8006a94 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a74:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2211      	movs	r2, #17
 8006a7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2220      	movs	r2, #32
 8006a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f7ff feb7 	bl	8006800 <HAL_I2C_MasterTxCpltCallback>
}
 8006a92:	e02b      	b.n	8006aec <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685a      	ldr	r2, [r3, #4]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006aa2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ab2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2220      	movs	r2, #32
 8006abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b40      	cmp	r3, #64	; 0x40
 8006acc:	d107      	bne.n	8006ade <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7ff fed2 	bl	8006880 <HAL_I2C_MemTxCpltCallback>
}
 8006adc:	e006      	b.n	8006aec <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7ff fe8a 	bl	8006800 <HAL_I2C_MasterTxCpltCallback>
}
 8006aec:	bf00      	nop
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b02:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d11d      	bne.n	8006b48 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d10b      	bne.n	8006b2c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b24:	1c9a      	adds	r2, r3, #2
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006b2a:	e073      	b.n	8006c14 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	121b      	asrs	r3, r3, #8
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b40:	1c5a      	adds	r2, r3, #1
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006b46:	e065      	b.n	8006c14 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d10b      	bne.n	8006b68 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b60:	1c5a      	adds	r2, r3, #1
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006b66:	e055      	b.n	8006c14 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d151      	bne.n	8006c14 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
 8006b72:	2b22      	cmp	r3, #34	; 0x22
 8006b74:	d10d      	bne.n	8006b92 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b84:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006b90:	e040      	b.n	8006c14 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d015      	beq.n	8006bc8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
 8006b9e:	2b21      	cmp	r3, #33	; 0x21
 8006ba0:	d112      	bne.n	8006bc8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba6:	781a      	ldrb	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb2:	1c5a      	adds	r2, r3, #1
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006bc6:	e025      	b.n	8006c14 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d120      	bne.n	8006c14 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
 8006bd4:	2b21      	cmp	r3, #33	; 0x21
 8006bd6:	d11d      	bne.n	8006c14 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006be6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bf6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2220      	movs	r2, #32
 8006c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7ff fe36 	bl	8006880 <HAL_I2C_MemTxCpltCallback>
}
 8006c14:	bf00      	nop
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b22      	cmp	r3, #34	; 0x22
 8006c2e:	f040 80ac 	bne.w	8006d8a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2b03      	cmp	r3, #3
 8006c3e:	d921      	bls.n	8006c84 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	691a      	ldr	r2, [r3, #16]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4a:	b2d2      	uxtb	r2, r2
 8006c4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	2b03      	cmp	r3, #3
 8006c6e:	f040 808c 	bne.w	8006d8a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c80:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006c82:	e082      	b.n	8006d8a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d075      	beq.n	8006d78 <I2C_MasterReceive_RXNE+0x15c>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d002      	beq.n	8006c98 <I2C_MasterReceive_RXNE+0x7c>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d16f      	bne.n	8006d78 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f001 facf 	bl	800823c <I2C_WaitOnSTOPRequestThroughIT>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d142      	bne.n	8006d2a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cb2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006cc2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	691a      	ldr	r2, [r3, #16]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cce:	b2d2      	uxtb	r2, r2
 8006cd0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd6:	1c5a      	adds	r2, r3, #1
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2220      	movs	r2, #32
 8006cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b40      	cmp	r3, #64	; 0x40
 8006cfc:	d10a      	bne.n	8006d14 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7ff fdc1 	bl	8006894 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006d12:	e03a      	b.n	8006d8a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2212      	movs	r2, #18
 8006d20:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7ff fd76 	bl	8006814 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006d28:	e02f      	b.n	8006d8a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d38:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	691a      	ldr	r2, [r3, #16]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d44:	b2d2      	uxtb	r2, r2
 8006d46:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	1c5a      	adds	r2, r3, #1
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2220      	movs	r2, #32
 8006d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f7ff fd99 	bl	80068a8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006d76:	e008      	b.n	8006d8a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d86:	605a      	str	r2, [r3, #4]
}
 8006d88:	e7ff      	b.n	8006d8a <I2C_MasterReceive_RXNE+0x16e>
 8006d8a:	bf00      	nop
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b084      	sub	sp, #16
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	2b04      	cmp	r3, #4
 8006da8:	d11b      	bne.n	8006de2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	685a      	ldr	r2, [r3, #4]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006db8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	691a      	ldr	r2, [r3, #16]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc4:	b2d2      	uxtb	r2, r2
 8006dc6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dcc:	1c5a      	adds	r2, r3, #1
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006de0:	e0bd      	b.n	8006f5e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	2b03      	cmp	r3, #3
 8006dea:	d129      	bne.n	8006e40 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	685a      	ldr	r2, [r3, #4]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dfa:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	d00a      	beq.n	8006e18 <I2C_MasterReceive_BTF+0x86>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d007      	beq.n	8006e18 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e16:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	691a      	ldr	r2, [r3, #16]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	b2d2      	uxtb	r2, r2
 8006e24:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2a:	1c5a      	adds	r2, r3, #1
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	3b01      	subs	r3, #1
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006e3e:	e08e      	b.n	8006f5e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d176      	bne.n	8006f38 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d002      	beq.n	8006e56 <I2C_MasterReceive_BTF+0xc4>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2b10      	cmp	r3, #16
 8006e54:	d108      	bne.n	8006e68 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e64:	601a      	str	r2, [r3, #0]
 8006e66:	e019      	b.n	8006e9c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b04      	cmp	r3, #4
 8006e6c:	d002      	beq.n	8006e74 <I2C_MasterReceive_BTF+0xe2>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d108      	bne.n	8006e86 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	e00a      	b.n	8006e9c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2b10      	cmp	r3, #16
 8006e8a:	d007      	beq.n	8006e9c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e9a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	691a      	ldr	r2, [r3, #16]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea6:	b2d2      	uxtb	r2, r2
 8006ea8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	1c5a      	adds	r2, r3, #1
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	691a      	ldr	r2, [r3, #16]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed4:	1c5a      	adds	r2, r3, #1
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685a      	ldr	r2, [r3, #4]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006ef6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2220      	movs	r2, #32
 8006efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b40      	cmp	r3, #64	; 0x40
 8006f0a:	d10a      	bne.n	8006f22 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7ff fcba 	bl	8006894 <HAL_I2C_MemRxCpltCallback>
}
 8006f20:	e01d      	b.n	8006f5e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2212      	movs	r2, #18
 8006f2e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f7ff fc6f 	bl	8006814 <HAL_I2C_MasterRxCpltCallback>
}
 8006f36:	e012      	b.n	8006f5e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	691a      	ldr	r2, [r3, #16]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f42:	b2d2      	uxtb	r2, r2
 8006f44:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4a:	1c5a      	adds	r2, r3, #1
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	3b01      	subs	r3, #1
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006f5e:	bf00      	nop
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b083      	sub	sp, #12
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b40      	cmp	r3, #64	; 0x40
 8006f78:	d117      	bne.n	8006faa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d109      	bne.n	8006f96 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	461a      	mov	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f92:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006f94:	e067      	b.n	8007066 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	f043 0301 	orr.w	r3, r3, #1
 8006fa0:	b2da      	uxtb	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	611a      	str	r2, [r3, #16]
}
 8006fa8:	e05d      	b.n	8007066 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fb2:	d133      	bne.n	800701c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b21      	cmp	r3, #33	; 0x21
 8006fbe:	d109      	bne.n	8006fd4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006fd0:	611a      	str	r2, [r3, #16]
 8006fd2:	e008      	b.n	8006fe6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	f043 0301 	orr.w	r3, r3, #1
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d004      	beq.n	8006ff8 <I2C_Master_SB+0x92>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d108      	bne.n	800700a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d032      	beq.n	8007066 <I2C_Master_SB+0x100>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007006:	2b00      	cmp	r3, #0
 8007008:	d02d      	beq.n	8007066 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007018:	605a      	str	r2, [r3, #4]
}
 800701a:	e024      	b.n	8007066 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10e      	bne.n	8007042 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007028:	b29b      	uxth	r3, r3
 800702a:	11db      	asrs	r3, r3, #7
 800702c:	b2db      	uxtb	r3, r3
 800702e:	f003 0306 	and.w	r3, r3, #6
 8007032:	b2db      	uxtb	r3, r3
 8007034:	f063 030f 	orn	r3, r3, #15
 8007038:	b2da      	uxtb	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	611a      	str	r2, [r3, #16]
}
 8007040:	e011      	b.n	8007066 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007046:	2b01      	cmp	r3, #1
 8007048:	d10d      	bne.n	8007066 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800704e:	b29b      	uxth	r3, r3
 8007050:	11db      	asrs	r3, r3, #7
 8007052:	b2db      	uxtb	r3, r3
 8007054:	f003 0306 	and.w	r3, r3, #6
 8007058:	b2db      	uxtb	r3, r3
 800705a:	f063 030e 	orn	r3, r3, #14
 800705e:	b2da      	uxtb	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	611a      	str	r2, [r3, #16]
}
 8007066:	bf00      	nop
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007072:	b480      	push	{r7}
 8007074:	b083      	sub	sp, #12
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800707e:	b2da      	uxtb	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800708a:	2b00      	cmp	r3, #0
 800708c:	d004      	beq.n	8007098 <I2C_Master_ADD10+0x26>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007094:	2b00      	cmp	r3, #0
 8007096:	d108      	bne.n	80070aa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00c      	beq.n	80070ba <I2C_Master_ADD10+0x48>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d007      	beq.n	80070ba <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070b8:	605a      	str	r2, [r3, #4]
  }
}
 80070ba:	bf00      	nop
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b091      	sub	sp, #68	; 0x44
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070dc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b22      	cmp	r3, #34	; 0x22
 80070ee:	f040 8169 	bne.w	80073c4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10f      	bne.n	800711a <I2C_Master_ADDR+0x54>
 80070fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80070fe:	2b40      	cmp	r3, #64	; 0x40
 8007100:	d10b      	bne.n	800711a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007102:	2300      	movs	r3, #0
 8007104:	633b      	str	r3, [r7, #48]	; 0x30
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	633b      	str	r3, [r7, #48]	; 0x30
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	633b      	str	r3, [r7, #48]	; 0x30
 8007116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007118:	e160      	b.n	80073dc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800711e:	2b00      	cmp	r3, #0
 8007120:	d11d      	bne.n	800715e <I2C_Master_ADDR+0x98>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800712a:	d118      	bne.n	800715e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800712c:	2300      	movs	r3, #0
 800712e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007140:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007150:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007156:	1c5a      	adds	r2, r3, #1
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	651a      	str	r2, [r3, #80]	; 0x50
 800715c:	e13e      	b.n	80073dc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007162:	b29b      	uxth	r3, r3
 8007164:	2b00      	cmp	r3, #0
 8007166:	d113      	bne.n	8007190 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007168:	2300      	movs	r3, #0
 800716a:	62bb      	str	r3, [r7, #40]	; 0x28
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	62bb      	str	r3, [r7, #40]	; 0x28
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	62bb      	str	r3, [r7, #40]	; 0x28
 800717c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800718c:	601a      	str	r2, [r3, #0]
 800718e:	e115      	b.n	80073bc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007194:	b29b      	uxth	r3, r3
 8007196:	2b01      	cmp	r3, #1
 8007198:	f040 808a 	bne.w	80072b0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800719c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80071a2:	d137      	bne.n	8007214 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071b2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071c2:	d113      	bne.n	80071ec <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071d2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071d4:	2300      	movs	r3, #0
 80071d6:	627b      	str	r3, [r7, #36]	; 0x24
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	627b      	str	r3, [r7, #36]	; 0x24
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	627b      	str	r3, [r7, #36]	; 0x24
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	e0e7      	b.n	80073bc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071ec:	2300      	movs	r3, #0
 80071ee:	623b      	str	r3, [r7, #32]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	623b      	str	r3, [r7, #32]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	623b      	str	r3, [r7, #32]
 8007200:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007210:	601a      	str	r2, [r3, #0]
 8007212:	e0d3      	b.n	80073bc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007216:	2b08      	cmp	r3, #8
 8007218:	d02e      	beq.n	8007278 <I2C_Master_ADDR+0x1b2>
 800721a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721c:	2b20      	cmp	r3, #32
 800721e:	d02b      	beq.n	8007278 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007222:	2b12      	cmp	r3, #18
 8007224:	d102      	bne.n	800722c <I2C_Master_ADDR+0x166>
 8007226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007228:	2b01      	cmp	r3, #1
 800722a:	d125      	bne.n	8007278 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800722c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722e:	2b04      	cmp	r3, #4
 8007230:	d00e      	beq.n	8007250 <I2C_Master_ADDR+0x18a>
 8007232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007234:	2b02      	cmp	r3, #2
 8007236:	d00b      	beq.n	8007250 <I2C_Master_ADDR+0x18a>
 8007238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723a:	2b10      	cmp	r3, #16
 800723c:	d008      	beq.n	8007250 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800724c:	601a      	str	r2, [r3, #0]
 800724e:	e007      	b.n	8007260 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800725e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007260:	2300      	movs	r3, #0
 8007262:	61fb      	str	r3, [r7, #28]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	61fb      	str	r3, [r7, #28]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	61fb      	str	r3, [r7, #28]
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	e0a1      	b.n	80073bc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007286:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007288:	2300      	movs	r3, #0
 800728a:	61bb      	str	r3, [r7, #24]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	61bb      	str	r3, [r7, #24]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	61bb      	str	r3, [r7, #24]
 800729c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072ac:	601a      	str	r2, [r3, #0]
 80072ae:	e085      	b.n	80073bc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d14d      	bne.n	8007356 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80072ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072bc:	2b04      	cmp	r3, #4
 80072be:	d016      	beq.n	80072ee <I2C_Master_ADDR+0x228>
 80072c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d013      	beq.n	80072ee <I2C_Master_ADDR+0x228>
 80072c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c8:	2b10      	cmp	r3, #16
 80072ca:	d010      	beq.n	80072ee <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072da:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072ea:	601a      	str	r2, [r3, #0]
 80072ec:	e007      	b.n	80072fe <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072fc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800730c:	d117      	bne.n	800733e <I2C_Master_ADDR+0x278>
 800730e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007310:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007314:	d00b      	beq.n	800732e <I2C_Master_ADDR+0x268>
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	2b01      	cmp	r3, #1
 800731a:	d008      	beq.n	800732e <I2C_Master_ADDR+0x268>
 800731c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731e:	2b08      	cmp	r3, #8
 8007320:	d005      	beq.n	800732e <I2C_Master_ADDR+0x268>
 8007322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007324:	2b10      	cmp	r3, #16
 8007326:	d002      	beq.n	800732e <I2C_Master_ADDR+0x268>
 8007328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732a:	2b20      	cmp	r3, #32
 800732c:	d107      	bne.n	800733e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800733c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800733e:	2300      	movs	r3, #0
 8007340:	617b      	str	r3, [r7, #20]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	695b      	ldr	r3, [r3, #20]
 8007348:	617b      	str	r3, [r7, #20]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	617b      	str	r3, [r7, #20]
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	e032      	b.n	80073bc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007364:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007374:	d117      	bne.n	80073a6 <I2C_Master_ADDR+0x2e0>
 8007376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007378:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800737c:	d00b      	beq.n	8007396 <I2C_Master_ADDR+0x2d0>
 800737e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007380:	2b01      	cmp	r3, #1
 8007382:	d008      	beq.n	8007396 <I2C_Master_ADDR+0x2d0>
 8007384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007386:	2b08      	cmp	r3, #8
 8007388:	d005      	beq.n	8007396 <I2C_Master_ADDR+0x2d0>
 800738a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738c:	2b10      	cmp	r3, #16
 800738e:	d002      	beq.n	8007396 <I2C_Master_ADDR+0x2d0>
 8007390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007392:	2b20      	cmp	r3, #32
 8007394:	d107      	bne.n	80073a6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073a6:	2300      	movs	r3, #0
 80073a8:	613b      	str	r3, [r7, #16]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	613b      	str	r3, [r7, #16]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	613b      	str	r3, [r7, #16]
 80073ba:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80073c2:	e00b      	b.n	80073dc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073c4:	2300      	movs	r3, #0
 80073c6:	60fb      	str	r3, [r7, #12]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	60fb      	str	r3, [r7, #12]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	60fb      	str	r3, [r7, #12]
 80073d8:	68fb      	ldr	r3, [r7, #12]
}
 80073da:	e7ff      	b.n	80073dc <I2C_Master_ADDR+0x316>
 80073dc:	bf00      	nop
 80073de:	3744      	adds	r7, #68	; 0x44
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d02b      	beq.n	800745a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007406:	781a      	ldrb	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007412:	1c5a      	adds	r2, r3, #1
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800741c:	b29b      	uxth	r3, r3
 800741e:	3b01      	subs	r3, #1
 8007420:	b29a      	uxth	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800742a:	b29b      	uxth	r3, r3
 800742c:	2b00      	cmp	r3, #0
 800742e:	d114      	bne.n	800745a <I2C_SlaveTransmit_TXE+0x72>
 8007430:	7bfb      	ldrb	r3, [r7, #15]
 8007432:	2b29      	cmp	r3, #41	; 0x29
 8007434:	d111      	bne.n	800745a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007444:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2221      	movs	r2, #33	; 0x21
 800744a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2228      	movs	r2, #40	; 0x28
 8007450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f7ff f9e7 	bl	8006828 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800745a:	bf00      	nop
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007462:	b480      	push	{r7}
 8007464:	b083      	sub	sp, #12
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800746e:	b29b      	uxth	r3, r3
 8007470:	2b00      	cmp	r3, #0
 8007472:	d011      	beq.n	8007498 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007478:	781a      	ldrb	r2, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007484:	1c5a      	adds	r2, r3, #1
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800748e:	b29b      	uxth	r3, r3
 8007490:	3b01      	subs	r3, #1
 8007492:	b29a      	uxth	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074b2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d02c      	beq.n	8007518 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	691a      	ldr	r2, [r3, #16]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c8:	b2d2      	uxtb	r2, r2
 80074ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d0:	1c5a      	adds	r2, r3, #1
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074da:	b29b      	uxth	r3, r3
 80074dc:	3b01      	subs	r3, #1
 80074de:	b29a      	uxth	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d114      	bne.n	8007518 <I2C_SlaveReceive_RXNE+0x74>
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
 80074f0:	2b2a      	cmp	r3, #42	; 0x2a
 80074f2:	d111      	bne.n	8007518 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	685a      	ldr	r2, [r3, #4]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007502:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2222      	movs	r2, #34	; 0x22
 8007508:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2228      	movs	r2, #40	; 0x28
 800750e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f7ff f992 	bl	800683c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007518:	bf00      	nop
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800752c:	b29b      	uxth	r3, r3
 800752e:	2b00      	cmp	r3, #0
 8007530:	d012      	beq.n	8007558 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	691a      	ldr	r2, [r3, #16]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753c:	b2d2      	uxtb	r2, r2
 800753e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007544:	1c5a      	adds	r2, r3, #1
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800754e:	b29b      	uxth	r3, r3
 8007550:	3b01      	subs	r3, #1
 8007552:	b29a      	uxth	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800756e:	2300      	movs	r3, #0
 8007570:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007578:	b2db      	uxtb	r3, r3
 800757a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800757e:	2b28      	cmp	r3, #40	; 0x28
 8007580:	d127      	bne.n	80075d2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007590:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	089b      	lsrs	r3, r3, #2
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800759e:	2301      	movs	r3, #1
 80075a0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	09db      	lsrs	r3, r3, #7
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d103      	bne.n	80075b6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	81bb      	strh	r3, [r7, #12]
 80075b4:	e002      	b.n	80075bc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80075c4:	89ba      	ldrh	r2, [r7, #12]
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
 80075c8:	4619      	mov	r1, r3
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7ff f940 	bl	8006850 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80075d0:	e00e      	b.n	80075f0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075d2:	2300      	movs	r3, #0
 80075d4:	60bb      	str	r3, [r7, #8]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	60bb      	str	r3, [r7, #8]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	60bb      	str	r3, [r7, #8]
 80075e6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80075f0:	bf00      	nop
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007606:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685a      	ldr	r2, [r3, #4]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007616:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007618:	2300      	movs	r3, #0
 800761a:	60bb      	str	r3, [r7, #8]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	60bb      	str	r3, [r7, #8]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f042 0201 	orr.w	r2, r2, #1
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007644:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007654:	d172      	bne.n	800773c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007656:	7bfb      	ldrb	r3, [r7, #15]
 8007658:	2b22      	cmp	r3, #34	; 0x22
 800765a:	d002      	beq.n	8007662 <I2C_Slave_STOPF+0x6a>
 800765c:	7bfb      	ldrb	r3, [r7, #15]
 800765e:	2b2a      	cmp	r3, #42	; 0x2a
 8007660:	d135      	bne.n	80076ce <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	b29a      	uxth	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007674:	b29b      	uxth	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d005      	beq.n	8007686 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767e:	f043 0204 	orr.w	r2, r3, #4
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007694:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769a:	4618      	mov	r0, r3
 800769c:	f7fd ff74 	bl	8005588 <HAL_DMA_GetState>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d049      	beq.n	800773a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076aa:	4a69      	ldr	r2, [pc, #420]	; (8007850 <I2C_Slave_STOPF+0x258>)
 80076ac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fd fdbc 	bl	8005230 <HAL_DMA_Abort_IT>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d03d      	beq.n	800773a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80076c8:	4610      	mov	r0, r2
 80076ca:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80076cc:	e035      	b.n	800773a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d005      	beq.n	80076f2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ea:	f043 0204 	orr.w	r2, r3, #4
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	685a      	ldr	r2, [r3, #4]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007700:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007706:	4618      	mov	r0, r3
 8007708:	f7fd ff3e 	bl	8005588 <HAL_DMA_GetState>
 800770c:	4603      	mov	r3, r0
 800770e:	2b01      	cmp	r3, #1
 8007710:	d014      	beq.n	800773c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007716:	4a4e      	ldr	r2, [pc, #312]	; (8007850 <I2C_Slave_STOPF+0x258>)
 8007718:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800771e:	4618      	mov	r0, r3
 8007720:	f7fd fd86 	bl	8005230 <HAL_DMA_Abort_IT>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d008      	beq.n	800773c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800772e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007734:	4610      	mov	r0, r2
 8007736:	4798      	blx	r3
 8007738:	e000      	b.n	800773c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800773a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007740:	b29b      	uxth	r3, r3
 8007742:	2b00      	cmp	r3, #0
 8007744:	d03e      	beq.n	80077c4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	695b      	ldr	r3, [r3, #20]
 800774c:	f003 0304 	and.w	r3, r3, #4
 8007750:	2b04      	cmp	r3, #4
 8007752:	d112      	bne.n	800777a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	691a      	ldr	r2, [r3, #16]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775e:	b2d2      	uxtb	r2, r2
 8007760:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007766:	1c5a      	adds	r2, r3, #1
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007770:	b29b      	uxth	r3, r3
 8007772:	3b01      	subs	r3, #1
 8007774:	b29a      	uxth	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007784:	2b40      	cmp	r3, #64	; 0x40
 8007786:	d112      	bne.n	80077ae <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	691a      	ldr	r2, [r3, #16]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007792:	b2d2      	uxtb	r2, r2
 8007794:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779a:	1c5a      	adds	r2, r3, #1
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	3b01      	subs	r3, #1
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d005      	beq.n	80077c4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077bc:	f043 0204 	orr.w	r2, r3, #4
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d003      	beq.n	80077d4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f8b3 	bl	8007938 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80077d2:	e039      	b.n	8007848 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
 80077d6:	2b2a      	cmp	r3, #42	; 0x2a
 80077d8:	d109      	bne.n	80077ee <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2228      	movs	r2, #40	; 0x28
 80077e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7ff f827 	bl	800683c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b28      	cmp	r3, #40	; 0x28
 80077f8:	d111      	bne.n	800781e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a15      	ldr	r2, [pc, #84]	; (8007854 <I2C_Slave_STOPF+0x25c>)
 80077fe:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2220      	movs	r2, #32
 800780a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f7ff f828 	bl	800686c <HAL_I2C_ListenCpltCallback>
}
 800781c:	e014      	b.n	8007848 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007822:	2b22      	cmp	r3, #34	; 0x22
 8007824:	d002      	beq.n	800782c <I2C_Slave_STOPF+0x234>
 8007826:	7bfb      	ldrb	r3, [r7, #15]
 8007828:	2b22      	cmp	r3, #34	; 0x22
 800782a:	d10d      	bne.n	8007848 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2220      	movs	r2, #32
 8007836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7fe fffa 	bl	800683c <HAL_I2C_SlaveRxCpltCallback>
}
 8007848:	bf00      	nop
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	08007e3d 	.word	0x08007e3d
 8007854:	ffff0000 	.word	0xffff0000

08007858 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007866:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2b08      	cmp	r3, #8
 8007872:	d002      	beq.n	800787a <I2C_Slave_AF+0x22>
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	2b20      	cmp	r3, #32
 8007878:	d129      	bne.n	80078ce <I2C_Slave_AF+0x76>
 800787a:	7bfb      	ldrb	r3, [r7, #15]
 800787c:	2b28      	cmp	r3, #40	; 0x28
 800787e:	d126      	bne.n	80078ce <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a2c      	ldr	r2, [pc, #176]	; (8007934 <I2C_Slave_AF+0xdc>)
 8007884:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007894:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800789e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078ae:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2220      	movs	r2, #32
 80078ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7fe ffd0 	bl	800686c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80078cc:	e02e      	b.n	800792c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80078ce:	7bfb      	ldrb	r3, [r7, #15]
 80078d0:	2b21      	cmp	r3, #33	; 0x21
 80078d2:	d126      	bne.n	8007922 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a17      	ldr	r2, [pc, #92]	; (8007934 <I2C_Slave_AF+0xdc>)
 80078d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2221      	movs	r2, #33	; 0x21
 80078de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2220      	movs	r2, #32
 80078e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80078fe:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007908:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007918:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7fe ff84 	bl	8006828 <HAL_I2C_SlaveTxCpltCallback>
}
 8007920:	e004      	b.n	800792c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800792a:	615a      	str	r2, [r3, #20]
}
 800792c:	bf00      	nop
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	ffff0000 	.word	0xffff0000

08007938 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007946:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800794e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007950:	7bbb      	ldrb	r3, [r7, #14]
 8007952:	2b10      	cmp	r3, #16
 8007954:	d002      	beq.n	800795c <I2C_ITError+0x24>
 8007956:	7bbb      	ldrb	r3, [r7, #14]
 8007958:	2b40      	cmp	r3, #64	; 0x40
 800795a:	d10a      	bne.n	8007972 <I2C_ITError+0x3a>
 800795c:	7bfb      	ldrb	r3, [r7, #15]
 800795e:	2b22      	cmp	r3, #34	; 0x22
 8007960:	d107      	bne.n	8007972 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007970:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007972:	7bfb      	ldrb	r3, [r7, #15]
 8007974:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007978:	2b28      	cmp	r3, #40	; 0x28
 800797a:	d107      	bne.n	800798c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2228      	movs	r2, #40	; 0x28
 8007986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800798a:	e015      	b.n	80079b8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800799a:	d00a      	beq.n	80079b2 <I2C_ITError+0x7a>
 800799c:	7bfb      	ldrb	r3, [r7, #15]
 800799e:	2b60      	cmp	r3, #96	; 0x60
 80079a0:	d007      	beq.n	80079b2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2220      	movs	r2, #32
 80079a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079c6:	d162      	bne.n	8007a8e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	685a      	ldr	r2, [r3, #4]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079d6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d020      	beq.n	8007a28 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ea:	4a6a      	ldr	r2, [pc, #424]	; (8007b94 <I2C_ITError+0x25c>)
 80079ec:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fd fc1c 	bl	8005230 <HAL_DMA_Abort_IT>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f000 8089 	beq.w	8007b12 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f022 0201 	bic.w	r2, r2, #1
 8007a0e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2220      	movs	r2, #32
 8007a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a22:	4610      	mov	r0, r2
 8007a24:	4798      	blx	r3
 8007a26:	e074      	b.n	8007b12 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2c:	4a59      	ldr	r2, [pc, #356]	; (8007b94 <I2C_ITError+0x25c>)
 8007a2e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7fd fbfb 	bl	8005230 <HAL_DMA_Abort_IT>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d068      	beq.n	8007b12 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a4a:	2b40      	cmp	r3, #64	; 0x40
 8007a4c:	d10b      	bne.n	8007a66 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	691a      	ldr	r2, [r3, #16]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a58:	b2d2      	uxtb	r2, r2
 8007a5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a60:	1c5a      	adds	r2, r3, #1
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f022 0201 	bic.w	r2, r2, #1
 8007a74:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2220      	movs	r2, #32
 8007a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a88:	4610      	mov	r0, r2
 8007a8a:	4798      	blx	r3
 8007a8c:	e041      	b.n	8007b12 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b60      	cmp	r3, #96	; 0x60
 8007a98:	d125      	bne.n	8007ae6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2220      	movs	r2, #32
 8007a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab2:	2b40      	cmp	r3, #64	; 0x40
 8007ab4:	d10b      	bne.n	8007ace <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	691a      	ldr	r2, [r3, #16]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac0:	b2d2      	uxtb	r2, r2
 8007ac2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	1c5a      	adds	r2, r3, #1
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f022 0201 	bic.w	r2, r2, #1
 8007adc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f7fe feec 	bl	80068bc <HAL_I2C_AbortCpltCallback>
 8007ae4:	e015      	b.n	8007b12 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	695b      	ldr	r3, [r3, #20]
 8007aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af0:	2b40      	cmp	r3, #64	; 0x40
 8007af2:	d10b      	bne.n	8007b0c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	691a      	ldr	r2, [r3, #16]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afe:	b2d2      	uxtb	r2, r2
 8007b00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b06:	1c5a      	adds	r2, r3, #1
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f7fe fecb 	bl	80068a8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b16:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10e      	bne.n	8007b40 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d109      	bne.n	8007b40 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d104      	bne.n	8007b40 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d007      	beq.n	8007b50 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	685a      	ldr	r2, [r3, #4]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b4e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b56:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5c:	f003 0304 	and.w	r3, r3, #4
 8007b60:	2b04      	cmp	r3, #4
 8007b62:	d113      	bne.n	8007b8c <I2C_ITError+0x254>
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
 8007b66:	2b28      	cmp	r3, #40	; 0x28
 8007b68:	d110      	bne.n	8007b8c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a0a      	ldr	r2, [pc, #40]	; (8007b98 <I2C_ITError+0x260>)
 8007b6e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2220      	movs	r2, #32
 8007b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f7fe fe70 	bl	800686c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007b8c:	bf00      	nop
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	08007e3d 	.word	0x08007e3d
 8007b98:	ffff0000 	.word	0xffff0000

08007b9c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b088      	sub	sp, #32
 8007ba0:	af02      	add	r7, sp, #8
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	607a      	str	r2, [r7, #4]
 8007ba6:	603b      	str	r3, [r7, #0]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	2b08      	cmp	r3, #8
 8007bb6:	d006      	beq.n	8007bc6 <I2C_MasterRequestWrite+0x2a>
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d003      	beq.n	8007bc6 <I2C_MasterRequestWrite+0x2a>
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007bc4:	d108      	bne.n	8007bd8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bd4:	601a      	str	r2, [r3, #0]
 8007bd6:	e00b      	b.n	8007bf0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bdc:	2b12      	cmp	r3, #18
 8007bde:	d107      	bne.n	8007bf0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	9300      	str	r3, [sp, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f000 f9c5 	bl	8007f8c <I2C_WaitOnFlagUntilTimeout>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00d      	beq.n	8007c24 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c16:	d103      	bne.n	8007c20 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007c20:	2303      	movs	r3, #3
 8007c22:	e035      	b.n	8007c90 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c2c:	d108      	bne.n	8007c40 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007c2e:	897b      	ldrh	r3, [r7, #10]
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	461a      	mov	r2, r3
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007c3c:	611a      	str	r2, [r3, #16]
 8007c3e:	e01b      	b.n	8007c78 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007c40:	897b      	ldrh	r3, [r7, #10]
 8007c42:	11db      	asrs	r3, r3, #7
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	f003 0306 	and.w	r3, r3, #6
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	f063 030f 	orn	r3, r3, #15
 8007c50:	b2da      	uxtb	r2, r3
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	490e      	ldr	r1, [pc, #56]	; (8007c98 <I2C_MasterRequestWrite+0xfc>)
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f000 f9eb 	bl	800803a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d001      	beq.n	8007c6e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e010      	b.n	8007c90 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007c6e:	897b      	ldrh	r3, [r7, #10]
 8007c70:	b2da      	uxtb	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	4907      	ldr	r1, [pc, #28]	; (8007c9c <I2C_MasterRequestWrite+0x100>)
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f000 f9db 	bl	800803a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e000      	b.n	8007c90 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3718      	adds	r7, #24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	00010008 	.word	0x00010008
 8007c9c:	00010002 	.word	0x00010002

08007ca0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b088      	sub	sp, #32
 8007ca4:	af02      	add	r7, sp, #8
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	607a      	str	r2, [r7, #4]
 8007caa:	603b      	str	r3, [r7, #0]
 8007cac:	460b      	mov	r3, r1
 8007cae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007cc4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	2b08      	cmp	r3, #8
 8007cca:	d006      	beq.n	8007cda <I2C_MasterRequestRead+0x3a>
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d003      	beq.n	8007cda <I2C_MasterRequestRead+0x3a>
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007cd8:	d108      	bne.n	8007cec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ce8:	601a      	str	r2, [r3, #0]
 8007cea:	e00b      	b.n	8007d04 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf0:	2b11      	cmp	r3, #17
 8007cf2:	d107      	bne.n	8007d04 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f000 f93b 	bl	8007f8c <I2C_WaitOnFlagUntilTimeout>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00d      	beq.n	8007d38 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d2a:	d103      	bne.n	8007d34 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e079      	b.n	8007e2c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d40:	d108      	bne.n	8007d54 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007d42:	897b      	ldrh	r3, [r7, #10]
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	f043 0301 	orr.w	r3, r3, #1
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	611a      	str	r2, [r3, #16]
 8007d52:	e05f      	b.n	8007e14 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007d54:	897b      	ldrh	r3, [r7, #10]
 8007d56:	11db      	asrs	r3, r3, #7
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	f003 0306 	and.w	r3, r3, #6
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	f063 030f 	orn	r3, r3, #15
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	4930      	ldr	r1, [pc, #192]	; (8007e34 <I2C_MasterRequestRead+0x194>)
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f000 f961 	bl	800803a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e054      	b.n	8007e2c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007d82:	897b      	ldrh	r3, [r7, #10]
 8007d84:	b2da      	uxtb	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	4929      	ldr	r1, [pc, #164]	; (8007e38 <I2C_MasterRequestRead+0x198>)
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f000 f951 	bl	800803a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d001      	beq.n	8007da2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e044      	b.n	8007e2c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007da2:	2300      	movs	r3, #0
 8007da4:	613b      	str	r3, [r7, #16]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	695b      	ldr	r3, [r3, #20]
 8007dac:	613b      	str	r3, [r7, #16]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	613b      	str	r3, [r7, #16]
 8007db6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dc6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	9300      	str	r3, [sp, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f000 f8d9 	bl	8007f8c <I2C_WaitOnFlagUntilTimeout>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00d      	beq.n	8007dfc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dee:	d103      	bne.n	8007df8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007df6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	e017      	b.n	8007e2c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007dfc:	897b      	ldrh	r3, [r7, #10]
 8007dfe:	11db      	asrs	r3, r3, #7
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	f003 0306 	and.w	r3, r3, #6
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	f063 030e 	orn	r3, r3, #14
 8007e0c:	b2da      	uxtb	r2, r3
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	4907      	ldr	r1, [pc, #28]	; (8007e38 <I2C_MasterRequestRead+0x198>)
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f000 f90d 	bl	800803a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e000      	b.n	8007e2c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3718      	adds	r7, #24
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	00010008 	.word	0x00010008
 8007e38:	00010002 	.word	0x00010002

08007e3c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e44:	2300      	movs	r3, #0
 8007e46:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e54:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007e56:	4b4b      	ldr	r3, [pc, #300]	; (8007f84 <I2C_DMAAbort+0x148>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	08db      	lsrs	r3, r3, #3
 8007e5c:	4a4a      	ldr	r2, [pc, #296]	; (8007f88 <I2C_DMAAbort+0x14c>)
 8007e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e62:	0a1a      	lsrs	r2, r3, #8
 8007e64:	4613      	mov	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	00da      	lsls	r2, r3, #3
 8007e6c:	1ad3      	subs	r3, r2, r3
 8007e6e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d106      	bne.n	8007e84 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7a:	f043 0220 	orr.w	r2, r3, #32
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007e82:	e00a      	b.n	8007e9a <I2C_DMAAbort+0x5e>
    }
    count--;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	3b01      	subs	r3, #1
 8007e88:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e98:	d0ea      	beq.n	8007e70 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d003      	beq.n	8007eba <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ec8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d003      	beq.n	8007ee0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007edc:	2200      	movs	r2, #0
 8007ede:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d003      	beq.n	8007ef0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eec:	2200      	movs	r2, #0
 8007eee:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f022 0201 	bic.w	r2, r2, #1
 8007efe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	2b60      	cmp	r3, #96	; 0x60
 8007f0a:	d10e      	bne.n	8007f2a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	2220      	movs	r2, #32
 8007f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007f22:	6978      	ldr	r0, [r7, #20]
 8007f24:	f7fe fcca 	bl	80068bc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007f28:	e027      	b.n	8007f7a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f2a:	7cfb      	ldrb	r3, [r7, #19]
 8007f2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007f30:	2b28      	cmp	r3, #40	; 0x28
 8007f32:	d117      	bne.n	8007f64 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f042 0201 	orr.w	r2, r2, #1
 8007f42:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f52:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	2200      	movs	r2, #0
 8007f58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	2228      	movs	r2, #40	; 0x28
 8007f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007f62:	e007      	b.n	8007f74 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	2220      	movs	r2, #32
 8007f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007f74:	6978      	ldr	r0, [r7, #20]
 8007f76:	f7fe fc97 	bl	80068a8 <HAL_I2C_ErrorCallback>
}
 8007f7a:	bf00      	nop
 8007f7c:	3718      	adds	r7, #24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	20000134 	.word	0x20000134
 8007f88:	14f8b589 	.word	0x14f8b589

08007f8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	603b      	str	r3, [r7, #0]
 8007f98:	4613      	mov	r3, r2
 8007f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f9c:	e025      	b.n	8007fea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fa4:	d021      	beq.n	8007fea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fa6:	f7fc fe8b 	bl	8004cc0 <HAL_GetTick>
 8007faa:	4602      	mov	r2, r0
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	1ad3      	subs	r3, r2, r3
 8007fb0:	683a      	ldr	r2, [r7, #0]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d302      	bcc.n	8007fbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d116      	bne.n	8007fea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2220      	movs	r2, #32
 8007fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd6:	f043 0220 	orr.w	r2, r3, #32
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e023      	b.n	8008032 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	0c1b      	lsrs	r3, r3, #16
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d10d      	bne.n	8008010 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	43da      	mvns	r2, r3
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	4013      	ands	r3, r2
 8008000:	b29b      	uxth	r3, r3
 8008002:	2b00      	cmp	r3, #0
 8008004:	bf0c      	ite	eq
 8008006:	2301      	moveq	r3, #1
 8008008:	2300      	movne	r3, #0
 800800a:	b2db      	uxtb	r3, r3
 800800c:	461a      	mov	r2, r3
 800800e:	e00c      	b.n	800802a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	43da      	mvns	r2, r3
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	4013      	ands	r3, r2
 800801c:	b29b      	uxth	r3, r3
 800801e:	2b00      	cmp	r3, #0
 8008020:	bf0c      	ite	eq
 8008022:	2301      	moveq	r3, #1
 8008024:	2300      	movne	r3, #0
 8008026:	b2db      	uxtb	r3, r3
 8008028:	461a      	mov	r2, r3
 800802a:	79fb      	ldrb	r3, [r7, #7]
 800802c:	429a      	cmp	r2, r3
 800802e:	d0b6      	beq.n	8007f9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b084      	sub	sp, #16
 800803e:	af00      	add	r7, sp, #0
 8008040:	60f8      	str	r0, [r7, #12]
 8008042:	60b9      	str	r1, [r7, #8]
 8008044:	607a      	str	r2, [r7, #4]
 8008046:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008048:	e051      	b.n	80080ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	695b      	ldr	r3, [r3, #20]
 8008050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008058:	d123      	bne.n	80080a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008068:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008072:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2200      	movs	r2, #0
 8008078:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2220      	movs	r2, #32
 800807e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808e:	f043 0204 	orr.w	r2, r3, #4
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e046      	b.n	8008130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a8:	d021      	beq.n	80080ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080aa:	f7fc fe09 	bl	8004cc0 <HAL_GetTick>
 80080ae:	4602      	mov	r2, r0
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d302      	bcc.n	80080c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d116      	bne.n	80080ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2200      	movs	r2, #0
 80080c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2220      	movs	r2, #32
 80080ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080da:	f043 0220 	orr.w	r2, r3, #32
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e020      	b.n	8008130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	0c1b      	lsrs	r3, r3, #16
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d10c      	bne.n	8008112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	43da      	mvns	r2, r3
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	4013      	ands	r3, r2
 8008104:	b29b      	uxth	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	bf14      	ite	ne
 800810a:	2301      	movne	r3, #1
 800810c:	2300      	moveq	r3, #0
 800810e:	b2db      	uxtb	r3, r3
 8008110:	e00b      	b.n	800812a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	43da      	mvns	r2, r3
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	4013      	ands	r3, r2
 800811e:	b29b      	uxth	r3, r3
 8008120:	2b00      	cmp	r3, #0
 8008122:	bf14      	ite	ne
 8008124:	2301      	movne	r3, #1
 8008126:	2300      	moveq	r3, #0
 8008128:	b2db      	uxtb	r3, r3
 800812a:	2b00      	cmp	r3, #0
 800812c:	d18d      	bne.n	800804a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008144:	e02d      	b.n	80081a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f000 f900 	bl	800834c <I2C_IsAcknowledgeFailed>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d001      	beq.n	8008156 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	e02d      	b.n	80081b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800815c:	d021      	beq.n	80081a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800815e:	f7fc fdaf 	bl	8004cc0 <HAL_GetTick>
 8008162:	4602      	mov	r2, r0
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	1ad3      	subs	r3, r2, r3
 8008168:	68ba      	ldr	r2, [r7, #8]
 800816a:	429a      	cmp	r2, r3
 800816c:	d302      	bcc.n	8008174 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d116      	bne.n	80081a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2220      	movs	r2, #32
 800817e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818e:	f043 0220 	orr.w	r2, r3, #32
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e007      	b.n	80081b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	695b      	ldr	r3, [r3, #20]
 80081a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ac:	2b80      	cmp	r3, #128	; 0x80
 80081ae:	d1ca      	bne.n	8008146 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b084      	sub	sp, #16
 80081be:	af00      	add	r7, sp, #0
 80081c0:	60f8      	str	r0, [r7, #12]
 80081c2:	60b9      	str	r1, [r7, #8]
 80081c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80081c6:	e02d      	b.n	8008224 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f000 f8bf 	bl	800834c <I2C_IsAcknowledgeFailed>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	e02d      	b.n	8008234 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081de:	d021      	beq.n	8008224 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081e0:	f7fc fd6e 	bl	8004cc0 <HAL_GetTick>
 80081e4:	4602      	mov	r2, r0
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	68ba      	ldr	r2, [r7, #8]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d302      	bcc.n	80081f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d116      	bne.n	8008224 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2220      	movs	r2, #32
 8008200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008210:	f043 0220 	orr.w	r2, r3, #32
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	e007      	b.n	8008234 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	f003 0304 	and.w	r3, r3, #4
 800822e:	2b04      	cmp	r3, #4
 8008230:	d1ca      	bne.n	80081c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008232:	2300      	movs	r3, #0
}
 8008234:	4618      	mov	r0, r3
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800823c:	b480      	push	{r7}
 800823e:	b085      	sub	sp, #20
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008244:	2300      	movs	r3, #0
 8008246:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008248:	4b13      	ldr	r3, [pc, #76]	; (8008298 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	08db      	lsrs	r3, r3, #3
 800824e:	4a13      	ldr	r2, [pc, #76]	; (800829c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008250:	fba2 2303 	umull	r2, r3, r2, r3
 8008254:	0a1a      	lsrs	r2, r3, #8
 8008256:	4613      	mov	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	4413      	add	r3, r2
 800825c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	3b01      	subs	r3, #1
 8008262:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d107      	bne.n	800827a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826e:	f043 0220 	orr.w	r2, r3, #32
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e008      	b.n	800828c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008288:	d0e9      	beq.n	800825e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3714      	adds	r7, #20
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr
 8008298:	20000134 	.word	0x20000134
 800829c:	14f8b589 	.word	0x14f8b589

080082a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80082ac:	e042      	b.n	8008334 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	695b      	ldr	r3, [r3, #20]
 80082b4:	f003 0310 	and.w	r3, r3, #16
 80082b8:	2b10      	cmp	r3, #16
 80082ba:	d119      	bne.n	80082f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f06f 0210 	mvn.w	r2, #16
 80082c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2220      	movs	r2, #32
 80082d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e029      	b.n	8008344 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082f0:	f7fc fce6 	bl	8004cc0 <HAL_GetTick>
 80082f4:	4602      	mov	r2, r0
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d302      	bcc.n	8008306 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d116      	bne.n	8008334 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2220      	movs	r2, #32
 8008310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008320:	f043 0220 	orr.w	r2, r3, #32
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2200      	movs	r2, #0
 800832c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	e007      	b.n	8008344 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833e:	2b40      	cmp	r3, #64	; 0x40
 8008340:	d1b5      	bne.n	80082ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	695b      	ldr	r3, [r3, #20]
 800835a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800835e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008362:	d11b      	bne.n	800839c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800836c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2220      	movs	r2, #32
 8008378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008388:	f043 0204 	orr.w	r2, r3, #4
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	e000      	b.n	800839e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	370c      	adds	r7, #12
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b083      	sub	sp, #12
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80083ba:	d103      	bne.n	80083c4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80083c2:	e007      	b.n	80083d4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80083cc:	d102      	bne.n	80083d4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2208      	movs	r2, #8
 80083d2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80083d4:	bf00      	nop
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b086      	sub	sp, #24
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d101      	bne.n	80083f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e267      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d075      	beq.n	80084ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80083fe:	4b88      	ldr	r3, [pc, #544]	; (8008620 <HAL_RCC_OscConfig+0x240>)
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	f003 030c 	and.w	r3, r3, #12
 8008406:	2b04      	cmp	r3, #4
 8008408:	d00c      	beq.n	8008424 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800840a:	4b85      	ldr	r3, [pc, #532]	; (8008620 <HAL_RCC_OscConfig+0x240>)
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008412:	2b08      	cmp	r3, #8
 8008414:	d112      	bne.n	800843c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008416:	4b82      	ldr	r3, [pc, #520]	; (8008620 <HAL_RCC_OscConfig+0x240>)
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800841e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008422:	d10b      	bne.n	800843c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008424:	4b7e      	ldr	r3, [pc, #504]	; (8008620 <HAL_RCC_OscConfig+0x240>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800842c:	2b00      	cmp	r3, #0
 800842e:	d05b      	beq.n	80084e8 <HAL_RCC_OscConfig+0x108>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d157      	bne.n	80084e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	e242      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008444:	d106      	bne.n	8008454 <HAL_RCC_OscConfig+0x74>
 8008446:	4b76      	ldr	r3, [pc, #472]	; (8008620 <HAL_RCC_OscConfig+0x240>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a75      	ldr	r2, [pc, #468]	; (8008620 <HAL_RCC_OscConfig+0x240>)
 800844c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008450:	6013      	str	r3, [r2, #0]
 8008452:	e01d      	b.n	8008490 <HAL_RCC_OscConfig+0xb0>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800845c:	d10c      	bne.n	8008478 <HAL_RCC_OscConfig+0x98>
 800845e:	4b70      	ldr	r3, [pc, #448]	; (8008620 <HAL_RCC_OscConfig+0x240>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a6f      	ldr	r2, [pc, #444]	; (8008620 <HAL_RCC_OscConfig+0x240>)
 8008464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008468:	6013      	str	r3, [r2, #0]
 800846a:	4b6d      	ldr	r3, [pc, #436]	; (8008620 <HAL_RCC_OscConfig+0x240>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a6c      	ldr	r2, [pc, #432]	; (8008620 <HAL_RCC_OscConfig+0x240>)
 8008470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008474:	6013      	str	r3, [r2, #0]
 8008476:	e00b      	b.n	8008490 <HAL_RCC_OscConfig+0xb0>
 8008478:	4b69      	ldr	r3, [pc, #420]	; (8008620 <HAL_RCC_OscConfig+0x240>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a68      	ldr	r2, [pc, #416]	; (8008620 <HAL_RCC_OscConfig+0x240>)
 800847e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008482:	6013      	str	r3, [r2, #0]
 8008484:	4b66      	ldr	r3, [pc, #408]	; (8008620 <HAL_RCC_OscConfig+0x240>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a65      	ldr	r2, [pc, #404]	; (8008620 <HAL_RCC_OscConfig+0x240>)
 800848a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800848e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d013      	beq.n	80084c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008498:	f7fc fc12 	bl	8004cc0 <HAL_GetTick>
 800849c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800849e:	e008      	b.n	80084b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084a0:	f7fc fc0e 	bl	8004cc0 <HAL_GetTick>
 80084a4:	4602      	mov	r2, r0
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	2b64      	cmp	r3, #100	; 0x64
 80084ac:	d901      	bls.n	80084b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e207      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084b2:	4b5b      	ldr	r3, [pc, #364]	; (8008620 <HAL_RCC_OscConfig+0x240>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d0f0      	beq.n	80084a0 <HAL_RCC_OscConfig+0xc0>
 80084be:	e014      	b.n	80084ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084c0:	f7fc fbfe 	bl	8004cc0 <HAL_GetTick>
 80084c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084c6:	e008      	b.n	80084da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084c8:	f7fc fbfa 	bl	8004cc0 <HAL_GetTick>
 80084cc:	4602      	mov	r2, r0
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	2b64      	cmp	r3, #100	; 0x64
 80084d4:	d901      	bls.n	80084da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80084d6:	2303      	movs	r3, #3
 80084d8:	e1f3      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084da:	4b51      	ldr	r3, [pc, #324]	; (8008620 <HAL_RCC_OscConfig+0x240>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1f0      	bne.n	80084c8 <HAL_RCC_OscConfig+0xe8>
 80084e6:	e000      	b.n	80084ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 0302 	and.w	r3, r3, #2
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d063      	beq.n	80085be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80084f6:	4b4a      	ldr	r3, [pc, #296]	; (8008620 <HAL_RCC_OscConfig+0x240>)
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f003 030c 	and.w	r3, r3, #12
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00b      	beq.n	800851a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008502:	4b47      	ldr	r3, [pc, #284]	; (8008620 <HAL_RCC_OscConfig+0x240>)
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800850a:	2b08      	cmp	r3, #8
 800850c:	d11c      	bne.n	8008548 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800850e:	4b44      	ldr	r3, [pc, #272]	; (8008620 <HAL_RCC_OscConfig+0x240>)
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008516:	2b00      	cmp	r3, #0
 8008518:	d116      	bne.n	8008548 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800851a:	4b41      	ldr	r3, [pc, #260]	; (8008620 <HAL_RCC_OscConfig+0x240>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 0302 	and.w	r3, r3, #2
 8008522:	2b00      	cmp	r3, #0
 8008524:	d005      	beq.n	8008532 <HAL_RCC_OscConfig+0x152>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	2b01      	cmp	r3, #1
 800852c:	d001      	beq.n	8008532 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e1c7      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008532:	4b3b      	ldr	r3, [pc, #236]	; (8008620 <HAL_RCC_OscConfig+0x240>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	00db      	lsls	r3, r3, #3
 8008540:	4937      	ldr	r1, [pc, #220]	; (8008620 <HAL_RCC_OscConfig+0x240>)
 8008542:	4313      	orrs	r3, r2
 8008544:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008546:	e03a      	b.n	80085be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d020      	beq.n	8008592 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008550:	4b34      	ldr	r3, [pc, #208]	; (8008624 <HAL_RCC_OscConfig+0x244>)
 8008552:	2201      	movs	r2, #1
 8008554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008556:	f7fc fbb3 	bl	8004cc0 <HAL_GetTick>
 800855a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800855c:	e008      	b.n	8008570 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800855e:	f7fc fbaf 	bl	8004cc0 <HAL_GetTick>
 8008562:	4602      	mov	r2, r0
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	2b02      	cmp	r3, #2
 800856a:	d901      	bls.n	8008570 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800856c:	2303      	movs	r3, #3
 800856e:	e1a8      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008570:	4b2b      	ldr	r3, [pc, #172]	; (8008620 <HAL_RCC_OscConfig+0x240>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 0302 	and.w	r3, r3, #2
 8008578:	2b00      	cmp	r3, #0
 800857a:	d0f0      	beq.n	800855e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800857c:	4b28      	ldr	r3, [pc, #160]	; (8008620 <HAL_RCC_OscConfig+0x240>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	00db      	lsls	r3, r3, #3
 800858a:	4925      	ldr	r1, [pc, #148]	; (8008620 <HAL_RCC_OscConfig+0x240>)
 800858c:	4313      	orrs	r3, r2
 800858e:	600b      	str	r3, [r1, #0]
 8008590:	e015      	b.n	80085be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008592:	4b24      	ldr	r3, [pc, #144]	; (8008624 <HAL_RCC_OscConfig+0x244>)
 8008594:	2200      	movs	r2, #0
 8008596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008598:	f7fc fb92 	bl	8004cc0 <HAL_GetTick>
 800859c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800859e:	e008      	b.n	80085b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80085a0:	f7fc fb8e 	bl	8004cc0 <HAL_GetTick>
 80085a4:	4602      	mov	r2, r0
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d901      	bls.n	80085b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80085ae:	2303      	movs	r3, #3
 80085b0:	e187      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085b2:	4b1b      	ldr	r3, [pc, #108]	; (8008620 <HAL_RCC_OscConfig+0x240>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f003 0302 	and.w	r3, r3, #2
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1f0      	bne.n	80085a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 0308 	and.w	r3, r3, #8
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d036      	beq.n	8008638 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d016      	beq.n	8008600 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085d2:	4b15      	ldr	r3, [pc, #84]	; (8008628 <HAL_RCC_OscConfig+0x248>)
 80085d4:	2201      	movs	r2, #1
 80085d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085d8:	f7fc fb72 	bl	8004cc0 <HAL_GetTick>
 80085dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085de:	e008      	b.n	80085f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085e0:	f7fc fb6e 	bl	8004cc0 <HAL_GetTick>
 80085e4:	4602      	mov	r2, r0
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d901      	bls.n	80085f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e167      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085f2:	4b0b      	ldr	r3, [pc, #44]	; (8008620 <HAL_RCC_OscConfig+0x240>)
 80085f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085f6:	f003 0302 	and.w	r3, r3, #2
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d0f0      	beq.n	80085e0 <HAL_RCC_OscConfig+0x200>
 80085fe:	e01b      	b.n	8008638 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008600:	4b09      	ldr	r3, [pc, #36]	; (8008628 <HAL_RCC_OscConfig+0x248>)
 8008602:	2200      	movs	r2, #0
 8008604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008606:	f7fc fb5b 	bl	8004cc0 <HAL_GetTick>
 800860a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800860c:	e00e      	b.n	800862c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800860e:	f7fc fb57 	bl	8004cc0 <HAL_GetTick>
 8008612:	4602      	mov	r2, r0
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	1ad3      	subs	r3, r2, r3
 8008618:	2b02      	cmp	r3, #2
 800861a:	d907      	bls.n	800862c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800861c:	2303      	movs	r3, #3
 800861e:	e150      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
 8008620:	40023800 	.word	0x40023800
 8008624:	42470000 	.word	0x42470000
 8008628:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800862c:	4b88      	ldr	r3, [pc, #544]	; (8008850 <HAL_RCC_OscConfig+0x470>)
 800862e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008630:	f003 0302 	and.w	r3, r3, #2
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1ea      	bne.n	800860e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 0304 	and.w	r3, r3, #4
 8008640:	2b00      	cmp	r3, #0
 8008642:	f000 8097 	beq.w	8008774 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008646:	2300      	movs	r3, #0
 8008648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800864a:	4b81      	ldr	r3, [pc, #516]	; (8008850 <HAL_RCC_OscConfig+0x470>)
 800864c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800864e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10f      	bne.n	8008676 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008656:	2300      	movs	r3, #0
 8008658:	60bb      	str	r3, [r7, #8]
 800865a:	4b7d      	ldr	r3, [pc, #500]	; (8008850 <HAL_RCC_OscConfig+0x470>)
 800865c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865e:	4a7c      	ldr	r2, [pc, #496]	; (8008850 <HAL_RCC_OscConfig+0x470>)
 8008660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008664:	6413      	str	r3, [r2, #64]	; 0x40
 8008666:	4b7a      	ldr	r3, [pc, #488]	; (8008850 <HAL_RCC_OscConfig+0x470>)
 8008668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800866e:	60bb      	str	r3, [r7, #8]
 8008670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008672:	2301      	movs	r3, #1
 8008674:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008676:	4b77      	ldr	r3, [pc, #476]	; (8008854 <HAL_RCC_OscConfig+0x474>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800867e:	2b00      	cmp	r3, #0
 8008680:	d118      	bne.n	80086b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008682:	4b74      	ldr	r3, [pc, #464]	; (8008854 <HAL_RCC_OscConfig+0x474>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a73      	ldr	r2, [pc, #460]	; (8008854 <HAL_RCC_OscConfig+0x474>)
 8008688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800868c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800868e:	f7fc fb17 	bl	8004cc0 <HAL_GetTick>
 8008692:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008694:	e008      	b.n	80086a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008696:	f7fc fb13 	bl	8004cc0 <HAL_GetTick>
 800869a:	4602      	mov	r2, r0
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d901      	bls.n	80086a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e10c      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086a8:	4b6a      	ldr	r3, [pc, #424]	; (8008854 <HAL_RCC_OscConfig+0x474>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d0f0      	beq.n	8008696 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d106      	bne.n	80086ca <HAL_RCC_OscConfig+0x2ea>
 80086bc:	4b64      	ldr	r3, [pc, #400]	; (8008850 <HAL_RCC_OscConfig+0x470>)
 80086be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086c0:	4a63      	ldr	r2, [pc, #396]	; (8008850 <HAL_RCC_OscConfig+0x470>)
 80086c2:	f043 0301 	orr.w	r3, r3, #1
 80086c6:	6713      	str	r3, [r2, #112]	; 0x70
 80086c8:	e01c      	b.n	8008704 <HAL_RCC_OscConfig+0x324>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	2b05      	cmp	r3, #5
 80086d0:	d10c      	bne.n	80086ec <HAL_RCC_OscConfig+0x30c>
 80086d2:	4b5f      	ldr	r3, [pc, #380]	; (8008850 <HAL_RCC_OscConfig+0x470>)
 80086d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086d6:	4a5e      	ldr	r2, [pc, #376]	; (8008850 <HAL_RCC_OscConfig+0x470>)
 80086d8:	f043 0304 	orr.w	r3, r3, #4
 80086dc:	6713      	str	r3, [r2, #112]	; 0x70
 80086de:	4b5c      	ldr	r3, [pc, #368]	; (8008850 <HAL_RCC_OscConfig+0x470>)
 80086e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086e2:	4a5b      	ldr	r2, [pc, #364]	; (8008850 <HAL_RCC_OscConfig+0x470>)
 80086e4:	f043 0301 	orr.w	r3, r3, #1
 80086e8:	6713      	str	r3, [r2, #112]	; 0x70
 80086ea:	e00b      	b.n	8008704 <HAL_RCC_OscConfig+0x324>
 80086ec:	4b58      	ldr	r3, [pc, #352]	; (8008850 <HAL_RCC_OscConfig+0x470>)
 80086ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086f0:	4a57      	ldr	r2, [pc, #348]	; (8008850 <HAL_RCC_OscConfig+0x470>)
 80086f2:	f023 0301 	bic.w	r3, r3, #1
 80086f6:	6713      	str	r3, [r2, #112]	; 0x70
 80086f8:	4b55      	ldr	r3, [pc, #340]	; (8008850 <HAL_RCC_OscConfig+0x470>)
 80086fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086fc:	4a54      	ldr	r2, [pc, #336]	; (8008850 <HAL_RCC_OscConfig+0x470>)
 80086fe:	f023 0304 	bic.w	r3, r3, #4
 8008702:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d015      	beq.n	8008738 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800870c:	f7fc fad8 	bl	8004cc0 <HAL_GetTick>
 8008710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008712:	e00a      	b.n	800872a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008714:	f7fc fad4 	bl	8004cc0 <HAL_GetTick>
 8008718:	4602      	mov	r2, r0
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008722:	4293      	cmp	r3, r2
 8008724:	d901      	bls.n	800872a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	e0cb      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800872a:	4b49      	ldr	r3, [pc, #292]	; (8008850 <HAL_RCC_OscConfig+0x470>)
 800872c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800872e:	f003 0302 	and.w	r3, r3, #2
 8008732:	2b00      	cmp	r3, #0
 8008734:	d0ee      	beq.n	8008714 <HAL_RCC_OscConfig+0x334>
 8008736:	e014      	b.n	8008762 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008738:	f7fc fac2 	bl	8004cc0 <HAL_GetTick>
 800873c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800873e:	e00a      	b.n	8008756 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008740:	f7fc fabe 	bl	8004cc0 <HAL_GetTick>
 8008744:	4602      	mov	r2, r0
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	f241 3288 	movw	r2, #5000	; 0x1388
 800874e:	4293      	cmp	r3, r2
 8008750:	d901      	bls.n	8008756 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e0b5      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008756:	4b3e      	ldr	r3, [pc, #248]	; (8008850 <HAL_RCC_OscConfig+0x470>)
 8008758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800875a:	f003 0302 	and.w	r3, r3, #2
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1ee      	bne.n	8008740 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008762:	7dfb      	ldrb	r3, [r7, #23]
 8008764:	2b01      	cmp	r3, #1
 8008766:	d105      	bne.n	8008774 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008768:	4b39      	ldr	r3, [pc, #228]	; (8008850 <HAL_RCC_OscConfig+0x470>)
 800876a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876c:	4a38      	ldr	r2, [pc, #224]	; (8008850 <HAL_RCC_OscConfig+0x470>)
 800876e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008772:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	2b00      	cmp	r3, #0
 800877a:	f000 80a1 	beq.w	80088c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800877e:	4b34      	ldr	r3, [pc, #208]	; (8008850 <HAL_RCC_OscConfig+0x470>)
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f003 030c 	and.w	r3, r3, #12
 8008786:	2b08      	cmp	r3, #8
 8008788:	d05c      	beq.n	8008844 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	699b      	ldr	r3, [r3, #24]
 800878e:	2b02      	cmp	r3, #2
 8008790:	d141      	bne.n	8008816 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008792:	4b31      	ldr	r3, [pc, #196]	; (8008858 <HAL_RCC_OscConfig+0x478>)
 8008794:	2200      	movs	r2, #0
 8008796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008798:	f7fc fa92 	bl	8004cc0 <HAL_GetTick>
 800879c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800879e:	e008      	b.n	80087b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087a0:	f7fc fa8e 	bl	8004cc0 <HAL_GetTick>
 80087a4:	4602      	mov	r2, r0
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d901      	bls.n	80087b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80087ae:	2303      	movs	r3, #3
 80087b0:	e087      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087b2:	4b27      	ldr	r3, [pc, #156]	; (8008850 <HAL_RCC_OscConfig+0x470>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1f0      	bne.n	80087a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	69da      	ldr	r2, [r3, #28]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	431a      	orrs	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087cc:	019b      	lsls	r3, r3, #6
 80087ce:	431a      	orrs	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d4:	085b      	lsrs	r3, r3, #1
 80087d6:	3b01      	subs	r3, #1
 80087d8:	041b      	lsls	r3, r3, #16
 80087da:	431a      	orrs	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e0:	061b      	lsls	r3, r3, #24
 80087e2:	491b      	ldr	r1, [pc, #108]	; (8008850 <HAL_RCC_OscConfig+0x470>)
 80087e4:	4313      	orrs	r3, r2
 80087e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087e8:	4b1b      	ldr	r3, [pc, #108]	; (8008858 <HAL_RCC_OscConfig+0x478>)
 80087ea:	2201      	movs	r2, #1
 80087ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087ee:	f7fc fa67 	bl	8004cc0 <HAL_GetTick>
 80087f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087f4:	e008      	b.n	8008808 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087f6:	f7fc fa63 	bl	8004cc0 <HAL_GetTick>
 80087fa:	4602      	mov	r2, r0
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	2b02      	cmp	r3, #2
 8008802:	d901      	bls.n	8008808 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008804:	2303      	movs	r3, #3
 8008806:	e05c      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008808:	4b11      	ldr	r3, [pc, #68]	; (8008850 <HAL_RCC_OscConfig+0x470>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008810:	2b00      	cmp	r3, #0
 8008812:	d0f0      	beq.n	80087f6 <HAL_RCC_OscConfig+0x416>
 8008814:	e054      	b.n	80088c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008816:	4b10      	ldr	r3, [pc, #64]	; (8008858 <HAL_RCC_OscConfig+0x478>)
 8008818:	2200      	movs	r2, #0
 800881a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800881c:	f7fc fa50 	bl	8004cc0 <HAL_GetTick>
 8008820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008822:	e008      	b.n	8008836 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008824:	f7fc fa4c 	bl	8004cc0 <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	2b02      	cmp	r3, #2
 8008830:	d901      	bls.n	8008836 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e045      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008836:	4b06      	ldr	r3, [pc, #24]	; (8008850 <HAL_RCC_OscConfig+0x470>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1f0      	bne.n	8008824 <HAL_RCC_OscConfig+0x444>
 8008842:	e03d      	b.n	80088c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	699b      	ldr	r3, [r3, #24]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d107      	bne.n	800885c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	e038      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
 8008850:	40023800 	.word	0x40023800
 8008854:	40007000 	.word	0x40007000
 8008858:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800885c:	4b1b      	ldr	r3, [pc, #108]	; (80088cc <HAL_RCC_OscConfig+0x4ec>)
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d028      	beq.n	80088bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008874:	429a      	cmp	r2, r3
 8008876:	d121      	bne.n	80088bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008882:	429a      	cmp	r2, r3
 8008884:	d11a      	bne.n	80088bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008886:	68fa      	ldr	r2, [r7, #12]
 8008888:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800888c:	4013      	ands	r3, r2
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008892:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008894:	4293      	cmp	r3, r2
 8008896:	d111      	bne.n	80088bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a2:	085b      	lsrs	r3, r3, #1
 80088a4:	3b01      	subs	r3, #1
 80088a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d107      	bne.n	80088bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d001      	beq.n	80088c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e000      	b.n	80088c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3718      	adds	r7, #24
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	40023800 	.word	0x40023800

080088d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d101      	bne.n	80088e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e0cc      	b.n	8008a7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80088e4:	4b68      	ldr	r3, [pc, #416]	; (8008a88 <HAL_RCC_ClockConfig+0x1b8>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 0307 	and.w	r3, r3, #7
 80088ec:	683a      	ldr	r2, [r7, #0]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d90c      	bls.n	800890c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088f2:	4b65      	ldr	r3, [pc, #404]	; (8008a88 <HAL_RCC_ClockConfig+0x1b8>)
 80088f4:	683a      	ldr	r2, [r7, #0]
 80088f6:	b2d2      	uxtb	r2, r2
 80088f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088fa:	4b63      	ldr	r3, [pc, #396]	; (8008a88 <HAL_RCC_ClockConfig+0x1b8>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 0307 	and.w	r3, r3, #7
 8008902:	683a      	ldr	r2, [r7, #0]
 8008904:	429a      	cmp	r2, r3
 8008906:	d001      	beq.n	800890c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	e0b8      	b.n	8008a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 0302 	and.w	r3, r3, #2
 8008914:	2b00      	cmp	r3, #0
 8008916:	d020      	beq.n	800895a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f003 0304 	and.w	r3, r3, #4
 8008920:	2b00      	cmp	r3, #0
 8008922:	d005      	beq.n	8008930 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008924:	4b59      	ldr	r3, [pc, #356]	; (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	4a58      	ldr	r2, [pc, #352]	; (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 800892a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800892e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 0308 	and.w	r3, r3, #8
 8008938:	2b00      	cmp	r3, #0
 800893a:	d005      	beq.n	8008948 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800893c:	4b53      	ldr	r3, [pc, #332]	; (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	4a52      	ldr	r2, [pc, #328]	; (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 8008942:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008946:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008948:	4b50      	ldr	r3, [pc, #320]	; (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	494d      	ldr	r1, [pc, #308]	; (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 8008956:	4313      	orrs	r3, r2
 8008958:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 0301 	and.w	r3, r3, #1
 8008962:	2b00      	cmp	r3, #0
 8008964:	d044      	beq.n	80089f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	2b01      	cmp	r3, #1
 800896c:	d107      	bne.n	800897e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800896e:	4b47      	ldr	r3, [pc, #284]	; (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008976:	2b00      	cmp	r3, #0
 8008978:	d119      	bne.n	80089ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	e07f      	b.n	8008a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	2b02      	cmp	r3, #2
 8008984:	d003      	beq.n	800898e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800898a:	2b03      	cmp	r3, #3
 800898c:	d107      	bne.n	800899e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800898e:	4b3f      	ldr	r3, [pc, #252]	; (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d109      	bne.n	80089ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	e06f      	b.n	8008a7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800899e:	4b3b      	ldr	r3, [pc, #236]	; (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f003 0302 	and.w	r3, r3, #2
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d101      	bne.n	80089ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	e067      	b.n	8008a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80089ae:	4b37      	ldr	r3, [pc, #220]	; (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	f023 0203 	bic.w	r2, r3, #3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	4934      	ldr	r1, [pc, #208]	; (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 80089bc:	4313      	orrs	r3, r2
 80089be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80089c0:	f7fc f97e 	bl	8004cc0 <HAL_GetTick>
 80089c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089c6:	e00a      	b.n	80089de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089c8:	f7fc f97a 	bl	8004cc0 <HAL_GetTick>
 80089cc:	4602      	mov	r2, r0
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d901      	bls.n	80089de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80089da:	2303      	movs	r3, #3
 80089dc:	e04f      	b.n	8008a7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089de:	4b2b      	ldr	r3, [pc, #172]	; (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	f003 020c 	and.w	r2, r3, #12
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d1eb      	bne.n	80089c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80089f0:	4b25      	ldr	r3, [pc, #148]	; (8008a88 <HAL_RCC_ClockConfig+0x1b8>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 0307 	and.w	r3, r3, #7
 80089f8:	683a      	ldr	r2, [r7, #0]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d20c      	bcs.n	8008a18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089fe:	4b22      	ldr	r3, [pc, #136]	; (8008a88 <HAL_RCC_ClockConfig+0x1b8>)
 8008a00:	683a      	ldr	r2, [r7, #0]
 8008a02:	b2d2      	uxtb	r2, r2
 8008a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a06:	4b20      	ldr	r3, [pc, #128]	; (8008a88 <HAL_RCC_ClockConfig+0x1b8>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 0307 	and.w	r3, r3, #7
 8008a0e:	683a      	ldr	r2, [r7, #0]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d001      	beq.n	8008a18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	e032      	b.n	8008a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f003 0304 	and.w	r3, r3, #4
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d008      	beq.n	8008a36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a24:	4b19      	ldr	r3, [pc, #100]	; (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	4916      	ldr	r1, [pc, #88]	; (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 8008a32:	4313      	orrs	r3, r2
 8008a34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 0308 	and.w	r3, r3, #8
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d009      	beq.n	8008a56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a42:	4b12      	ldr	r3, [pc, #72]	; (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	00db      	lsls	r3, r3, #3
 8008a50:	490e      	ldr	r1, [pc, #56]	; (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 8008a52:	4313      	orrs	r3, r2
 8008a54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008a56:	f000 f821 	bl	8008a9c <HAL_RCC_GetSysClockFreq>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	4b0b      	ldr	r3, [pc, #44]	; (8008a8c <HAL_RCC_ClockConfig+0x1bc>)
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	091b      	lsrs	r3, r3, #4
 8008a62:	f003 030f 	and.w	r3, r3, #15
 8008a66:	490a      	ldr	r1, [pc, #40]	; (8008a90 <HAL_RCC_ClockConfig+0x1c0>)
 8008a68:	5ccb      	ldrb	r3, [r1, r3]
 8008a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a6e:	4a09      	ldr	r2, [pc, #36]	; (8008a94 <HAL_RCC_ClockConfig+0x1c4>)
 8008a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008a72:	4b09      	ldr	r3, [pc, #36]	; (8008a98 <HAL_RCC_ClockConfig+0x1c8>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fc f8de 	bl	8004c38 <HAL_InitTick>

  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	40023c00 	.word	0x40023c00
 8008a8c:	40023800 	.word	0x40023800
 8008a90:	0800be70 	.word	0x0800be70
 8008a94:	20000134 	.word	0x20000134
 8008a98:	20000138 	.word	0x20000138

08008a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008aa0:	b094      	sub	sp, #80	; 0x50
 8008aa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	647b      	str	r3, [r7, #68]	; 0x44
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008aac:	2300      	movs	r3, #0
 8008aae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ab4:	4b79      	ldr	r3, [pc, #484]	; (8008c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	f003 030c 	and.w	r3, r3, #12
 8008abc:	2b08      	cmp	r3, #8
 8008abe:	d00d      	beq.n	8008adc <HAL_RCC_GetSysClockFreq+0x40>
 8008ac0:	2b08      	cmp	r3, #8
 8008ac2:	f200 80e1 	bhi.w	8008c88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d002      	beq.n	8008ad0 <HAL_RCC_GetSysClockFreq+0x34>
 8008aca:	2b04      	cmp	r3, #4
 8008acc:	d003      	beq.n	8008ad6 <HAL_RCC_GetSysClockFreq+0x3a>
 8008ace:	e0db      	b.n	8008c88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ad0:	4b73      	ldr	r3, [pc, #460]	; (8008ca0 <HAL_RCC_GetSysClockFreq+0x204>)
 8008ad2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008ad4:	e0db      	b.n	8008c8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ad6:	4b73      	ldr	r3, [pc, #460]	; (8008ca4 <HAL_RCC_GetSysClockFreq+0x208>)
 8008ad8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008ada:	e0d8      	b.n	8008c8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008adc:	4b6f      	ldr	r3, [pc, #444]	; (8008c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ae4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008ae6:	4b6d      	ldr	r3, [pc, #436]	; (8008c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d063      	beq.n	8008bba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008af2:	4b6a      	ldr	r3, [pc, #424]	; (8008c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	099b      	lsrs	r3, r3, #6
 8008af8:	2200      	movs	r2, #0
 8008afa:	63bb      	str	r3, [r7, #56]	; 0x38
 8008afc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b04:	633b      	str	r3, [r7, #48]	; 0x30
 8008b06:	2300      	movs	r3, #0
 8008b08:	637b      	str	r3, [r7, #52]	; 0x34
 8008b0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008b0e:	4622      	mov	r2, r4
 8008b10:	462b      	mov	r3, r5
 8008b12:	f04f 0000 	mov.w	r0, #0
 8008b16:	f04f 0100 	mov.w	r1, #0
 8008b1a:	0159      	lsls	r1, r3, #5
 8008b1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b20:	0150      	lsls	r0, r2, #5
 8008b22:	4602      	mov	r2, r0
 8008b24:	460b      	mov	r3, r1
 8008b26:	4621      	mov	r1, r4
 8008b28:	1a51      	subs	r1, r2, r1
 8008b2a:	6139      	str	r1, [r7, #16]
 8008b2c:	4629      	mov	r1, r5
 8008b2e:	eb63 0301 	sbc.w	r3, r3, r1
 8008b32:	617b      	str	r3, [r7, #20]
 8008b34:	f04f 0200 	mov.w	r2, #0
 8008b38:	f04f 0300 	mov.w	r3, #0
 8008b3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b40:	4659      	mov	r1, fp
 8008b42:	018b      	lsls	r3, r1, #6
 8008b44:	4651      	mov	r1, sl
 8008b46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008b4a:	4651      	mov	r1, sl
 8008b4c:	018a      	lsls	r2, r1, #6
 8008b4e:	4651      	mov	r1, sl
 8008b50:	ebb2 0801 	subs.w	r8, r2, r1
 8008b54:	4659      	mov	r1, fp
 8008b56:	eb63 0901 	sbc.w	r9, r3, r1
 8008b5a:	f04f 0200 	mov.w	r2, #0
 8008b5e:	f04f 0300 	mov.w	r3, #0
 8008b62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b6e:	4690      	mov	r8, r2
 8008b70:	4699      	mov	r9, r3
 8008b72:	4623      	mov	r3, r4
 8008b74:	eb18 0303 	adds.w	r3, r8, r3
 8008b78:	60bb      	str	r3, [r7, #8]
 8008b7a:	462b      	mov	r3, r5
 8008b7c:	eb49 0303 	adc.w	r3, r9, r3
 8008b80:	60fb      	str	r3, [r7, #12]
 8008b82:	f04f 0200 	mov.w	r2, #0
 8008b86:	f04f 0300 	mov.w	r3, #0
 8008b8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008b8e:	4629      	mov	r1, r5
 8008b90:	024b      	lsls	r3, r1, #9
 8008b92:	4621      	mov	r1, r4
 8008b94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008b98:	4621      	mov	r1, r4
 8008b9a:	024a      	lsls	r2, r1, #9
 8008b9c:	4610      	mov	r0, r2
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ba6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ba8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008bac:	f7f7 fff0 	bl	8000b90 <__aeabi_uldivmod>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bb8:	e058      	b.n	8008c6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008bba:	4b38      	ldr	r3, [pc, #224]	; (8008c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	099b      	lsrs	r3, r3, #6
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	4611      	mov	r1, r2
 8008bc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008bca:	623b      	str	r3, [r7, #32]
 8008bcc:	2300      	movs	r3, #0
 8008bce:	627b      	str	r3, [r7, #36]	; 0x24
 8008bd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008bd4:	4642      	mov	r2, r8
 8008bd6:	464b      	mov	r3, r9
 8008bd8:	f04f 0000 	mov.w	r0, #0
 8008bdc:	f04f 0100 	mov.w	r1, #0
 8008be0:	0159      	lsls	r1, r3, #5
 8008be2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008be6:	0150      	lsls	r0, r2, #5
 8008be8:	4602      	mov	r2, r0
 8008bea:	460b      	mov	r3, r1
 8008bec:	4641      	mov	r1, r8
 8008bee:	ebb2 0a01 	subs.w	sl, r2, r1
 8008bf2:	4649      	mov	r1, r9
 8008bf4:	eb63 0b01 	sbc.w	fp, r3, r1
 8008bf8:	f04f 0200 	mov.w	r2, #0
 8008bfc:	f04f 0300 	mov.w	r3, #0
 8008c00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008c04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008c08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008c0c:	ebb2 040a 	subs.w	r4, r2, sl
 8008c10:	eb63 050b 	sbc.w	r5, r3, fp
 8008c14:	f04f 0200 	mov.w	r2, #0
 8008c18:	f04f 0300 	mov.w	r3, #0
 8008c1c:	00eb      	lsls	r3, r5, #3
 8008c1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c22:	00e2      	lsls	r2, r4, #3
 8008c24:	4614      	mov	r4, r2
 8008c26:	461d      	mov	r5, r3
 8008c28:	4643      	mov	r3, r8
 8008c2a:	18e3      	adds	r3, r4, r3
 8008c2c:	603b      	str	r3, [r7, #0]
 8008c2e:	464b      	mov	r3, r9
 8008c30:	eb45 0303 	adc.w	r3, r5, r3
 8008c34:	607b      	str	r3, [r7, #4]
 8008c36:	f04f 0200 	mov.w	r2, #0
 8008c3a:	f04f 0300 	mov.w	r3, #0
 8008c3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008c42:	4629      	mov	r1, r5
 8008c44:	028b      	lsls	r3, r1, #10
 8008c46:	4621      	mov	r1, r4
 8008c48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008c4c:	4621      	mov	r1, r4
 8008c4e:	028a      	lsls	r2, r1, #10
 8008c50:	4610      	mov	r0, r2
 8008c52:	4619      	mov	r1, r3
 8008c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c56:	2200      	movs	r2, #0
 8008c58:	61bb      	str	r3, [r7, #24]
 8008c5a:	61fa      	str	r2, [r7, #28]
 8008c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c60:	f7f7 ff96 	bl	8000b90 <__aeabi_uldivmod>
 8008c64:	4602      	mov	r2, r0
 8008c66:	460b      	mov	r3, r1
 8008c68:	4613      	mov	r3, r2
 8008c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008c6c:	4b0b      	ldr	r3, [pc, #44]	; (8008c9c <HAL_RCC_GetSysClockFreq+0x200>)
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	0c1b      	lsrs	r3, r3, #16
 8008c72:	f003 0303 	and.w	r3, r3, #3
 8008c76:	3301      	adds	r3, #1
 8008c78:	005b      	lsls	r3, r3, #1
 8008c7a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008c7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008c86:	e002      	b.n	8008c8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008c88:	4b05      	ldr	r3, [pc, #20]	; (8008ca0 <HAL_RCC_GetSysClockFreq+0x204>)
 8008c8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3750      	adds	r7, #80	; 0x50
 8008c94:	46bd      	mov	sp, r7
 8008c96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c9a:	bf00      	nop
 8008c9c:	40023800 	.word	0x40023800
 8008ca0:	00f42400 	.word	0x00f42400
 8008ca4:	007a1200 	.word	0x007a1200

08008ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008cac:	4b03      	ldr	r3, [pc, #12]	; (8008cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8008cae:	681b      	ldr	r3, [r3, #0]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	20000134 	.word	0x20000134

08008cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008cc4:	f7ff fff0 	bl	8008ca8 <HAL_RCC_GetHCLKFreq>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	4b05      	ldr	r3, [pc, #20]	; (8008ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	0a9b      	lsrs	r3, r3, #10
 8008cd0:	f003 0307 	and.w	r3, r3, #7
 8008cd4:	4903      	ldr	r1, [pc, #12]	; (8008ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008cd6:	5ccb      	ldrb	r3, [r1, r3]
 8008cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	40023800 	.word	0x40023800
 8008ce4:	0800be80 	.word	0x0800be80

08008ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008cec:	f7ff ffdc 	bl	8008ca8 <HAL_RCC_GetHCLKFreq>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	4b05      	ldr	r3, [pc, #20]	; (8008d08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	0b5b      	lsrs	r3, r3, #13
 8008cf8:	f003 0307 	and.w	r3, r3, #7
 8008cfc:	4903      	ldr	r1, [pc, #12]	; (8008d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008cfe:	5ccb      	ldrb	r3, [r1, r3]
 8008d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	40023800 	.word	0x40023800
 8008d0c:	0800be80 	.word	0x0800be80

08008d10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d101      	bne.n	8008d22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e07b      	b.n	8008e1a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d108      	bne.n	8008d3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d32:	d009      	beq.n	8008d48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	61da      	str	r2, [r3, #28]
 8008d3a:	e005      	b.n	8008d48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d106      	bne.n	8008d68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7fb fc86 	bl	8004674 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2202      	movs	r2, #2
 8008d6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008d90:	431a      	orrs	r2, r3
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d9a:	431a      	orrs	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	f003 0302 	and.w	r3, r3, #2
 8008da4:	431a      	orrs	r2, r3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	695b      	ldr	r3, [r3, #20]
 8008daa:	f003 0301 	and.w	r3, r3, #1
 8008dae:	431a      	orrs	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	699b      	ldr	r3, [r3, #24]
 8008db4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008db8:	431a      	orrs	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	69db      	ldr	r3, [r3, #28]
 8008dbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dc2:	431a      	orrs	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6a1b      	ldr	r3, [r3, #32]
 8008dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dcc:	ea42 0103 	orr.w	r1, r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	0c1b      	lsrs	r3, r3, #16
 8008de6:	f003 0104 	and.w	r1, r3, #4
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dee:	f003 0210 	and.w	r2, r3, #16
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	430a      	orrs	r2, r1
 8008df8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	69da      	ldr	r2, [r3, #28]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
	...

08008e24 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b086      	sub	sp, #24
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
 8008e30:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008e32:	2300      	movs	r3, #0
 8008e34:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d101      	bne.n	8008e44 <HAL_SPI_TransmitReceive_DMA+0x20>
 8008e40:	2302      	movs	r3, #2
 8008e42:	e0e3      	b.n	800900c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e52:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8008e5a:	7dbb      	ldrb	r3, [r7, #22]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d00d      	beq.n	8008e7c <HAL_SPI_TransmitReceive_DMA+0x58>
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e66:	d106      	bne.n	8008e76 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d102      	bne.n	8008e76 <HAL_SPI_TransmitReceive_DMA+0x52>
 8008e70:	7dbb      	ldrb	r3, [r7, #22]
 8008e72:	2b04      	cmp	r3, #4
 8008e74:	d002      	beq.n	8008e7c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8008e76:	2302      	movs	r3, #2
 8008e78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008e7a:	e0c2      	b.n	8009002 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d005      	beq.n	8008e8e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d002      	beq.n	8008e8e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008e88:	887b      	ldrh	r3, [r7, #2]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d102      	bne.n	8008e94 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008e92:	e0b6      	b.n	8009002 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b04      	cmp	r3, #4
 8008e9e:	d003      	beq.n	8008ea8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2205      	movs	r2, #5
 8008ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	68ba      	ldr	r2, [r7, #8]
 8008eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	887a      	ldrh	r2, [r7, #2]
 8008eb8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	887a      	ldrh	r2, [r7, #2]
 8008ebe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	887a      	ldrh	r2, [r7, #2]
 8008eca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	887a      	ldrh	r2, [r7, #2]
 8008ed0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2200      	movs	r2, #0
 8008edc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	2b04      	cmp	r3, #4
 8008ee8:	d108      	bne.n	8008efc <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eee:	4a49      	ldr	r2, [pc, #292]	; (8009014 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8008ef0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ef6:	4a48      	ldr	r2, [pc, #288]	; (8009018 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8008ef8:	63da      	str	r2, [r3, #60]	; 0x3c
 8008efa:	e007      	b.n	8008f0c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f00:	4a46      	ldr	r2, [pc, #280]	; (800901c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8008f02:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f08:	4a45      	ldr	r2, [pc, #276]	; (8009020 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8008f0a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f10:	4a44      	ldr	r2, [pc, #272]	; (8009024 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8008f12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f18:	2200      	movs	r2, #0
 8008f1a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	330c      	adds	r3, #12
 8008f26:	4619      	mov	r1, r3
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f32:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008f34:	f7fc f8b4 	bl	80050a0 <HAL_DMA_Start_IT>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00c      	beq.n	8008f58 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f42:	f043 0210 	orr.w	r2, r3, #16
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2201      	movs	r2, #1
 8008f52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8008f56:	e054      	b.n	8009002 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	685a      	ldr	r2, [r3, #4]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f042 0201 	orr.w	r2, r2, #1
 8008f66:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f74:	2200      	movs	r2, #0
 8008f76:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f84:	2200      	movs	r2, #0
 8008f86:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f90:	4619      	mov	r1, r3
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	330c      	adds	r3, #12
 8008f98:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f9e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008fa0:	f7fc f87e 	bl	80050a0 <HAL_DMA_Start_IT>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00c      	beq.n	8008fc4 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fae:	f043 0210 	orr.w	r2, r3, #16
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8008fc2:	e01e      	b.n	8009002 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fce:	2b40      	cmp	r3, #64	; 0x40
 8008fd0:	d007      	beq.n	8008fe2 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fe0:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	685a      	ldr	r2, [r3, #4]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f042 0220 	orr.w	r2, r2, #32
 8008ff0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	685a      	ldr	r2, [r3, #4]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f042 0202 	orr.w	r2, r2, #2
 8009000:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800900a:	7dfb      	ldrb	r3, [r7, #23]
}
 800900c:	4618      	mov	r0, r3
 800900e:	3718      	adds	r7, #24
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	08009431 	.word	0x08009431
 8009018:	080092f9 	.word	0x080092f9
 800901c:	0800944d 	.word	0x0800944d
 8009020:	080093a1 	.word	0x080093a1
 8009024:	08009469 	.word	0x08009469

08009028 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009030:	2300      	movs	r3, #0
 8009032:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00f      	beq.n	800905c <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009040:	4618      	mov	r0, r3
 8009042:	f7fc f885 	bl	8005150 <HAL_DMA_Abort>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d007      	beq.n	800905c <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009050:	f043 0210 	orr.w	r2, r3, #16
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009060:	2b00      	cmp	r3, #0
 8009062:	d00f      	beq.n	8009084 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009068:	4618      	mov	r0, r3
 800906a:	f7fc f871 	bl	8005150 <HAL_DMA_Abort>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d007      	beq.n	8009084 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009078:	f043 0210 	orr.w	r2, r3, #16
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	685a      	ldr	r2, [r3, #4]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f022 0203 	bic.w	r2, r2, #3
 8009092:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 800909c:	7bfb      	ldrb	r3, [r7, #15]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
	...

080090a8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b088      	sub	sp, #32
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	099b      	lsrs	r3, r3, #6
 80090c4:	f003 0301 	and.w	r3, r3, #1
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d10f      	bne.n	80090ec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00a      	beq.n	80090ec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	099b      	lsrs	r3, r3, #6
 80090da:	f003 0301 	and.w	r3, r3, #1
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d004      	beq.n	80090ec <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	4798      	blx	r3
    return;
 80090ea:	e0d7      	b.n	800929c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	085b      	lsrs	r3, r3, #1
 80090f0:	f003 0301 	and.w	r3, r3, #1
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00a      	beq.n	800910e <HAL_SPI_IRQHandler+0x66>
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	09db      	lsrs	r3, r3, #7
 80090fc:	f003 0301 	and.w	r3, r3, #1
 8009100:	2b00      	cmp	r3, #0
 8009102:	d004      	beq.n	800910e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	4798      	blx	r3
    return;
 800910c:	e0c6      	b.n	800929c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	095b      	lsrs	r3, r3, #5
 8009112:	f003 0301 	and.w	r3, r3, #1
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10c      	bne.n	8009134 <HAL_SPI_IRQHandler+0x8c>
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	099b      	lsrs	r3, r3, #6
 800911e:	f003 0301 	and.w	r3, r3, #1
 8009122:	2b00      	cmp	r3, #0
 8009124:	d106      	bne.n	8009134 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	0a1b      	lsrs	r3, r3, #8
 800912a:	f003 0301 	and.w	r3, r3, #1
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 80b4 	beq.w	800929c <HAL_SPI_IRQHandler+0x1f4>
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	095b      	lsrs	r3, r3, #5
 8009138:	f003 0301 	and.w	r3, r3, #1
 800913c:	2b00      	cmp	r3, #0
 800913e:	f000 80ad 	beq.w	800929c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	099b      	lsrs	r3, r3, #6
 8009146:	f003 0301 	and.w	r3, r3, #1
 800914a:	2b00      	cmp	r3, #0
 800914c:	d023      	beq.n	8009196 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009154:	b2db      	uxtb	r3, r3
 8009156:	2b03      	cmp	r3, #3
 8009158:	d011      	beq.n	800917e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800915e:	f043 0204 	orr.w	r2, r3, #4
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009166:	2300      	movs	r3, #0
 8009168:	617b      	str	r3, [r7, #20]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	617b      	str	r3, [r7, #20]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	617b      	str	r3, [r7, #20]
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	e00b      	b.n	8009196 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800917e:	2300      	movs	r3, #0
 8009180:	613b      	str	r3, [r7, #16]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	613b      	str	r3, [r7, #16]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	613b      	str	r3, [r7, #16]
 8009192:	693b      	ldr	r3, [r7, #16]
        return;
 8009194:	e082      	b.n	800929c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	095b      	lsrs	r3, r3, #5
 800919a:	f003 0301 	and.w	r3, r3, #1
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d014      	beq.n	80091cc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091a6:	f043 0201 	orr.w	r2, r3, #1
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80091ae:	2300      	movs	r3, #0
 80091b0:	60fb      	str	r3, [r7, #12]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	60fb      	str	r3, [r7, #12]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091c8:	601a      	str	r2, [r3, #0]
 80091ca:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	0a1b      	lsrs	r3, r3, #8
 80091d0:	f003 0301 	and.w	r3, r3, #1
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d00c      	beq.n	80091f2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091dc:	f043 0208 	orr.w	r2, r3, #8
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80091e4:	2300      	movs	r3, #0
 80091e6:	60bb      	str	r3, [r7, #8]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	60bb      	str	r3, [r7, #8]
 80091f0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d04f      	beq.n	800929a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	685a      	ldr	r2, [r3, #4]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009208:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2201      	movs	r2, #1
 800920e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	f003 0302 	and.w	r3, r3, #2
 8009218:	2b00      	cmp	r3, #0
 800921a:	d104      	bne.n	8009226 <HAL_SPI_IRQHandler+0x17e>
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	f003 0301 	and.w	r3, r3, #1
 8009222:	2b00      	cmp	r3, #0
 8009224:	d034      	beq.n	8009290 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	685a      	ldr	r2, [r3, #4]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f022 0203 	bic.w	r2, r2, #3
 8009234:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800923a:	2b00      	cmp	r3, #0
 800923c:	d011      	beq.n	8009262 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009242:	4a18      	ldr	r2, [pc, #96]	; (80092a4 <HAL_SPI_IRQHandler+0x1fc>)
 8009244:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800924a:	4618      	mov	r0, r3
 800924c:	f7fb fff0 	bl	8005230 <HAL_DMA_Abort_IT>
 8009250:	4603      	mov	r3, r0
 8009252:	2b00      	cmp	r3, #0
 8009254:	d005      	beq.n	8009262 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800925a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009266:	2b00      	cmp	r3, #0
 8009268:	d016      	beq.n	8009298 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800926e:	4a0d      	ldr	r2, [pc, #52]	; (80092a4 <HAL_SPI_IRQHandler+0x1fc>)
 8009270:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009276:	4618      	mov	r0, r3
 8009278:	f7fb ffda 	bl	8005230 <HAL_DMA_Abort_IT>
 800927c:	4603      	mov	r3, r0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00a      	beq.n	8009298 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009286:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800928e:	e003      	b.n	8009298 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 f827 	bl	80092e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009296:	e000      	b.n	800929a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009298:	bf00      	nop
    return;
 800929a:	bf00      	nop
  }
}
 800929c:	3720      	adds	r7, #32
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	080094a9 	.word	0x080094a9

080092a8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80092b0:	bf00      	nop
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80092c4:	bf00      	nop
 80092c6:	370c      	adds	r7, #12
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80092d8:	bf00      	nop
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80092ec:	bf00      	nop
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009304:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009306:	f7fb fcdb 	bl	8004cc0 <HAL_GetTick>
 800930a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800931a:	d03b      	beq.n	8009394 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	685a      	ldr	r2, [r3, #4]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f022 0220 	bic.w	r2, r2, #32
 800932a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d10d      	bne.n	8009350 <SPI_DMAReceiveCplt+0x58>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800933c:	d108      	bne.n	8009350 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	685a      	ldr	r2, [r3, #4]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f022 0203 	bic.w	r2, r2, #3
 800934c:	605a      	str	r2, [r3, #4]
 800934e:	e007      	b.n	8009360 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	685a      	ldr	r2, [r3, #4]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f022 0201 	bic.w	r2, r2, #1
 800935e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009360:	68ba      	ldr	r2, [r7, #8]
 8009362:	2164      	movs	r1, #100	; 0x64
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f000 f93b 	bl	80095e0 <SPI_EndRxTransaction>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d002      	beq.n	8009376 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2220      	movs	r2, #32
 8009374:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2200      	movs	r2, #0
 800937a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009388:	2b00      	cmp	r3, #0
 800938a:	d003      	beq.n	8009394 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800938c:	68f8      	ldr	r0, [r7, #12]
 800938e:	f7ff ffa9 	bl	80092e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009392:	e002      	b.n	800939a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f7ff ff87 	bl	80092a8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800939a:	3710      	adds	r7, #16
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ac:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093ae:	f7fb fc87 	bl	8004cc0 <HAL_GetTick>
 80093b2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093c2:	d02f      	beq.n	8009424 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	685a      	ldr	r2, [r3, #4]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f022 0220 	bic.w	r2, r2, #32
 80093d2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80093d4:	68ba      	ldr	r2, [r7, #8]
 80093d6:	2164      	movs	r1, #100	; 0x64
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f000 f967 	bl	80096ac <SPI_EndRxTxTransaction>
 80093de:	4603      	mov	r3, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d005      	beq.n	80093f0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093e8:	f043 0220 	orr.w	r2, r3, #32
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	685a      	ldr	r2, [r3, #4]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f022 0203 	bic.w	r2, r2, #3
 80093fe:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2200      	movs	r2, #0
 8009404:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2200      	movs	r2, #0
 800940a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009418:	2b00      	cmp	r3, #0
 800941a:	d003      	beq.n	8009424 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f7ff ff61 	bl	80092e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009422:	e002      	b.n	800942a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009424:	68f8      	ldr	r0, [r7, #12]
 8009426:	f7fa f8c5 	bl	80035b4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f7ff ff3c 	bl	80092bc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009444:	bf00      	nop
 8009446:	3710      	adds	r7, #16
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009458:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f7ff ff38 	bl	80092d0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009460:	bf00      	nop
 8009462:	3710      	adds	r7, #16
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009474:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	685a      	ldr	r2, [r3, #4]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f022 0203 	bic.w	r2, r2, #3
 8009484:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800948a:	f043 0210 	orr.w	r2, r3, #16
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2201      	movs	r2, #1
 8009496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f7ff ff22 	bl	80092e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80094a0:	bf00      	nop
 80094a2:	3710      	adds	r7, #16
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2200      	movs	r2, #0
 80094ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2200      	movs	r2, #0
 80094c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f7ff ff0e 	bl	80092e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80094c8:	bf00      	nop
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b088      	sub	sp, #32
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	603b      	str	r3, [r7, #0]
 80094dc:	4613      	mov	r3, r2
 80094de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80094e0:	f7fb fbee 	bl	8004cc0 <HAL_GetTick>
 80094e4:	4602      	mov	r2, r0
 80094e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e8:	1a9b      	subs	r3, r3, r2
 80094ea:	683a      	ldr	r2, [r7, #0]
 80094ec:	4413      	add	r3, r2
 80094ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80094f0:	f7fb fbe6 	bl	8004cc0 <HAL_GetTick>
 80094f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80094f6:	4b39      	ldr	r3, [pc, #228]	; (80095dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	015b      	lsls	r3, r3, #5
 80094fc:	0d1b      	lsrs	r3, r3, #20
 80094fe:	69fa      	ldr	r2, [r7, #28]
 8009500:	fb02 f303 	mul.w	r3, r2, r3
 8009504:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009506:	e054      	b.n	80095b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800950e:	d050      	beq.n	80095b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009510:	f7fb fbd6 	bl	8004cc0 <HAL_GetTick>
 8009514:	4602      	mov	r2, r0
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	1ad3      	subs	r3, r2, r3
 800951a:	69fa      	ldr	r2, [r7, #28]
 800951c:	429a      	cmp	r2, r3
 800951e:	d902      	bls.n	8009526 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009520:	69fb      	ldr	r3, [r7, #28]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d13d      	bne.n	80095a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	685a      	ldr	r2, [r3, #4]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009534:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800953e:	d111      	bne.n	8009564 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009548:	d004      	beq.n	8009554 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009552:	d107      	bne.n	8009564 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009562:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800956c:	d10f      	bne.n	800958e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800957c:	601a      	str	r2, [r3, #0]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800958c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2201      	movs	r2, #1
 8009592:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800959e:	2303      	movs	r3, #3
 80095a0:	e017      	b.n	80095d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d101      	bne.n	80095ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80095a8:	2300      	movs	r3, #0
 80095aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	3b01      	subs	r3, #1
 80095b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	689a      	ldr	r2, [r3, #8]
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	4013      	ands	r3, r2
 80095bc:	68ba      	ldr	r2, [r7, #8]
 80095be:	429a      	cmp	r2, r3
 80095c0:	bf0c      	ite	eq
 80095c2:	2301      	moveq	r3, #1
 80095c4:	2300      	movne	r3, #0
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	461a      	mov	r2, r3
 80095ca:	79fb      	ldrb	r3, [r7, #7]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d19b      	bne.n	8009508 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3720      	adds	r7, #32
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	20000134 	.word	0x20000134

080095e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b086      	sub	sp, #24
 80095e4:	af02      	add	r7, sp, #8
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095f4:	d111      	bne.n	800961a <SPI_EndRxTransaction+0x3a>
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095fe:	d004      	beq.n	800960a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009608:	d107      	bne.n	800961a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009618:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009622:	d12a      	bne.n	800967a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800962c:	d012      	beq.n	8009654 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	9300      	str	r3, [sp, #0]
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	2200      	movs	r2, #0
 8009636:	2180      	movs	r1, #128	; 0x80
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f7ff ff49 	bl	80094d0 <SPI_WaitFlagStateUntilTimeout>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d02d      	beq.n	80096a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009648:	f043 0220 	orr.w	r2, r3, #32
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009650:	2303      	movs	r3, #3
 8009652:	e026      	b.n	80096a2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	2200      	movs	r2, #0
 800965c:	2101      	movs	r1, #1
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f7ff ff36 	bl	80094d0 <SPI_WaitFlagStateUntilTimeout>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d01a      	beq.n	80096a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800966e:	f043 0220 	orr.w	r2, r3, #32
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009676:	2303      	movs	r3, #3
 8009678:	e013      	b.n	80096a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	9300      	str	r3, [sp, #0]
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	2200      	movs	r2, #0
 8009682:	2101      	movs	r1, #1
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	f7ff ff23 	bl	80094d0 <SPI_WaitFlagStateUntilTimeout>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d007      	beq.n	80096a0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009694:	f043 0220 	orr.w	r2, r3, #32
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800969c:	2303      	movs	r3, #3
 800969e:	e000      	b.n	80096a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
	...

080096ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b088      	sub	sp, #32
 80096b0:	af02      	add	r7, sp, #8
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80096b8:	4b1b      	ldr	r3, [pc, #108]	; (8009728 <SPI_EndRxTxTransaction+0x7c>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a1b      	ldr	r2, [pc, #108]	; (800972c <SPI_EndRxTxTransaction+0x80>)
 80096be:	fba2 2303 	umull	r2, r3, r2, r3
 80096c2:	0d5b      	lsrs	r3, r3, #21
 80096c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80096c8:	fb02 f303 	mul.w	r3, r2, r3
 80096cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096d6:	d112      	bne.n	80096fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	9300      	str	r3, [sp, #0]
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	2200      	movs	r2, #0
 80096e0:	2180      	movs	r1, #128	; 0x80
 80096e2:	68f8      	ldr	r0, [r7, #12]
 80096e4:	f7ff fef4 	bl	80094d0 <SPI_WaitFlagStateUntilTimeout>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d016      	beq.n	800971c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096f2:	f043 0220 	orr.w	r2, r3, #32
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80096fa:	2303      	movs	r3, #3
 80096fc:	e00f      	b.n	800971e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00a      	beq.n	800971a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	3b01      	subs	r3, #1
 8009708:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009714:	2b80      	cmp	r3, #128	; 0x80
 8009716:	d0f2      	beq.n	80096fe <SPI_EndRxTxTransaction+0x52>
 8009718:	e000      	b.n	800971c <SPI_EndRxTxTransaction+0x70>
        break;
 800971a:	bf00      	nop
  }

  return HAL_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3718      	adds	r7, #24
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	20000134 	.word	0x20000134
 800972c:	165e9f81 	.word	0x165e9f81

08009730 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d101      	bne.n	8009742 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	e041      	b.n	80097c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009748:	b2db      	uxtb	r3, r3
 800974a:	2b00      	cmp	r3, #0
 800974c:	d106      	bne.n	800975c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f7fb f840 	bl	80047dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2202      	movs	r2, #2
 8009760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	3304      	adds	r3, #4
 800976c:	4619      	mov	r1, r3
 800976e:	4610      	mov	r0, r2
 8009770:	f000 fcae 	bl	800a0d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2201      	movs	r2, #1
 8009778:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2201      	movs	r2, #1
 8009798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3708      	adds	r7, #8
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
	...

080097d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b085      	sub	sp, #20
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d001      	beq.n	80097e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	e03c      	b.n	8009862 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2202      	movs	r2, #2
 80097ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a1e      	ldr	r2, [pc, #120]	; (8009870 <HAL_TIM_Base_Start+0xa0>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d018      	beq.n	800982c <HAL_TIM_Base_Start+0x5c>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009802:	d013      	beq.n	800982c <HAL_TIM_Base_Start+0x5c>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a1a      	ldr	r2, [pc, #104]	; (8009874 <HAL_TIM_Base_Start+0xa4>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d00e      	beq.n	800982c <HAL_TIM_Base_Start+0x5c>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a19      	ldr	r2, [pc, #100]	; (8009878 <HAL_TIM_Base_Start+0xa8>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d009      	beq.n	800982c <HAL_TIM_Base_Start+0x5c>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a17      	ldr	r2, [pc, #92]	; (800987c <HAL_TIM_Base_Start+0xac>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d004      	beq.n	800982c <HAL_TIM_Base_Start+0x5c>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a16      	ldr	r2, [pc, #88]	; (8009880 <HAL_TIM_Base_Start+0xb0>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d111      	bne.n	8009850 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	f003 0307 	and.w	r3, r3, #7
 8009836:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2b06      	cmp	r3, #6
 800983c:	d010      	beq.n	8009860 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f042 0201 	orr.w	r2, r2, #1
 800984c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800984e:	e007      	b.n	8009860 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f042 0201 	orr.w	r2, r2, #1
 800985e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3714      	adds	r7, #20
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop
 8009870:	40010000 	.word	0x40010000
 8009874:	40000400 	.word	0x40000400
 8009878:	40000800 	.word	0x40000800
 800987c:	40000c00 	.word	0x40000c00
 8009880:	40014000 	.word	0x40014000

08009884 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009892:	b2db      	uxtb	r3, r3
 8009894:	2b01      	cmp	r3, #1
 8009896:	d001      	beq.n	800989c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009898:	2301      	movs	r3, #1
 800989a:	e044      	b.n	8009926 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2202      	movs	r2, #2
 80098a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	68da      	ldr	r2, [r3, #12]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f042 0201 	orr.w	r2, r2, #1
 80098b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a1e      	ldr	r2, [pc, #120]	; (8009934 <HAL_TIM_Base_Start_IT+0xb0>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d018      	beq.n	80098f0 <HAL_TIM_Base_Start_IT+0x6c>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098c6:	d013      	beq.n	80098f0 <HAL_TIM_Base_Start_IT+0x6c>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a1a      	ldr	r2, [pc, #104]	; (8009938 <HAL_TIM_Base_Start_IT+0xb4>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d00e      	beq.n	80098f0 <HAL_TIM_Base_Start_IT+0x6c>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a19      	ldr	r2, [pc, #100]	; (800993c <HAL_TIM_Base_Start_IT+0xb8>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d009      	beq.n	80098f0 <HAL_TIM_Base_Start_IT+0x6c>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a17      	ldr	r2, [pc, #92]	; (8009940 <HAL_TIM_Base_Start_IT+0xbc>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d004      	beq.n	80098f0 <HAL_TIM_Base_Start_IT+0x6c>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a16      	ldr	r2, [pc, #88]	; (8009944 <HAL_TIM_Base_Start_IT+0xc0>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d111      	bne.n	8009914 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	f003 0307 	and.w	r3, r3, #7
 80098fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2b06      	cmp	r3, #6
 8009900:	d010      	beq.n	8009924 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f042 0201 	orr.w	r2, r2, #1
 8009910:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009912:	e007      	b.n	8009924 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f042 0201 	orr.w	r2, r2, #1
 8009922:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3714      	adds	r7, #20
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	40010000 	.word	0x40010000
 8009938:	40000400 	.word	0x40000400
 800993c:	40000800 	.word	0x40000800
 8009940:	40000c00 	.word	0x40000c00
 8009944:	40014000 	.word	0x40014000

08009948 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d101      	bne.n	800995a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e041      	b.n	80099de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009960:	b2db      	uxtb	r3, r3
 8009962:	2b00      	cmp	r3, #0
 8009964:	d106      	bne.n	8009974 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f839 	bl	80099e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2202      	movs	r2, #2
 8009978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	3304      	adds	r3, #4
 8009984:	4619      	mov	r1, r3
 8009986:	4610      	mov	r0, r2
 8009988:	f000 fba2 	bl	800a0d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80099e6:	b480      	push	{r7}
 80099e8:	b083      	sub	sp, #12
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80099ee:	bf00      	nop
 80099f0:	370c      	adds	r7, #12
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
	...

080099fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d109      	bne.n	8009a20 <HAL_TIM_PWM_Start+0x24>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	bf14      	ite	ne
 8009a18:	2301      	movne	r3, #1
 8009a1a:	2300      	moveq	r3, #0
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	e022      	b.n	8009a66 <HAL_TIM_PWM_Start+0x6a>
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	2b04      	cmp	r3, #4
 8009a24:	d109      	bne.n	8009a3a <HAL_TIM_PWM_Start+0x3e>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	bf14      	ite	ne
 8009a32:	2301      	movne	r3, #1
 8009a34:	2300      	moveq	r3, #0
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	e015      	b.n	8009a66 <HAL_TIM_PWM_Start+0x6a>
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	2b08      	cmp	r3, #8
 8009a3e:	d109      	bne.n	8009a54 <HAL_TIM_PWM_Start+0x58>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	bf14      	ite	ne
 8009a4c:	2301      	movne	r3, #1
 8009a4e:	2300      	moveq	r3, #0
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	e008      	b.n	8009a66 <HAL_TIM_PWM_Start+0x6a>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	bf14      	ite	ne
 8009a60:	2301      	movne	r3, #1
 8009a62:	2300      	moveq	r3, #0
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d001      	beq.n	8009a6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e068      	b.n	8009b40 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d104      	bne.n	8009a7e <HAL_TIM_PWM_Start+0x82>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2202      	movs	r2, #2
 8009a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a7c:	e013      	b.n	8009aa6 <HAL_TIM_PWM_Start+0xaa>
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	2b04      	cmp	r3, #4
 8009a82:	d104      	bne.n	8009a8e <HAL_TIM_PWM_Start+0x92>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2202      	movs	r2, #2
 8009a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a8c:	e00b      	b.n	8009aa6 <HAL_TIM_PWM_Start+0xaa>
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	2b08      	cmp	r3, #8
 8009a92:	d104      	bne.n	8009a9e <HAL_TIM_PWM_Start+0xa2>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2202      	movs	r2, #2
 8009a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a9c:	e003      	b.n	8009aa6 <HAL_TIM_PWM_Start+0xaa>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2202      	movs	r2, #2
 8009aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	6839      	ldr	r1, [r7, #0]
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f000 fdb4 	bl	800a61c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a23      	ldr	r2, [pc, #140]	; (8009b48 <HAL_TIM_PWM_Start+0x14c>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d107      	bne.n	8009ace <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009acc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a1d      	ldr	r2, [pc, #116]	; (8009b48 <HAL_TIM_PWM_Start+0x14c>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d018      	beq.n	8009b0a <HAL_TIM_PWM_Start+0x10e>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ae0:	d013      	beq.n	8009b0a <HAL_TIM_PWM_Start+0x10e>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a19      	ldr	r2, [pc, #100]	; (8009b4c <HAL_TIM_PWM_Start+0x150>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d00e      	beq.n	8009b0a <HAL_TIM_PWM_Start+0x10e>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a17      	ldr	r2, [pc, #92]	; (8009b50 <HAL_TIM_PWM_Start+0x154>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d009      	beq.n	8009b0a <HAL_TIM_PWM_Start+0x10e>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a16      	ldr	r2, [pc, #88]	; (8009b54 <HAL_TIM_PWM_Start+0x158>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d004      	beq.n	8009b0a <HAL_TIM_PWM_Start+0x10e>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a14      	ldr	r2, [pc, #80]	; (8009b58 <HAL_TIM_PWM_Start+0x15c>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d111      	bne.n	8009b2e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	f003 0307 	and.w	r3, r3, #7
 8009b14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2b06      	cmp	r3, #6
 8009b1a:	d010      	beq.n	8009b3e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f042 0201 	orr.w	r2, r2, #1
 8009b2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b2c:	e007      	b.n	8009b3e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f042 0201 	orr.w	r2, r2, #1
 8009b3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3710      	adds	r7, #16
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	40010000 	.word	0x40010000
 8009b4c:	40000400 	.word	0x40000400
 8009b50:	40000800 	.word	0x40000800
 8009b54:	40000c00 	.word	0x40000c00
 8009b58:	40014000 	.word	0x40014000

08009b5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	691b      	ldr	r3, [r3, #16]
 8009b6a:	f003 0302 	and.w	r3, r3, #2
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d122      	bne.n	8009bb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	f003 0302 	and.w	r3, r3, #2
 8009b7c:	2b02      	cmp	r3, #2
 8009b7e:	d11b      	bne.n	8009bb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f06f 0202 	mvn.w	r2, #2
 8009b88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	699b      	ldr	r3, [r3, #24]
 8009b96:	f003 0303 	and.w	r3, r3, #3
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d003      	beq.n	8009ba6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 fa77 	bl	800a092 <HAL_TIM_IC_CaptureCallback>
 8009ba4:	e005      	b.n	8009bb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 fa69 	bl	800a07e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 fa7a 	bl	800a0a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	691b      	ldr	r3, [r3, #16]
 8009bbe:	f003 0304 	and.w	r3, r3, #4
 8009bc2:	2b04      	cmp	r3, #4
 8009bc4:	d122      	bne.n	8009c0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	f003 0304 	and.w	r3, r3, #4
 8009bd0:	2b04      	cmp	r3, #4
 8009bd2:	d11b      	bne.n	8009c0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f06f 0204 	mvn.w	r2, #4
 8009bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2202      	movs	r2, #2
 8009be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	699b      	ldr	r3, [r3, #24]
 8009bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d003      	beq.n	8009bfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fa4d 	bl	800a092 <HAL_TIM_IC_CaptureCallback>
 8009bf8:	e005      	b.n	8009c06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 fa3f 	bl	800a07e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 fa50 	bl	800a0a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	f003 0308 	and.w	r3, r3, #8
 8009c16:	2b08      	cmp	r3, #8
 8009c18:	d122      	bne.n	8009c60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	f003 0308 	and.w	r3, r3, #8
 8009c24:	2b08      	cmp	r3, #8
 8009c26:	d11b      	bne.n	8009c60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f06f 0208 	mvn.w	r2, #8
 8009c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2204      	movs	r2, #4
 8009c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	69db      	ldr	r3, [r3, #28]
 8009c3e:	f003 0303 	and.w	r3, r3, #3
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d003      	beq.n	8009c4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fa23 	bl	800a092 <HAL_TIM_IC_CaptureCallback>
 8009c4c:	e005      	b.n	8009c5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 fa15 	bl	800a07e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fa26 	bl	800a0a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	f003 0310 	and.w	r3, r3, #16
 8009c6a:	2b10      	cmp	r3, #16
 8009c6c:	d122      	bne.n	8009cb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	f003 0310 	and.w	r3, r3, #16
 8009c78:	2b10      	cmp	r3, #16
 8009c7a:	d11b      	bne.n	8009cb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f06f 0210 	mvn.w	r2, #16
 8009c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2208      	movs	r2, #8
 8009c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	69db      	ldr	r3, [r3, #28]
 8009c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d003      	beq.n	8009ca2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 f9f9 	bl	800a092 <HAL_TIM_IC_CaptureCallback>
 8009ca0:	e005      	b.n	8009cae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 f9eb 	bl	800a07e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 f9fc 	bl	800a0a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	691b      	ldr	r3, [r3, #16]
 8009cba:	f003 0301 	and.w	r3, r3, #1
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d10e      	bne.n	8009ce0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	f003 0301 	and.w	r3, r3, #1
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d107      	bne.n	8009ce0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f06f 0201 	mvn.w	r2, #1
 8009cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f7f9 fe10 	bl	8003900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	691b      	ldr	r3, [r3, #16]
 8009ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cea:	2b80      	cmp	r3, #128	; 0x80
 8009cec:	d10e      	bne.n	8009d0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cf8:	2b80      	cmp	r3, #128	; 0x80
 8009cfa:	d107      	bne.n	8009d0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 fd26 	bl	800a758 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	691b      	ldr	r3, [r3, #16]
 8009d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d16:	2b40      	cmp	r3, #64	; 0x40
 8009d18:	d10e      	bne.n	8009d38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	68db      	ldr	r3, [r3, #12]
 8009d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d24:	2b40      	cmp	r3, #64	; 0x40
 8009d26:	d107      	bne.n	8009d38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 f9c1 	bl	800a0ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	f003 0320 	and.w	r3, r3, #32
 8009d42:	2b20      	cmp	r3, #32
 8009d44:	d10e      	bne.n	8009d64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	f003 0320 	and.w	r3, r3, #32
 8009d50:	2b20      	cmp	r3, #32
 8009d52:	d107      	bne.n	8009d64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f06f 0220 	mvn.w	r2, #32
 8009d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 fcf0 	bl	800a744 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d64:	bf00      	nop
 8009d66:	3708      	adds	r7, #8
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b086      	sub	sp, #24
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d101      	bne.n	8009d8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009d86:	2302      	movs	r3, #2
 8009d88:	e0ae      	b.n	8009ee8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2b0c      	cmp	r3, #12
 8009d96:	f200 809f 	bhi.w	8009ed8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009d9a:	a201      	add	r2, pc, #4	; (adr r2, 8009da0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da0:	08009dd5 	.word	0x08009dd5
 8009da4:	08009ed9 	.word	0x08009ed9
 8009da8:	08009ed9 	.word	0x08009ed9
 8009dac:	08009ed9 	.word	0x08009ed9
 8009db0:	08009e15 	.word	0x08009e15
 8009db4:	08009ed9 	.word	0x08009ed9
 8009db8:	08009ed9 	.word	0x08009ed9
 8009dbc:	08009ed9 	.word	0x08009ed9
 8009dc0:	08009e57 	.word	0x08009e57
 8009dc4:	08009ed9 	.word	0x08009ed9
 8009dc8:	08009ed9 	.word	0x08009ed9
 8009dcc:	08009ed9 	.word	0x08009ed9
 8009dd0:	08009e97 	.word	0x08009e97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	68b9      	ldr	r1, [r7, #8]
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f000 f9f8 	bl	800a1d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	699a      	ldr	r2, [r3, #24]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f042 0208 	orr.w	r2, r2, #8
 8009dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	699a      	ldr	r2, [r3, #24]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f022 0204 	bic.w	r2, r2, #4
 8009dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	6999      	ldr	r1, [r3, #24]
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	691a      	ldr	r2, [r3, #16]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	430a      	orrs	r2, r1
 8009e10:	619a      	str	r2, [r3, #24]
      break;
 8009e12:	e064      	b.n	8009ede <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	68b9      	ldr	r1, [r7, #8]
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f000 fa3e 	bl	800a29c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	699a      	ldr	r2, [r3, #24]
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	699a      	ldr	r2, [r3, #24]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	6999      	ldr	r1, [r3, #24]
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	021a      	lsls	r2, r3, #8
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	430a      	orrs	r2, r1
 8009e52:	619a      	str	r2, [r3, #24]
      break;
 8009e54:	e043      	b.n	8009ede <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	68b9      	ldr	r1, [r7, #8]
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f000 fa89 	bl	800a374 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	69da      	ldr	r2, [r3, #28]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f042 0208 	orr.w	r2, r2, #8
 8009e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	69da      	ldr	r2, [r3, #28]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f022 0204 	bic.w	r2, r2, #4
 8009e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	69d9      	ldr	r1, [r3, #28]
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	691a      	ldr	r2, [r3, #16]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	430a      	orrs	r2, r1
 8009e92:	61da      	str	r2, [r3, #28]
      break;
 8009e94:	e023      	b.n	8009ede <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	68b9      	ldr	r1, [r7, #8]
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f000 fad3 	bl	800a448 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	69da      	ldr	r2, [r3, #28]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009eb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	69da      	ldr	r2, [r3, #28]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ec0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	69d9      	ldr	r1, [r3, #28]
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	691b      	ldr	r3, [r3, #16]
 8009ecc:	021a      	lsls	r2, r3, #8
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	430a      	orrs	r2, r1
 8009ed4:	61da      	str	r2, [r3, #28]
      break;
 8009ed6:	e002      	b.n	8009ede <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	75fb      	strb	r3, [r7, #23]
      break;
 8009edc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3718      	adds	r7, #24
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d101      	bne.n	8009f0c <HAL_TIM_ConfigClockSource+0x1c>
 8009f08:	2302      	movs	r3, #2
 8009f0a:	e0b4      	b.n	800a076 <HAL_TIM_ConfigClockSource+0x186>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2202      	movs	r2, #2
 8009f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009f2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	68ba      	ldr	r2, [r7, #8]
 8009f3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f44:	d03e      	beq.n	8009fc4 <HAL_TIM_ConfigClockSource+0xd4>
 8009f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f4a:	f200 8087 	bhi.w	800a05c <HAL_TIM_ConfigClockSource+0x16c>
 8009f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f52:	f000 8086 	beq.w	800a062 <HAL_TIM_ConfigClockSource+0x172>
 8009f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f5a:	d87f      	bhi.n	800a05c <HAL_TIM_ConfigClockSource+0x16c>
 8009f5c:	2b70      	cmp	r3, #112	; 0x70
 8009f5e:	d01a      	beq.n	8009f96 <HAL_TIM_ConfigClockSource+0xa6>
 8009f60:	2b70      	cmp	r3, #112	; 0x70
 8009f62:	d87b      	bhi.n	800a05c <HAL_TIM_ConfigClockSource+0x16c>
 8009f64:	2b60      	cmp	r3, #96	; 0x60
 8009f66:	d050      	beq.n	800a00a <HAL_TIM_ConfigClockSource+0x11a>
 8009f68:	2b60      	cmp	r3, #96	; 0x60
 8009f6a:	d877      	bhi.n	800a05c <HAL_TIM_ConfigClockSource+0x16c>
 8009f6c:	2b50      	cmp	r3, #80	; 0x50
 8009f6e:	d03c      	beq.n	8009fea <HAL_TIM_ConfigClockSource+0xfa>
 8009f70:	2b50      	cmp	r3, #80	; 0x50
 8009f72:	d873      	bhi.n	800a05c <HAL_TIM_ConfigClockSource+0x16c>
 8009f74:	2b40      	cmp	r3, #64	; 0x40
 8009f76:	d058      	beq.n	800a02a <HAL_TIM_ConfigClockSource+0x13a>
 8009f78:	2b40      	cmp	r3, #64	; 0x40
 8009f7a:	d86f      	bhi.n	800a05c <HAL_TIM_ConfigClockSource+0x16c>
 8009f7c:	2b30      	cmp	r3, #48	; 0x30
 8009f7e:	d064      	beq.n	800a04a <HAL_TIM_ConfigClockSource+0x15a>
 8009f80:	2b30      	cmp	r3, #48	; 0x30
 8009f82:	d86b      	bhi.n	800a05c <HAL_TIM_ConfigClockSource+0x16c>
 8009f84:	2b20      	cmp	r3, #32
 8009f86:	d060      	beq.n	800a04a <HAL_TIM_ConfigClockSource+0x15a>
 8009f88:	2b20      	cmp	r3, #32
 8009f8a:	d867      	bhi.n	800a05c <HAL_TIM_ConfigClockSource+0x16c>
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d05c      	beq.n	800a04a <HAL_TIM_ConfigClockSource+0x15a>
 8009f90:	2b10      	cmp	r3, #16
 8009f92:	d05a      	beq.n	800a04a <HAL_TIM_ConfigClockSource+0x15a>
 8009f94:	e062      	b.n	800a05c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6818      	ldr	r0, [r3, #0]
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	6899      	ldr	r1, [r3, #8]
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	685a      	ldr	r2, [r3, #4]
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	f000 fb19 	bl	800a5dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009fb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	68ba      	ldr	r2, [r7, #8]
 8009fc0:	609a      	str	r2, [r3, #8]
      break;
 8009fc2:	e04f      	b.n	800a064 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6818      	ldr	r0, [r3, #0]
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	6899      	ldr	r1, [r3, #8]
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	685a      	ldr	r2, [r3, #4]
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	f000 fb02 	bl	800a5dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	689a      	ldr	r2, [r3, #8]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009fe6:	609a      	str	r2, [r3, #8]
      break;
 8009fe8:	e03c      	b.n	800a064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6818      	ldr	r0, [r3, #0]
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	6859      	ldr	r1, [r3, #4]
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	f000 fa76 	bl	800a4e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2150      	movs	r1, #80	; 0x50
 800a002:	4618      	mov	r0, r3
 800a004:	f000 facf 	bl	800a5a6 <TIM_ITRx_SetConfig>
      break;
 800a008:	e02c      	b.n	800a064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6818      	ldr	r0, [r3, #0]
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	6859      	ldr	r1, [r3, #4]
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	68db      	ldr	r3, [r3, #12]
 800a016:	461a      	mov	r2, r3
 800a018:	f000 fa95 	bl	800a546 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2160      	movs	r1, #96	; 0x60
 800a022:	4618      	mov	r0, r3
 800a024:	f000 fabf 	bl	800a5a6 <TIM_ITRx_SetConfig>
      break;
 800a028:	e01c      	b.n	800a064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6818      	ldr	r0, [r3, #0]
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	6859      	ldr	r1, [r3, #4]
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	461a      	mov	r2, r3
 800a038:	f000 fa56 	bl	800a4e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2140      	movs	r1, #64	; 0x40
 800a042:	4618      	mov	r0, r3
 800a044:	f000 faaf 	bl	800a5a6 <TIM_ITRx_SetConfig>
      break;
 800a048:	e00c      	b.n	800a064 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4619      	mov	r1, r3
 800a054:	4610      	mov	r0, r2
 800a056:	f000 faa6 	bl	800a5a6 <TIM_ITRx_SetConfig>
      break;
 800a05a:	e003      	b.n	800a064 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	73fb      	strb	r3, [r7, #15]
      break;
 800a060:	e000      	b.n	800a064 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a062:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a074:	7bfb      	ldrb	r3, [r7, #15]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a07e:	b480      	push	{r7}
 800a080:	b083      	sub	sp, #12
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a086:	bf00      	nop
 800a088:	370c      	adds	r7, #12
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr

0800a092 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a092:	b480      	push	{r7}
 800a094:	b083      	sub	sp, #12
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a09a:	bf00      	nop
 800a09c:	370c      	adds	r7, #12
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr

0800a0a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a0a6:	b480      	push	{r7}
 800a0a8:	b083      	sub	sp, #12
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a0ae:	bf00      	nop
 800a0b0:	370c      	adds	r7, #12
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr

0800a0ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a0ba:	b480      	push	{r7}
 800a0bc:	b083      	sub	sp, #12
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a0c2:	bf00      	nop
 800a0c4:	370c      	adds	r7, #12
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr
	...

0800a0d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b085      	sub	sp, #20
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4a34      	ldr	r2, [pc, #208]	; (800a1b4 <TIM_Base_SetConfig+0xe4>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d00f      	beq.n	800a108 <TIM_Base_SetConfig+0x38>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0ee:	d00b      	beq.n	800a108 <TIM_Base_SetConfig+0x38>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4a31      	ldr	r2, [pc, #196]	; (800a1b8 <TIM_Base_SetConfig+0xe8>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d007      	beq.n	800a108 <TIM_Base_SetConfig+0x38>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4a30      	ldr	r2, [pc, #192]	; (800a1bc <TIM_Base_SetConfig+0xec>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d003      	beq.n	800a108 <TIM_Base_SetConfig+0x38>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a2f      	ldr	r2, [pc, #188]	; (800a1c0 <TIM_Base_SetConfig+0xf0>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d108      	bne.n	800a11a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a10e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	4313      	orrs	r3, r2
 800a118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4a25      	ldr	r2, [pc, #148]	; (800a1b4 <TIM_Base_SetConfig+0xe4>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d01b      	beq.n	800a15a <TIM_Base_SetConfig+0x8a>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a128:	d017      	beq.n	800a15a <TIM_Base_SetConfig+0x8a>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4a22      	ldr	r2, [pc, #136]	; (800a1b8 <TIM_Base_SetConfig+0xe8>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d013      	beq.n	800a15a <TIM_Base_SetConfig+0x8a>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	4a21      	ldr	r2, [pc, #132]	; (800a1bc <TIM_Base_SetConfig+0xec>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d00f      	beq.n	800a15a <TIM_Base_SetConfig+0x8a>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4a20      	ldr	r2, [pc, #128]	; (800a1c0 <TIM_Base_SetConfig+0xf0>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d00b      	beq.n	800a15a <TIM_Base_SetConfig+0x8a>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4a1f      	ldr	r2, [pc, #124]	; (800a1c4 <TIM_Base_SetConfig+0xf4>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d007      	beq.n	800a15a <TIM_Base_SetConfig+0x8a>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4a1e      	ldr	r2, [pc, #120]	; (800a1c8 <TIM_Base_SetConfig+0xf8>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d003      	beq.n	800a15a <TIM_Base_SetConfig+0x8a>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	4a1d      	ldr	r2, [pc, #116]	; (800a1cc <TIM_Base_SetConfig+0xfc>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d108      	bne.n	800a16c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	68fa      	ldr	r2, [r7, #12]
 800a168:	4313      	orrs	r3, r2
 800a16a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	695b      	ldr	r3, [r3, #20]
 800a176:	4313      	orrs	r3, r2
 800a178:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	689a      	ldr	r2, [r3, #8]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a08      	ldr	r2, [pc, #32]	; (800a1b4 <TIM_Base_SetConfig+0xe4>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d103      	bne.n	800a1a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	691a      	ldr	r2, [r3, #16]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	615a      	str	r2, [r3, #20]
}
 800a1a6:	bf00      	nop
 800a1a8:	3714      	adds	r7, #20
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop
 800a1b4:	40010000 	.word	0x40010000
 800a1b8:	40000400 	.word	0x40000400
 800a1bc:	40000800 	.word	0x40000800
 800a1c0:	40000c00 	.word	0x40000c00
 800a1c4:	40014000 	.word	0x40014000
 800a1c8:	40014400 	.word	0x40014400
 800a1cc:	40014800 	.word	0x40014800

0800a1d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b087      	sub	sp, #28
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a1b      	ldr	r3, [r3, #32]
 800a1de:	f023 0201 	bic.w	r2, r3, #1
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a1b      	ldr	r3, [r3, #32]
 800a1ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	699b      	ldr	r3, [r3, #24]
 800a1f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f023 0303 	bic.w	r3, r3, #3
 800a206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	68fa      	ldr	r2, [r7, #12]
 800a20e:	4313      	orrs	r3, r2
 800a210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	f023 0302 	bic.w	r3, r3, #2
 800a218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	697a      	ldr	r2, [r7, #20]
 800a220:	4313      	orrs	r3, r2
 800a222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4a1c      	ldr	r2, [pc, #112]	; (800a298 <TIM_OC1_SetConfig+0xc8>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d10c      	bne.n	800a246 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	f023 0308 	bic.w	r3, r3, #8
 800a232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	697a      	ldr	r2, [r7, #20]
 800a23a:	4313      	orrs	r3, r2
 800a23c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	f023 0304 	bic.w	r3, r3, #4
 800a244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4a13      	ldr	r2, [pc, #76]	; (800a298 <TIM_OC1_SetConfig+0xc8>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d111      	bne.n	800a272 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a25c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	695b      	ldr	r3, [r3, #20]
 800a262:	693a      	ldr	r2, [r7, #16]
 800a264:	4313      	orrs	r3, r2
 800a266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	699b      	ldr	r3, [r3, #24]
 800a26c:	693a      	ldr	r2, [r7, #16]
 800a26e:	4313      	orrs	r3, r2
 800a270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	693a      	ldr	r2, [r7, #16]
 800a276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	685a      	ldr	r2, [r3, #4]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	697a      	ldr	r2, [r7, #20]
 800a28a:	621a      	str	r2, [r3, #32]
}
 800a28c:	bf00      	nop
 800a28e:	371c      	adds	r7, #28
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr
 800a298:	40010000 	.word	0x40010000

0800a29c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b087      	sub	sp, #28
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a1b      	ldr	r3, [r3, #32]
 800a2aa:	f023 0210 	bic.w	r2, r3, #16
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a1b      	ldr	r3, [r3, #32]
 800a2b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	699b      	ldr	r3, [r3, #24]
 800a2c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	021b      	lsls	r3, r3, #8
 800a2da:	68fa      	ldr	r2, [r7, #12]
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	f023 0320 	bic.w	r3, r3, #32
 800a2e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	689b      	ldr	r3, [r3, #8]
 800a2ec:	011b      	lsls	r3, r3, #4
 800a2ee:	697a      	ldr	r2, [r7, #20]
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	4a1e      	ldr	r2, [pc, #120]	; (800a370 <TIM_OC2_SetConfig+0xd4>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d10d      	bne.n	800a318 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	011b      	lsls	r3, r3, #4
 800a30a:	697a      	ldr	r2, [r7, #20]
 800a30c:	4313      	orrs	r3, r2
 800a30e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a316:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	4a15      	ldr	r2, [pc, #84]	; (800a370 <TIM_OC2_SetConfig+0xd4>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d113      	bne.n	800a348 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a326:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a32e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	695b      	ldr	r3, [r3, #20]
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	693a      	ldr	r2, [r7, #16]
 800a338:	4313      	orrs	r3, r2
 800a33a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	699b      	ldr	r3, [r3, #24]
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	693a      	ldr	r2, [r7, #16]
 800a344:	4313      	orrs	r3, r2
 800a346:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	693a      	ldr	r2, [r7, #16]
 800a34c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	68fa      	ldr	r2, [r7, #12]
 800a352:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	685a      	ldr	r2, [r3, #4]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	697a      	ldr	r2, [r7, #20]
 800a360:	621a      	str	r2, [r3, #32]
}
 800a362:	bf00      	nop
 800a364:	371c      	adds	r7, #28
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr
 800a36e:	bf00      	nop
 800a370:	40010000 	.word	0x40010000

0800a374 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a374:	b480      	push	{r7}
 800a376:	b087      	sub	sp, #28
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6a1b      	ldr	r3, [r3, #32]
 800a382:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a1b      	ldr	r3, [r3, #32]
 800a38e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	69db      	ldr	r3, [r3, #28]
 800a39a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f023 0303 	bic.w	r3, r3, #3
 800a3aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a3bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	021b      	lsls	r3, r3, #8
 800a3c4:	697a      	ldr	r2, [r7, #20]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4a1d      	ldr	r2, [pc, #116]	; (800a444 <TIM_OC3_SetConfig+0xd0>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d10d      	bne.n	800a3ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	021b      	lsls	r3, r3, #8
 800a3e0:	697a      	ldr	r2, [r7, #20]
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a3ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a14      	ldr	r2, [pc, #80]	; (800a444 <TIM_OC3_SetConfig+0xd0>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d113      	bne.n	800a41e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a404:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	695b      	ldr	r3, [r3, #20]
 800a40a:	011b      	lsls	r3, r3, #4
 800a40c:	693a      	ldr	r2, [r7, #16]
 800a40e:	4313      	orrs	r3, r2
 800a410:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	699b      	ldr	r3, [r3, #24]
 800a416:	011b      	lsls	r3, r3, #4
 800a418:	693a      	ldr	r2, [r7, #16]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	693a      	ldr	r2, [r7, #16]
 800a422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	68fa      	ldr	r2, [r7, #12]
 800a428:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	685a      	ldr	r2, [r3, #4]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	697a      	ldr	r2, [r7, #20]
 800a436:	621a      	str	r2, [r3, #32]
}
 800a438:	bf00      	nop
 800a43a:	371c      	adds	r7, #28
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr
 800a444:	40010000 	.word	0x40010000

0800a448 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a448:	b480      	push	{r7}
 800a44a:	b087      	sub	sp, #28
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a1b      	ldr	r3, [r3, #32]
 800a456:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a1b      	ldr	r3, [r3, #32]
 800a462:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	69db      	ldr	r3, [r3, #28]
 800a46e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a47e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	021b      	lsls	r3, r3, #8
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	4313      	orrs	r3, r2
 800a48a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a492:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	031b      	lsls	r3, r3, #12
 800a49a:	693a      	ldr	r2, [r7, #16]
 800a49c:	4313      	orrs	r3, r2
 800a49e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4a10      	ldr	r2, [pc, #64]	; (800a4e4 <TIM_OC4_SetConfig+0x9c>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d109      	bne.n	800a4bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	695b      	ldr	r3, [r3, #20]
 800a4b4:	019b      	lsls	r3, r3, #6
 800a4b6:	697a      	ldr	r2, [r7, #20]
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	697a      	ldr	r2, [r7, #20]
 800a4c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	685a      	ldr	r2, [r3, #4]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	693a      	ldr	r2, [r7, #16]
 800a4d4:	621a      	str	r2, [r3, #32]
}
 800a4d6:	bf00      	nop
 800a4d8:	371c      	adds	r7, #28
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop
 800a4e4:	40010000 	.word	0x40010000

0800a4e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b087      	sub	sp, #28
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	60f8      	str	r0, [r7, #12]
 800a4f0:	60b9      	str	r1, [r7, #8]
 800a4f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	6a1b      	ldr	r3, [r3, #32]
 800a4f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	6a1b      	ldr	r3, [r3, #32]
 800a4fe:	f023 0201 	bic.w	r2, r3, #1
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	699b      	ldr	r3, [r3, #24]
 800a50a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	011b      	lsls	r3, r3, #4
 800a518:	693a      	ldr	r2, [r7, #16]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	f023 030a 	bic.w	r3, r3, #10
 800a524:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a526:	697a      	ldr	r2, [r7, #20]
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	4313      	orrs	r3, r2
 800a52c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	693a      	ldr	r2, [r7, #16]
 800a532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	697a      	ldr	r2, [r7, #20]
 800a538:	621a      	str	r2, [r3, #32]
}
 800a53a:	bf00      	nop
 800a53c:	371c      	adds	r7, #28
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr

0800a546 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a546:	b480      	push	{r7}
 800a548:	b087      	sub	sp, #28
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	60f8      	str	r0, [r7, #12]
 800a54e:	60b9      	str	r1, [r7, #8]
 800a550:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	6a1b      	ldr	r3, [r3, #32]
 800a556:	f023 0210 	bic.w	r2, r3, #16
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	699b      	ldr	r3, [r3, #24]
 800a562:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	6a1b      	ldr	r3, [r3, #32]
 800a568:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a570:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	031b      	lsls	r3, r3, #12
 800a576:	697a      	ldr	r2, [r7, #20]
 800a578:	4313      	orrs	r3, r2
 800a57a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a582:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	011b      	lsls	r3, r3, #4
 800a588:	693a      	ldr	r2, [r7, #16]
 800a58a:	4313      	orrs	r3, r2
 800a58c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	697a      	ldr	r2, [r7, #20]
 800a592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	693a      	ldr	r2, [r7, #16]
 800a598:	621a      	str	r2, [r3, #32]
}
 800a59a:	bf00      	nop
 800a59c:	371c      	adds	r7, #28
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr

0800a5a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a5a6:	b480      	push	{r7}
 800a5a8:	b085      	sub	sp, #20
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a5be:	683a      	ldr	r2, [r7, #0]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	f043 0307 	orr.w	r3, r3, #7
 800a5c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	68fa      	ldr	r2, [r7, #12]
 800a5ce:	609a      	str	r2, [r3, #8]
}
 800a5d0:	bf00      	nop
 800a5d2:	3714      	adds	r7, #20
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b087      	sub	sp, #28
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	607a      	str	r2, [r7, #4]
 800a5e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	021a      	lsls	r2, r3, #8
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	431a      	orrs	r2, r3
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	4313      	orrs	r3, r2
 800a604:	697a      	ldr	r2, [r7, #20]
 800a606:	4313      	orrs	r3, r2
 800a608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	697a      	ldr	r2, [r7, #20]
 800a60e:	609a      	str	r2, [r3, #8]
}
 800a610:	bf00      	nop
 800a612:	371c      	adds	r7, #28
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b087      	sub	sp, #28
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	f003 031f 	and.w	r3, r3, #31
 800a62e:	2201      	movs	r2, #1
 800a630:	fa02 f303 	lsl.w	r3, r2, r3
 800a634:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	6a1a      	ldr	r2, [r3, #32]
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	43db      	mvns	r3, r3
 800a63e:	401a      	ands	r2, r3
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	6a1a      	ldr	r2, [r3, #32]
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	f003 031f 	and.w	r3, r3, #31
 800a64e:	6879      	ldr	r1, [r7, #4]
 800a650:	fa01 f303 	lsl.w	r3, r1, r3
 800a654:	431a      	orrs	r2, r3
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	621a      	str	r2, [r3, #32]
}
 800a65a:	bf00      	nop
 800a65c:	371c      	adds	r7, #28
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr
	...

0800a668 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d101      	bne.n	800a680 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a67c:	2302      	movs	r3, #2
 800a67e:	e050      	b.n	800a722 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2202      	movs	r2, #2
 800a68c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	68fa      	ldr	r2, [r7, #12]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a1c      	ldr	r2, [pc, #112]	; (800a730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d018      	beq.n	800a6f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6cc:	d013      	beq.n	800a6f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a18      	ldr	r2, [pc, #96]	; (800a734 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d00e      	beq.n	800a6f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a16      	ldr	r2, [pc, #88]	; (800a738 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d009      	beq.n	800a6f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a15      	ldr	r2, [pc, #84]	; (800a73c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d004      	beq.n	800a6f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a13      	ldr	r2, [pc, #76]	; (800a740 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d10c      	bne.n	800a710 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	68ba      	ldr	r2, [r7, #8]
 800a704:	4313      	orrs	r3, r2
 800a706:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68ba      	ldr	r2, [r7, #8]
 800a70e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a720:	2300      	movs	r3, #0
}
 800a722:	4618      	mov	r0, r3
 800a724:	3714      	adds	r7, #20
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	40010000 	.word	0x40010000
 800a734:	40000400 	.word	0x40000400
 800a738:	40000800 	.word	0x40000800
 800a73c:	40000c00 	.word	0x40000c00
 800a740:	40014000 	.word	0x40014000

0800a744 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a74c:	bf00      	nop
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a760:	bf00      	nop
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d101      	bne.n	800a77e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a77a:	2301      	movs	r3, #1
 800a77c:	e03f      	b.n	800a7fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a784:	b2db      	uxtb	r3, r3
 800a786:	2b00      	cmp	r3, #0
 800a788:	d106      	bne.n	800a798 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f7fa f89e 	bl	80048d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2224      	movs	r2, #36	; 0x24
 800a79c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	68da      	ldr	r2, [r3, #12]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a7ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f000 ffcd 	bl	800b750 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	691a      	ldr	r2, [r3, #16]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a7c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	695a      	ldr	r2, [r3, #20]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a7d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	68da      	ldr	r2, [r3, #12]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a7e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2220      	movs	r2, #32
 800a7f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2220      	movs	r2, #32
 800a7f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a7fc:	2300      	movs	r3, #0
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3708      	adds	r7, #8
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
	...

0800a808 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b08c      	sub	sp, #48	; 0x30
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	4613      	mov	r3, r2
 800a814:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	2b20      	cmp	r3, #32
 800a820:	d165      	bne.n	800a8ee <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d002      	beq.n	800a82e <HAL_UART_Transmit_DMA+0x26>
 800a828:	88fb      	ldrh	r3, [r7, #6]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d101      	bne.n	800a832 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a82e:	2301      	movs	r3, #1
 800a830:	e05e      	b.n	800a8f0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d101      	bne.n	800a840 <HAL_UART_Transmit_DMA+0x38>
 800a83c:	2302      	movs	r3, #2
 800a83e:	e057      	b.n	800a8f0 <HAL_UART_Transmit_DMA+0xe8>
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a848:	68ba      	ldr	r2, [r7, #8]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	88fa      	ldrh	r2, [r7, #6]
 800a852:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	88fa      	ldrh	r2, [r7, #6]
 800a858:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2200      	movs	r2, #0
 800a85e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2221      	movs	r2, #33	; 0x21
 800a864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a86c:	4a22      	ldr	r2, [pc, #136]	; (800a8f8 <HAL_UART_Transmit_DMA+0xf0>)
 800a86e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a874:	4a21      	ldr	r2, [pc, #132]	; (800a8fc <HAL_UART_Transmit_DMA+0xf4>)
 800a876:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a87c:	4a20      	ldr	r2, [pc, #128]	; (800a900 <HAL_UART_Transmit_DMA+0xf8>)
 800a87e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a884:	2200      	movs	r2, #0
 800a886:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a888:	f107 0308 	add.w	r3, r7, #8
 800a88c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a894:	6819      	ldr	r1, [r3, #0]
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	3304      	adds	r3, #4
 800a89c:	461a      	mov	r2, r3
 800a89e:	88fb      	ldrh	r3, [r7, #6]
 800a8a0:	f7fa fbfe 	bl	80050a0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a8ac:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	3314      	adds	r3, #20
 800a8bc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	e853 3f00 	ldrex	r3, [r3]
 800a8c4:	617b      	str	r3, [r7, #20]
   return(result);
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	3314      	adds	r3, #20
 800a8d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8d6:	627a      	str	r2, [r7, #36]	; 0x24
 800a8d8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8da:	6a39      	ldr	r1, [r7, #32]
 800a8dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8de:	e841 2300 	strex	r3, r2, [r1]
 800a8e2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d1e5      	bne.n	800a8b6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	e000      	b.n	800a8f0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a8ee:	2302      	movs	r3, #2
  }
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3730      	adds	r7, #48	; 0x30
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	0800afe9 	.word	0x0800afe9
 800a8fc:	0800b083 	.word	0x0800b083
 800a900:	0800b1fb 	.word	0x0800b1fb

0800a904 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	4613      	mov	r3, r2
 800a910:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	2b20      	cmp	r3, #32
 800a91c:	d11d      	bne.n	800a95a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d002      	beq.n	800a92a <HAL_UART_Receive_DMA+0x26>
 800a924:	88fb      	ldrh	r3, [r7, #6]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d101      	bne.n	800a92e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	e016      	b.n	800a95c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a934:	2b01      	cmp	r3, #1
 800a936:	d101      	bne.n	800a93c <HAL_UART_Receive_DMA+0x38>
 800a938:	2302      	movs	r3, #2
 800a93a:	e00f      	b.n	800a95c <HAL_UART_Receive_DMA+0x58>
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2201      	movs	r2, #1
 800a940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2200      	movs	r2, #0
 800a948:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a94a:	88fb      	ldrh	r3, [r7, #6]
 800a94c:	461a      	mov	r2, r3
 800a94e:	68b9      	ldr	r1, [r7, #8]
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f000 fc9d 	bl	800b290 <UART_Start_Receive_DMA>
 800a956:	4603      	mov	r3, r0
 800a958:	e000      	b.n	800a95c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a95a:	2302      	movs	r3, #2
  }
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3710      	adds	r7, #16
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b090      	sub	sp, #64	; 0x40
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a96c:	2300      	movs	r3, #0
 800a96e:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	695b      	ldr	r3, [r3, #20]
 800a976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a97a:	2b80      	cmp	r3, #128	; 0x80
 800a97c:	bf0c      	ite	eq
 800a97e:	2301      	moveq	r3, #1
 800a980:	2300      	movne	r3, #0
 800a982:	b2db      	uxtb	r3, r3
 800a984:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	2b21      	cmp	r3, #33	; 0x21
 800a990:	d128      	bne.n	800a9e4 <HAL_UART_DMAStop+0x80>
 800a992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a994:	2b00      	cmp	r3, #0
 800a996:	d025      	beq.n	800a9e4 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	3314      	adds	r3, #20
 800a99e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a2:	e853 3f00 	ldrex	r3, [r3]
 800a9a6:	623b      	str	r3, [r7, #32]
   return(result);
 800a9a8:	6a3b      	ldr	r3, [r7, #32]
 800a9aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9ae:	63bb      	str	r3, [r7, #56]	; 0x38
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	3314      	adds	r3, #20
 800a9b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9b8:	633a      	str	r2, [r7, #48]	; 0x30
 800a9ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a9be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9c0:	e841 2300 	strex	r3, r2, [r1]
 800a9c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d1e5      	bne.n	800a998 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d004      	beq.n	800a9de <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7fa fbb9 	bl	8005150 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 fcf4 	bl	800b3cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	695b      	ldr	r3, [r3, #20]
 800a9ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9ee:	2b40      	cmp	r3, #64	; 0x40
 800a9f0:	bf0c      	ite	eq
 800a9f2:	2301      	moveq	r3, #1
 800a9f4:	2300      	movne	r3, #0
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	2b22      	cmp	r3, #34	; 0x22
 800aa04:	d128      	bne.n	800aa58 <HAL_UART_DMAStop+0xf4>
 800aa06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d025      	beq.n	800aa58 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	3314      	adds	r3, #20
 800aa12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	e853 3f00 	ldrex	r3, [r3]
 800aa1a:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa22:	637b      	str	r3, [r7, #52]	; 0x34
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	3314      	adds	r3, #20
 800aa2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa2c:	61fa      	str	r2, [r7, #28]
 800aa2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa30:	69b9      	ldr	r1, [r7, #24]
 800aa32:	69fa      	ldr	r2, [r7, #28]
 800aa34:	e841 2300 	strex	r3, r2, [r1]
 800aa38:	617b      	str	r3, [r7, #20]
   return(result);
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d1e5      	bne.n	800aa0c <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d004      	beq.n	800aa52 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7fa fb7f 	bl	8005150 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 fce2 	bl	800b41c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800aa58:	2300      	movs	r3, #0
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3740      	adds	r7, #64	; 0x40
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
	...

0800aa64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b0ba      	sub	sp, #232	; 0xe8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	695b      	ldr	r3, [r3, #20]
 800aa86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800aa90:	2300      	movs	r3, #0
 800aa92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800aa96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa9a:	f003 030f 	and.w	r3, r3, #15
 800aa9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800aaa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d10f      	bne.n	800aaca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aaaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaae:	f003 0320 	and.w	r3, r3, #32
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d009      	beq.n	800aaca <HAL_UART_IRQHandler+0x66>
 800aab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aaba:	f003 0320 	and.w	r3, r3, #32
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d003      	beq.n	800aaca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 fd89 	bl	800b5da <UART_Receive_IT>
      return;
 800aac8:	e256      	b.n	800af78 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800aaca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aace:	2b00      	cmp	r3, #0
 800aad0:	f000 80de 	beq.w	800ac90 <HAL_UART_IRQHandler+0x22c>
 800aad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aad8:	f003 0301 	and.w	r3, r3, #1
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d106      	bne.n	800aaee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800aae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aae4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f000 80d1 	beq.w	800ac90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aaee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaf2:	f003 0301 	and.w	r3, r3, #1
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d00b      	beq.n	800ab12 <HAL_UART_IRQHandler+0xae>
 800aafa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aafe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d005      	beq.n	800ab12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab0a:	f043 0201 	orr.w	r2, r3, #1
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ab12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab16:	f003 0304 	and.w	r3, r3, #4
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d00b      	beq.n	800ab36 <HAL_UART_IRQHandler+0xd2>
 800ab1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab22:	f003 0301 	and.w	r3, r3, #1
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d005      	beq.n	800ab36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab2e:	f043 0202 	orr.w	r2, r3, #2
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ab36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab3a:	f003 0302 	and.w	r3, r3, #2
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d00b      	beq.n	800ab5a <HAL_UART_IRQHandler+0xf6>
 800ab42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab46:	f003 0301 	and.w	r3, r3, #1
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d005      	beq.n	800ab5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab52:	f043 0204 	orr.w	r2, r3, #4
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ab5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab5e:	f003 0308 	and.w	r3, r3, #8
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d011      	beq.n	800ab8a <HAL_UART_IRQHandler+0x126>
 800ab66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab6a:	f003 0320 	and.w	r3, r3, #32
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d105      	bne.n	800ab7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ab72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab76:	f003 0301 	and.w	r3, r3, #1
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d005      	beq.n	800ab8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab82:	f043 0208 	orr.w	r2, r3, #8
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f000 81ed 	beq.w	800af6e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ab94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab98:	f003 0320 	and.w	r3, r3, #32
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d008      	beq.n	800abb2 <HAL_UART_IRQHandler+0x14e>
 800aba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aba4:	f003 0320 	and.w	r3, r3, #32
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d002      	beq.n	800abb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 fd14 	bl	800b5da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	695b      	ldr	r3, [r3, #20]
 800abb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abbc:	2b40      	cmp	r3, #64	; 0x40
 800abbe:	bf0c      	ite	eq
 800abc0:	2301      	moveq	r3, #1
 800abc2:	2300      	movne	r3, #0
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abce:	f003 0308 	and.w	r3, r3, #8
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d103      	bne.n	800abde <HAL_UART_IRQHandler+0x17a>
 800abd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d04f      	beq.n	800ac7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 fc1c 	bl	800b41c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	695b      	ldr	r3, [r3, #20]
 800abea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abee:	2b40      	cmp	r3, #64	; 0x40
 800abf0:	d141      	bne.n	800ac76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	3314      	adds	r3, #20
 800abf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ac00:	e853 3f00 	ldrex	r3, [r3]
 800ac04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ac08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ac0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	3314      	adds	r3, #20
 800ac1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ac1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ac22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ac2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ac2e:	e841 2300 	strex	r3, r2, [r1]
 800ac32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ac36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d1d9      	bne.n	800abf2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d013      	beq.n	800ac6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac4a:	4a7d      	ldr	r2, [pc, #500]	; (800ae40 <HAL_UART_IRQHandler+0x3dc>)
 800ac4c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7fa faec 	bl	8005230 <HAL_DMA_Abort_IT>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d016      	beq.n	800ac8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ac68:	4610      	mov	r0, r2
 800ac6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac6c:	e00e      	b.n	800ac8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f000 f9a4 	bl	800afbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac74:	e00a      	b.n	800ac8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f000 f9a0 	bl	800afbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac7c:	e006      	b.n	800ac8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 f99c 	bl	800afbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800ac8a:	e170      	b.n	800af6e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac8c:	bf00      	nop
    return;
 800ac8e:	e16e      	b.n	800af6e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	f040 814a 	bne.w	800af2e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ac9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac9e:	f003 0310 	and.w	r3, r3, #16
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	f000 8143 	beq.w	800af2e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800aca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acac:	f003 0310 	and.w	r3, r3, #16
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	f000 813c 	beq.w	800af2e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800acb6:	2300      	movs	r3, #0
 800acb8:	60bb      	str	r3, [r7, #8]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	60bb      	str	r3, [r7, #8]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	60bb      	str	r3, [r7, #8]
 800acca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	695b      	ldr	r3, [r3, #20]
 800acd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acd6:	2b40      	cmp	r3, #64	; 0x40
 800acd8:	f040 80b4 	bne.w	800ae44 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ace8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800acec:	2b00      	cmp	r3, #0
 800acee:	f000 8140 	beq.w	800af72 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800acf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800acfa:	429a      	cmp	r2, r3
 800acfc:	f080 8139 	bcs.w	800af72 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ad06:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad0c:	69db      	ldr	r3, [r3, #28]
 800ad0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad12:	f000 8088 	beq.w	800ae26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	330c      	adds	r3, #12
 800ad1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ad24:	e853 3f00 	ldrex	r3, [r3]
 800ad28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ad2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ad30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	330c      	adds	r3, #12
 800ad3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ad42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ad46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ad4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ad52:	e841 2300 	strex	r3, r2, [r1]
 800ad56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ad5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d1d9      	bne.n	800ad16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	3314      	adds	r3, #20
 800ad68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad6c:	e853 3f00 	ldrex	r3, [r3]
 800ad70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ad72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad74:	f023 0301 	bic.w	r3, r3, #1
 800ad78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	3314      	adds	r3, #20
 800ad82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ad86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ad8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ad8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ad92:	e841 2300 	strex	r3, r2, [r1]
 800ad96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ad98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d1e1      	bne.n	800ad62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	3314      	adds	r3, #20
 800ada4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ada8:	e853 3f00 	ldrex	r3, [r3]
 800adac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800adae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	3314      	adds	r3, #20
 800adbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800adc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800adc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800adc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800adca:	e841 2300 	strex	r3, r2, [r1]
 800adce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800add0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800add2:	2b00      	cmp	r3, #0
 800add4:	d1e3      	bne.n	800ad9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2220      	movs	r2, #32
 800adda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	330c      	adds	r3, #12
 800adea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adee:	e853 3f00 	ldrex	r3, [r3]
 800adf2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800adf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adf6:	f023 0310 	bic.w	r3, r3, #16
 800adfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	330c      	adds	r3, #12
 800ae04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ae08:	65ba      	str	r2, [r7, #88]	; 0x58
 800ae0a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ae0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae10:	e841 2300 	strex	r3, r2, [r1]
 800ae14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ae16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d1e3      	bne.n	800ade4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7fa f995 	bl	8005150 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	1ad3      	subs	r3, r2, r3
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	4619      	mov	r1, r3
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 f8ca 	bl	800afd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ae3c:	e099      	b.n	800af72 <HAL_UART_IRQHandler+0x50e>
 800ae3e:	bf00      	nop
 800ae40:	0800b4e3 	.word	0x0800b4e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	1ad3      	subs	r3, r2, r3
 800ae50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	f000 808b 	beq.w	800af76 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800ae60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	f000 8086 	beq.w	800af76 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	330c      	adds	r3, #12
 800ae70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae74:	e853 3f00 	ldrex	r3, [r3]
 800ae78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ae7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	330c      	adds	r3, #12
 800ae8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ae8e:	647a      	str	r2, [r7, #68]	; 0x44
 800ae90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae96:	e841 2300 	strex	r3, r2, [r1]
 800ae9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d1e3      	bne.n	800ae6a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	3314      	adds	r3, #20
 800aea8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeac:	e853 3f00 	ldrex	r3, [r3]
 800aeb0:	623b      	str	r3, [r7, #32]
   return(result);
 800aeb2:	6a3b      	ldr	r3, [r7, #32]
 800aeb4:	f023 0301 	bic.w	r3, r3, #1
 800aeb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	3314      	adds	r3, #20
 800aec2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aec6:	633a      	str	r2, [r7, #48]	; 0x30
 800aec8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aece:	e841 2300 	strex	r3, r2, [r1]
 800aed2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d1e3      	bne.n	800aea2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2220      	movs	r2, #32
 800aede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2200      	movs	r2, #0
 800aee6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	330c      	adds	r3, #12
 800aeee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	e853 3f00 	ldrex	r3, [r3]
 800aef6:	60fb      	str	r3, [r7, #12]
   return(result);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f023 0310 	bic.w	r3, r3, #16
 800aefe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	330c      	adds	r3, #12
 800af08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800af0c:	61fa      	str	r2, [r7, #28]
 800af0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af10:	69b9      	ldr	r1, [r7, #24]
 800af12:	69fa      	ldr	r2, [r7, #28]
 800af14:	e841 2300 	strex	r3, r2, [r1]
 800af18:	617b      	str	r3, [r7, #20]
   return(result);
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d1e3      	bne.n	800aee8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800af20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800af24:	4619      	mov	r1, r3
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 f852 	bl	800afd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800af2c:	e023      	b.n	800af76 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800af2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af36:	2b00      	cmp	r3, #0
 800af38:	d009      	beq.n	800af4e <HAL_UART_IRQHandler+0x4ea>
 800af3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af42:	2b00      	cmp	r3, #0
 800af44:	d003      	beq.n	800af4e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fadf 	bl	800b50a <UART_Transmit_IT>
    return;
 800af4c:	e014      	b.n	800af78 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800af4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af56:	2b00      	cmp	r3, #0
 800af58:	d00e      	beq.n	800af78 <HAL_UART_IRQHandler+0x514>
 800af5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af62:	2b00      	cmp	r3, #0
 800af64:	d008      	beq.n	800af78 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 fb1f 	bl	800b5aa <UART_EndTransmit_IT>
    return;
 800af6c:	e004      	b.n	800af78 <HAL_UART_IRQHandler+0x514>
    return;
 800af6e:	bf00      	nop
 800af70:	e002      	b.n	800af78 <HAL_UART_IRQHandler+0x514>
      return;
 800af72:	bf00      	nop
 800af74:	e000      	b.n	800af78 <HAL_UART_IRQHandler+0x514>
      return;
 800af76:	bf00      	nop
  }
}
 800af78:	37e8      	adds	r7, #232	; 0xe8
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop

0800af80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800af80:	b480      	push	{r7}
 800af82:	b083      	sub	sp, #12
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800af88:	bf00      	nop
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800af9c:	bf00      	nop
 800af9e:	370c      	adds	r7, #12
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr

0800afa8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800afb0:	bf00      	nop
 800afb2:	370c      	adds	r7, #12
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr

0800afbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b083      	sub	sp, #12
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800afc4:	bf00      	nop
 800afc6:	370c      	adds	r7, #12
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr

0800afd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b083      	sub	sp, #12
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	460b      	mov	r3, r1
 800afda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800afdc:	bf00      	nop
 800afde:	370c      	adds	r7, #12
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr

0800afe8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b090      	sub	sp, #64	; 0x40
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b000:	2b00      	cmp	r3, #0
 800b002:	d137      	bne.n	800b074 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b006:	2200      	movs	r2, #0
 800b008:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b00a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	3314      	adds	r3, #20
 800b010:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b014:	e853 3f00 	ldrex	r3, [r3]
 800b018:	623b      	str	r3, [r7, #32]
   return(result);
 800b01a:	6a3b      	ldr	r3, [r7, #32]
 800b01c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b020:	63bb      	str	r3, [r7, #56]	; 0x38
 800b022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	3314      	adds	r3, #20
 800b028:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b02a:	633a      	str	r2, [r7, #48]	; 0x30
 800b02c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b02e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b032:	e841 2300 	strex	r3, r2, [r1]
 800b036:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d1e5      	bne.n	800b00a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b03e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	330c      	adds	r3, #12
 800b044:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	e853 3f00 	ldrex	r3, [r3]
 800b04c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b054:	637b      	str	r3, [r7, #52]	; 0x34
 800b056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	330c      	adds	r3, #12
 800b05c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b05e:	61fa      	str	r2, [r7, #28]
 800b060:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b062:	69b9      	ldr	r1, [r7, #24]
 800b064:	69fa      	ldr	r2, [r7, #28]
 800b066:	e841 2300 	strex	r3, r2, [r1]
 800b06a:	617b      	str	r3, [r7, #20]
   return(result);
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d1e5      	bne.n	800b03e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b072:	e002      	b.n	800b07a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b074:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b076:	f7ff ff83 	bl	800af80 <HAL_UART_TxCpltCallback>
}
 800b07a:	bf00      	nop
 800b07c:	3740      	adds	r7, #64	; 0x40
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}

0800b082 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b084      	sub	sp, #16
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b08e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b090:	68f8      	ldr	r0, [r7, #12]
 800b092:	f7ff ff7f 	bl	800af94 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b096:	bf00      	nop
 800b098:	3710      	adds	r7, #16
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}

0800b09e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b09c      	sub	sp, #112	; 0x70
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d172      	bne.n	800b1a0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b0ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0bc:	2200      	movs	r2, #0
 800b0be:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	330c      	adds	r3, #12
 800b0c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0ca:	e853 3f00 	ldrex	r3, [r3]
 800b0ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b0d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0d6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b0d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	330c      	adds	r3, #12
 800b0de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b0e0:	65ba      	str	r2, [r7, #88]	; 0x58
 800b0e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b0e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b0e8:	e841 2300 	strex	r3, r2, [r1]
 800b0ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b0ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d1e5      	bne.n	800b0c0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	3314      	adds	r3, #20
 800b0fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fe:	e853 3f00 	ldrex	r3, [r3]
 800b102:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b106:	f023 0301 	bic.w	r3, r3, #1
 800b10a:	667b      	str	r3, [r7, #100]	; 0x64
 800b10c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	3314      	adds	r3, #20
 800b112:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b114:	647a      	str	r2, [r7, #68]	; 0x44
 800b116:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b118:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b11a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b11c:	e841 2300 	strex	r3, r2, [r1]
 800b120:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b124:	2b00      	cmp	r3, #0
 800b126:	d1e5      	bne.n	800b0f4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	3314      	adds	r3, #20
 800b12e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b132:	e853 3f00 	ldrex	r3, [r3]
 800b136:	623b      	str	r3, [r7, #32]
   return(result);
 800b138:	6a3b      	ldr	r3, [r7, #32]
 800b13a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b13e:	663b      	str	r3, [r7, #96]	; 0x60
 800b140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	3314      	adds	r3, #20
 800b146:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b148:	633a      	str	r2, [r7, #48]	; 0x30
 800b14a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b14e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b150:	e841 2300 	strex	r3, r2, [r1]
 800b154:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d1e5      	bne.n	800b128 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b15c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b15e:	2220      	movs	r2, #32
 800b160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d119      	bne.n	800b1a0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b16c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	330c      	adds	r3, #12
 800b172:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	e853 3f00 	ldrex	r3, [r3]
 800b17a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f023 0310 	bic.w	r3, r3, #16
 800b182:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	330c      	adds	r3, #12
 800b18a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b18c:	61fa      	str	r2, [r7, #28]
 800b18e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b190:	69b9      	ldr	r1, [r7, #24]
 800b192:	69fa      	ldr	r2, [r7, #28]
 800b194:	e841 2300 	strex	r3, r2, [r1]
 800b198:	617b      	str	r3, [r7, #20]
   return(result);
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d1e5      	bne.n	800b16c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d106      	bne.n	800b1b6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b1a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b1b0:	f7ff ff0e 	bl	800afd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b1b4:	e002      	b.n	800b1bc <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b1b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b1b8:	f7f9 f9be 	bl	8004538 <HAL_UART_RxCpltCallback>
}
 800b1bc:	bf00      	nop
 800b1be:	3770      	adds	r7, #112	; 0x70
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d108      	bne.n	800b1ec <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b1de:	085b      	lsrs	r3, r3, #1
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	68f8      	ldr	r0, [r7, #12]
 800b1e6:	f7ff fef3 	bl	800afd0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b1ea:	e002      	b.n	800b1f2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f7ff fedb 	bl	800afa8 <HAL_UART_RxHalfCpltCallback>
}
 800b1f2:	bf00      	nop
 800b1f4:	3710      	adds	r7, #16
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b084      	sub	sp, #16
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b202:	2300      	movs	r3, #0
 800b204:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b20a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	695b      	ldr	r3, [r3, #20]
 800b212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b216:	2b80      	cmp	r3, #128	; 0x80
 800b218:	bf0c      	ite	eq
 800b21a:	2301      	moveq	r3, #1
 800b21c:	2300      	movne	r3, #0
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b228:	b2db      	uxtb	r3, r3
 800b22a:	2b21      	cmp	r3, #33	; 0x21
 800b22c:	d108      	bne.n	800b240 <UART_DMAError+0x46>
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d005      	beq.n	800b240 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	2200      	movs	r2, #0
 800b238:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b23a:	68b8      	ldr	r0, [r7, #8]
 800b23c:	f000 f8c6 	bl	800b3cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	695b      	ldr	r3, [r3, #20]
 800b246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b24a:	2b40      	cmp	r3, #64	; 0x40
 800b24c:	bf0c      	ite	eq
 800b24e:	2301      	moveq	r3, #1
 800b250:	2300      	movne	r3, #0
 800b252:	b2db      	uxtb	r3, r3
 800b254:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	2b22      	cmp	r3, #34	; 0x22
 800b260:	d108      	bne.n	800b274 <UART_DMAError+0x7a>
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d005      	beq.n	800b274 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	2200      	movs	r2, #0
 800b26c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b26e:	68b8      	ldr	r0, [r7, #8]
 800b270:	f000 f8d4 	bl	800b41c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b278:	f043 0210 	orr.w	r2, r3, #16
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b280:	68b8      	ldr	r0, [r7, #8]
 800b282:	f7ff fe9b 	bl	800afbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b286:	bf00      	nop
 800b288:	3710      	adds	r7, #16
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
	...

0800b290 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b098      	sub	sp, #96	; 0x60
 800b294:	af00      	add	r7, sp, #0
 800b296:	60f8      	str	r0, [r7, #12]
 800b298:	60b9      	str	r1, [r7, #8]
 800b29a:	4613      	mov	r3, r2
 800b29c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b29e:	68ba      	ldr	r2, [r7, #8]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	88fa      	ldrh	r2, [r7, #6]
 800b2a8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2222      	movs	r2, #34	; 0x22
 800b2b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2bc:	4a40      	ldr	r2, [pc, #256]	; (800b3c0 <UART_Start_Receive_DMA+0x130>)
 800b2be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2c4:	4a3f      	ldr	r2, [pc, #252]	; (800b3c4 <UART_Start_Receive_DMA+0x134>)
 800b2c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2cc:	4a3e      	ldr	r2, [pc, #248]	; (800b3c8 <UART_Start_Receive_DMA+0x138>)
 800b2ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b2d8:	f107 0308 	add.w	r3, r7, #8
 800b2dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	3304      	adds	r3, #4
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	88fb      	ldrh	r3, [r7, #6]
 800b2f0:	f7f9 fed6 	bl	80050a0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	613b      	str	r3, [r7, #16]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	613b      	str	r3, [r7, #16]
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	613b      	str	r3, [r7, #16]
 800b308:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2200      	movs	r2, #0
 800b30e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	691b      	ldr	r3, [r3, #16]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d019      	beq.n	800b34e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	330c      	adds	r3, #12
 800b320:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b324:	e853 3f00 	ldrex	r3, [r3]
 800b328:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b32a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b32c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b330:	65bb      	str	r3, [r7, #88]	; 0x58
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	330c      	adds	r3, #12
 800b338:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b33a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b33c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b33e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b340:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b342:	e841 2300 	strex	r3, r2, [r1]
 800b346:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d1e5      	bne.n	800b31a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	3314      	adds	r3, #20
 800b354:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b358:	e853 3f00 	ldrex	r3, [r3]
 800b35c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b360:	f043 0301 	orr.w	r3, r3, #1
 800b364:	657b      	str	r3, [r7, #84]	; 0x54
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	3314      	adds	r3, #20
 800b36c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b36e:	63ba      	str	r2, [r7, #56]	; 0x38
 800b370:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b372:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b374:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b376:	e841 2300 	strex	r3, r2, [r1]
 800b37a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d1e5      	bne.n	800b34e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	3314      	adds	r3, #20
 800b388:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b38a:	69bb      	ldr	r3, [r7, #24]
 800b38c:	e853 3f00 	ldrex	r3, [r3]
 800b390:	617b      	str	r3, [r7, #20]
   return(result);
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b398:	653b      	str	r3, [r7, #80]	; 0x50
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	3314      	adds	r3, #20
 800b3a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b3a2:	627a      	str	r2, [r7, #36]	; 0x24
 800b3a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a6:	6a39      	ldr	r1, [r7, #32]
 800b3a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3aa:	e841 2300 	strex	r3, r2, [r1]
 800b3ae:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d1e5      	bne.n	800b382 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800b3b6:	2300      	movs	r3, #0
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3760      	adds	r7, #96	; 0x60
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	0800b09f 	.word	0x0800b09f
 800b3c4:	0800b1c5 	.word	0x0800b1c5
 800b3c8:	0800b1fb 	.word	0x0800b1fb

0800b3cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b089      	sub	sp, #36	; 0x24
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	330c      	adds	r3, #12
 800b3da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	e853 3f00 	ldrex	r3, [r3]
 800b3e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b3ea:	61fb      	str	r3, [r7, #28]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	330c      	adds	r3, #12
 800b3f2:	69fa      	ldr	r2, [r7, #28]
 800b3f4:	61ba      	str	r2, [r7, #24]
 800b3f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f8:	6979      	ldr	r1, [r7, #20]
 800b3fa:	69ba      	ldr	r2, [r7, #24]
 800b3fc:	e841 2300 	strex	r3, r2, [r1]
 800b400:	613b      	str	r3, [r7, #16]
   return(result);
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d1e5      	bne.n	800b3d4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2220      	movs	r2, #32
 800b40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b410:	bf00      	nop
 800b412:	3724      	adds	r7, #36	; 0x24
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b095      	sub	sp, #84	; 0x54
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	330c      	adds	r3, #12
 800b42a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b42c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b42e:	e853 3f00 	ldrex	r3, [r3]
 800b432:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b436:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b43a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	330c      	adds	r3, #12
 800b442:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b444:	643a      	str	r2, [r7, #64]	; 0x40
 800b446:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b448:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b44a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b44c:	e841 2300 	strex	r3, r2, [r1]
 800b450:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b454:	2b00      	cmp	r3, #0
 800b456:	d1e5      	bne.n	800b424 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	3314      	adds	r3, #20
 800b45e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b460:	6a3b      	ldr	r3, [r7, #32]
 800b462:	e853 3f00 	ldrex	r3, [r3]
 800b466:	61fb      	str	r3, [r7, #28]
   return(result);
 800b468:	69fb      	ldr	r3, [r7, #28]
 800b46a:	f023 0301 	bic.w	r3, r3, #1
 800b46e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	3314      	adds	r3, #20
 800b476:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b478:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b47a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b47c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b47e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b480:	e841 2300 	strex	r3, r2, [r1]
 800b484:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d1e5      	bne.n	800b458 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b490:	2b01      	cmp	r3, #1
 800b492:	d119      	bne.n	800b4c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	330c      	adds	r3, #12
 800b49a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	e853 3f00 	ldrex	r3, [r3]
 800b4a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	f023 0310 	bic.w	r3, r3, #16
 800b4aa:	647b      	str	r3, [r7, #68]	; 0x44
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	330c      	adds	r3, #12
 800b4b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4b4:	61ba      	str	r2, [r7, #24]
 800b4b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b8:	6979      	ldr	r1, [r7, #20]
 800b4ba:	69ba      	ldr	r2, [r7, #24]
 800b4bc:	e841 2300 	strex	r3, r2, [r1]
 800b4c0:	613b      	str	r3, [r7, #16]
   return(result);
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d1e5      	bne.n	800b494 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2220      	movs	r2, #32
 800b4cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b4d6:	bf00      	nop
 800b4d8:	3754      	adds	r7, #84	; 0x54
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr

0800b4e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b4e2:	b580      	push	{r7, lr}
 800b4e4:	b084      	sub	sp, #16
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b4fc:	68f8      	ldr	r0, [r7, #12]
 800b4fe:	f7ff fd5d 	bl	800afbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b502:	bf00      	nop
 800b504:	3710      	adds	r7, #16
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b50a:	b480      	push	{r7}
 800b50c:	b085      	sub	sp, #20
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	2b21      	cmp	r3, #33	; 0x21
 800b51c:	d13e      	bne.n	800b59c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	689b      	ldr	r3, [r3, #8]
 800b522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b526:	d114      	bne.n	800b552 <UART_Transmit_IT+0x48>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	691b      	ldr	r3, [r3, #16]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d110      	bne.n	800b552 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6a1b      	ldr	r3, [r3, #32]
 800b534:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	881b      	ldrh	r3, [r3, #0]
 800b53a:	461a      	mov	r2, r3
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b544:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6a1b      	ldr	r3, [r3, #32]
 800b54a:	1c9a      	adds	r2, r3, #2
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	621a      	str	r2, [r3, #32]
 800b550:	e008      	b.n	800b564 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a1b      	ldr	r3, [r3, #32]
 800b556:	1c59      	adds	r1, r3, #1
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	6211      	str	r1, [r2, #32]
 800b55c:	781a      	ldrb	r2, [r3, #0]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b568:	b29b      	uxth	r3, r3
 800b56a:	3b01      	subs	r3, #1
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	4619      	mov	r1, r3
 800b572:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b574:	2b00      	cmp	r3, #0
 800b576:	d10f      	bne.n	800b598 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	68da      	ldr	r2, [r3, #12]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b586:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	68da      	ldr	r2, [r3, #12]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b596:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b598:	2300      	movs	r3, #0
 800b59a:	e000      	b.n	800b59e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b59c:	2302      	movs	r3, #2
  }
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3714      	adds	r7, #20
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr

0800b5aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b082      	sub	sp, #8
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	68da      	ldr	r2, [r3, #12]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2220      	movs	r2, #32
 800b5c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f7ff fcd8 	bl	800af80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b5d0:	2300      	movs	r3, #0
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3708      	adds	r7, #8
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}

0800b5da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b5da:	b580      	push	{r7, lr}
 800b5dc:	b08c      	sub	sp, #48	; 0x30
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	2b22      	cmp	r3, #34	; 0x22
 800b5ec:	f040 80ab 	bne.w	800b746 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	689b      	ldr	r3, [r3, #8]
 800b5f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5f8:	d117      	bne.n	800b62a <UART_Receive_IT+0x50>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	691b      	ldr	r3, [r3, #16]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d113      	bne.n	800b62a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b602:	2300      	movs	r3, #0
 800b604:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b60a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	b29b      	uxth	r3, r3
 800b614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b618:	b29a      	uxth	r2, r3
 800b61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b622:	1c9a      	adds	r2, r3, #2
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	629a      	str	r2, [r3, #40]	; 0x28
 800b628:	e026      	b.n	800b678 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b62e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b630:	2300      	movs	r3, #0
 800b632:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b63c:	d007      	beq.n	800b64e <UART_Receive_IT+0x74>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d10a      	bne.n	800b65c <UART_Receive_IT+0x82>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	691b      	ldr	r3, [r3, #16]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d106      	bne.n	800b65c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	b2da      	uxtb	r2, r3
 800b656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b658:	701a      	strb	r2, [r3, #0]
 800b65a:	e008      	b.n	800b66e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	b2db      	uxtb	r3, r3
 800b664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b668:	b2da      	uxtb	r2, r3
 800b66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b66c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b672:	1c5a      	adds	r2, r3, #1
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	3b01      	subs	r3, #1
 800b680:	b29b      	uxth	r3, r3
 800b682:	687a      	ldr	r2, [r7, #4]
 800b684:	4619      	mov	r1, r3
 800b686:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d15a      	bne.n	800b742 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	68da      	ldr	r2, [r3, #12]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f022 0220 	bic.w	r2, r2, #32
 800b69a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	68da      	ldr	r2, [r3, #12]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b6aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	695a      	ldr	r2, [r3, #20]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f022 0201 	bic.w	r2, r2, #1
 800b6ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2220      	movs	r2, #32
 800b6c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d135      	bne.n	800b738 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	330c      	adds	r3, #12
 800b6d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	e853 3f00 	ldrex	r3, [r3]
 800b6e0:	613b      	str	r3, [r7, #16]
   return(result);
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	f023 0310 	bic.w	r3, r3, #16
 800b6e8:	627b      	str	r3, [r7, #36]	; 0x24
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	330c      	adds	r3, #12
 800b6f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6f2:	623a      	str	r2, [r7, #32]
 800b6f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f6:	69f9      	ldr	r1, [r7, #28]
 800b6f8:	6a3a      	ldr	r2, [r7, #32]
 800b6fa:	e841 2300 	strex	r3, r2, [r1]
 800b6fe:	61bb      	str	r3, [r7, #24]
   return(result);
 800b700:	69bb      	ldr	r3, [r7, #24]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d1e5      	bne.n	800b6d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f003 0310 	and.w	r3, r3, #16
 800b710:	2b10      	cmp	r3, #16
 800b712:	d10a      	bne.n	800b72a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b714:	2300      	movs	r3, #0
 800b716:	60fb      	str	r3, [r7, #12]
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	60fb      	str	r3, [r7, #12]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	60fb      	str	r3, [r7, #12]
 800b728:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b72e:	4619      	mov	r1, r3
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f7ff fc4d 	bl	800afd0 <HAL_UARTEx_RxEventCallback>
 800b736:	e002      	b.n	800b73e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f7f8 fefd 	bl	8004538 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b73e:	2300      	movs	r3, #0
 800b740:	e002      	b.n	800b748 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b742:	2300      	movs	r3, #0
 800b744:	e000      	b.n	800b748 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b746:	2302      	movs	r3, #2
  }
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3730      	adds	r7, #48	; 0x30
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b754:	b0c0      	sub	sp, #256	; 0x100
 800b756:	af00      	add	r7, sp, #0
 800b758:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b75c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	691b      	ldr	r3, [r3, #16]
 800b764:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b76c:	68d9      	ldr	r1, [r3, #12]
 800b76e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	ea40 0301 	orr.w	r3, r0, r1
 800b778:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b77a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b77e:	689a      	ldr	r2, [r3, #8]
 800b780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b784:	691b      	ldr	r3, [r3, #16]
 800b786:	431a      	orrs	r2, r3
 800b788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b78c:	695b      	ldr	r3, [r3, #20]
 800b78e:	431a      	orrs	r2, r3
 800b790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b794:	69db      	ldr	r3, [r3, #28]
 800b796:	4313      	orrs	r3, r2
 800b798:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b79c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	68db      	ldr	r3, [r3, #12]
 800b7a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b7a8:	f021 010c 	bic.w	r1, r1, #12
 800b7ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7b0:	681a      	ldr	r2, [r3, #0]
 800b7b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b7b6:	430b      	orrs	r3, r1
 800b7b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b7ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	695b      	ldr	r3, [r3, #20]
 800b7c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b7c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7ca:	6999      	ldr	r1, [r3, #24]
 800b7cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7d0:	681a      	ldr	r2, [r3, #0]
 800b7d2:	ea40 0301 	orr.w	r3, r0, r1
 800b7d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b7d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	4b8f      	ldr	r3, [pc, #572]	; (800ba1c <UART_SetConfig+0x2cc>)
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d005      	beq.n	800b7f0 <UART_SetConfig+0xa0>
 800b7e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	4b8d      	ldr	r3, [pc, #564]	; (800ba20 <UART_SetConfig+0x2d0>)
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d104      	bne.n	800b7fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b7f0:	f7fd fa7a 	bl	8008ce8 <HAL_RCC_GetPCLK2Freq>
 800b7f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b7f8:	e003      	b.n	800b802 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b7fa:	f7fd fa61 	bl	8008cc0 <HAL_RCC_GetPCLK1Freq>
 800b7fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b806:	69db      	ldr	r3, [r3, #28]
 800b808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b80c:	f040 810c 	bne.w	800ba28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b810:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b814:	2200      	movs	r2, #0
 800b816:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b81a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b81e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b822:	4622      	mov	r2, r4
 800b824:	462b      	mov	r3, r5
 800b826:	1891      	adds	r1, r2, r2
 800b828:	65b9      	str	r1, [r7, #88]	; 0x58
 800b82a:	415b      	adcs	r3, r3
 800b82c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b82e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b832:	4621      	mov	r1, r4
 800b834:	eb12 0801 	adds.w	r8, r2, r1
 800b838:	4629      	mov	r1, r5
 800b83a:	eb43 0901 	adc.w	r9, r3, r1
 800b83e:	f04f 0200 	mov.w	r2, #0
 800b842:	f04f 0300 	mov.w	r3, #0
 800b846:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b84a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b84e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b852:	4690      	mov	r8, r2
 800b854:	4699      	mov	r9, r3
 800b856:	4623      	mov	r3, r4
 800b858:	eb18 0303 	adds.w	r3, r8, r3
 800b85c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b860:	462b      	mov	r3, r5
 800b862:	eb49 0303 	adc.w	r3, r9, r3
 800b866:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b86a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	2200      	movs	r2, #0
 800b872:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b876:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b87a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b87e:	460b      	mov	r3, r1
 800b880:	18db      	adds	r3, r3, r3
 800b882:	653b      	str	r3, [r7, #80]	; 0x50
 800b884:	4613      	mov	r3, r2
 800b886:	eb42 0303 	adc.w	r3, r2, r3
 800b88a:	657b      	str	r3, [r7, #84]	; 0x54
 800b88c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b890:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b894:	f7f5 f97c 	bl	8000b90 <__aeabi_uldivmod>
 800b898:	4602      	mov	r2, r0
 800b89a:	460b      	mov	r3, r1
 800b89c:	4b61      	ldr	r3, [pc, #388]	; (800ba24 <UART_SetConfig+0x2d4>)
 800b89e:	fba3 2302 	umull	r2, r3, r3, r2
 800b8a2:	095b      	lsrs	r3, r3, #5
 800b8a4:	011c      	lsls	r4, r3, #4
 800b8a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b8b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b8b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b8b8:	4642      	mov	r2, r8
 800b8ba:	464b      	mov	r3, r9
 800b8bc:	1891      	adds	r1, r2, r2
 800b8be:	64b9      	str	r1, [r7, #72]	; 0x48
 800b8c0:	415b      	adcs	r3, r3
 800b8c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b8c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b8c8:	4641      	mov	r1, r8
 800b8ca:	eb12 0a01 	adds.w	sl, r2, r1
 800b8ce:	4649      	mov	r1, r9
 800b8d0:	eb43 0b01 	adc.w	fp, r3, r1
 800b8d4:	f04f 0200 	mov.w	r2, #0
 800b8d8:	f04f 0300 	mov.w	r3, #0
 800b8dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b8e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b8e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b8e8:	4692      	mov	sl, r2
 800b8ea:	469b      	mov	fp, r3
 800b8ec:	4643      	mov	r3, r8
 800b8ee:	eb1a 0303 	adds.w	r3, sl, r3
 800b8f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b8f6:	464b      	mov	r3, r9
 800b8f8:	eb4b 0303 	adc.w	r3, fp, r3
 800b8fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	2200      	movs	r2, #0
 800b908:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b90c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b910:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b914:	460b      	mov	r3, r1
 800b916:	18db      	adds	r3, r3, r3
 800b918:	643b      	str	r3, [r7, #64]	; 0x40
 800b91a:	4613      	mov	r3, r2
 800b91c:	eb42 0303 	adc.w	r3, r2, r3
 800b920:	647b      	str	r3, [r7, #68]	; 0x44
 800b922:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b926:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b92a:	f7f5 f931 	bl	8000b90 <__aeabi_uldivmod>
 800b92e:	4602      	mov	r2, r0
 800b930:	460b      	mov	r3, r1
 800b932:	4611      	mov	r1, r2
 800b934:	4b3b      	ldr	r3, [pc, #236]	; (800ba24 <UART_SetConfig+0x2d4>)
 800b936:	fba3 2301 	umull	r2, r3, r3, r1
 800b93a:	095b      	lsrs	r3, r3, #5
 800b93c:	2264      	movs	r2, #100	; 0x64
 800b93e:	fb02 f303 	mul.w	r3, r2, r3
 800b942:	1acb      	subs	r3, r1, r3
 800b944:	00db      	lsls	r3, r3, #3
 800b946:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b94a:	4b36      	ldr	r3, [pc, #216]	; (800ba24 <UART_SetConfig+0x2d4>)
 800b94c:	fba3 2302 	umull	r2, r3, r3, r2
 800b950:	095b      	lsrs	r3, r3, #5
 800b952:	005b      	lsls	r3, r3, #1
 800b954:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b958:	441c      	add	r4, r3
 800b95a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b95e:	2200      	movs	r2, #0
 800b960:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b964:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b968:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b96c:	4642      	mov	r2, r8
 800b96e:	464b      	mov	r3, r9
 800b970:	1891      	adds	r1, r2, r2
 800b972:	63b9      	str	r1, [r7, #56]	; 0x38
 800b974:	415b      	adcs	r3, r3
 800b976:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b978:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b97c:	4641      	mov	r1, r8
 800b97e:	1851      	adds	r1, r2, r1
 800b980:	6339      	str	r1, [r7, #48]	; 0x30
 800b982:	4649      	mov	r1, r9
 800b984:	414b      	adcs	r3, r1
 800b986:	637b      	str	r3, [r7, #52]	; 0x34
 800b988:	f04f 0200 	mov.w	r2, #0
 800b98c:	f04f 0300 	mov.w	r3, #0
 800b990:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b994:	4659      	mov	r1, fp
 800b996:	00cb      	lsls	r3, r1, #3
 800b998:	4651      	mov	r1, sl
 800b99a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b99e:	4651      	mov	r1, sl
 800b9a0:	00ca      	lsls	r2, r1, #3
 800b9a2:	4610      	mov	r0, r2
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	4642      	mov	r2, r8
 800b9aa:	189b      	adds	r3, r3, r2
 800b9ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b9b0:	464b      	mov	r3, r9
 800b9b2:	460a      	mov	r2, r1
 800b9b4:	eb42 0303 	adc.w	r3, r2, r3
 800b9b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b9bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b9c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b9cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	18db      	adds	r3, r3, r3
 800b9d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9d6:	4613      	mov	r3, r2
 800b9d8:	eb42 0303 	adc.w	r3, r2, r3
 800b9dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b9e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b9e6:	f7f5 f8d3 	bl	8000b90 <__aeabi_uldivmod>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	4b0d      	ldr	r3, [pc, #52]	; (800ba24 <UART_SetConfig+0x2d4>)
 800b9f0:	fba3 1302 	umull	r1, r3, r3, r2
 800b9f4:	095b      	lsrs	r3, r3, #5
 800b9f6:	2164      	movs	r1, #100	; 0x64
 800b9f8:	fb01 f303 	mul.w	r3, r1, r3
 800b9fc:	1ad3      	subs	r3, r2, r3
 800b9fe:	00db      	lsls	r3, r3, #3
 800ba00:	3332      	adds	r3, #50	; 0x32
 800ba02:	4a08      	ldr	r2, [pc, #32]	; (800ba24 <UART_SetConfig+0x2d4>)
 800ba04:	fba2 2303 	umull	r2, r3, r2, r3
 800ba08:	095b      	lsrs	r3, r3, #5
 800ba0a:	f003 0207 	and.w	r2, r3, #7
 800ba0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4422      	add	r2, r4
 800ba16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ba18:	e105      	b.n	800bc26 <UART_SetConfig+0x4d6>
 800ba1a:	bf00      	nop
 800ba1c:	40011000 	.word	0x40011000
 800ba20:	40011400 	.word	0x40011400
 800ba24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ba28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ba32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ba36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ba3a:	4642      	mov	r2, r8
 800ba3c:	464b      	mov	r3, r9
 800ba3e:	1891      	adds	r1, r2, r2
 800ba40:	6239      	str	r1, [r7, #32]
 800ba42:	415b      	adcs	r3, r3
 800ba44:	627b      	str	r3, [r7, #36]	; 0x24
 800ba46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ba4a:	4641      	mov	r1, r8
 800ba4c:	1854      	adds	r4, r2, r1
 800ba4e:	4649      	mov	r1, r9
 800ba50:	eb43 0501 	adc.w	r5, r3, r1
 800ba54:	f04f 0200 	mov.w	r2, #0
 800ba58:	f04f 0300 	mov.w	r3, #0
 800ba5c:	00eb      	lsls	r3, r5, #3
 800ba5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ba62:	00e2      	lsls	r2, r4, #3
 800ba64:	4614      	mov	r4, r2
 800ba66:	461d      	mov	r5, r3
 800ba68:	4643      	mov	r3, r8
 800ba6a:	18e3      	adds	r3, r4, r3
 800ba6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ba70:	464b      	mov	r3, r9
 800ba72:	eb45 0303 	adc.w	r3, r5, r3
 800ba76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ba7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	2200      	movs	r2, #0
 800ba82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ba86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ba8a:	f04f 0200 	mov.w	r2, #0
 800ba8e:	f04f 0300 	mov.w	r3, #0
 800ba92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ba96:	4629      	mov	r1, r5
 800ba98:	008b      	lsls	r3, r1, #2
 800ba9a:	4621      	mov	r1, r4
 800ba9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800baa0:	4621      	mov	r1, r4
 800baa2:	008a      	lsls	r2, r1, #2
 800baa4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800baa8:	f7f5 f872 	bl	8000b90 <__aeabi_uldivmod>
 800baac:	4602      	mov	r2, r0
 800baae:	460b      	mov	r3, r1
 800bab0:	4b60      	ldr	r3, [pc, #384]	; (800bc34 <UART_SetConfig+0x4e4>)
 800bab2:	fba3 2302 	umull	r2, r3, r3, r2
 800bab6:	095b      	lsrs	r3, r3, #5
 800bab8:	011c      	lsls	r4, r3, #4
 800baba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800babe:	2200      	movs	r2, #0
 800bac0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bac4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bac8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bacc:	4642      	mov	r2, r8
 800bace:	464b      	mov	r3, r9
 800bad0:	1891      	adds	r1, r2, r2
 800bad2:	61b9      	str	r1, [r7, #24]
 800bad4:	415b      	adcs	r3, r3
 800bad6:	61fb      	str	r3, [r7, #28]
 800bad8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800badc:	4641      	mov	r1, r8
 800bade:	1851      	adds	r1, r2, r1
 800bae0:	6139      	str	r1, [r7, #16]
 800bae2:	4649      	mov	r1, r9
 800bae4:	414b      	adcs	r3, r1
 800bae6:	617b      	str	r3, [r7, #20]
 800bae8:	f04f 0200 	mov.w	r2, #0
 800baec:	f04f 0300 	mov.w	r3, #0
 800baf0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800baf4:	4659      	mov	r1, fp
 800baf6:	00cb      	lsls	r3, r1, #3
 800baf8:	4651      	mov	r1, sl
 800bafa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bafe:	4651      	mov	r1, sl
 800bb00:	00ca      	lsls	r2, r1, #3
 800bb02:	4610      	mov	r0, r2
 800bb04:	4619      	mov	r1, r3
 800bb06:	4603      	mov	r3, r0
 800bb08:	4642      	mov	r2, r8
 800bb0a:	189b      	adds	r3, r3, r2
 800bb0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bb10:	464b      	mov	r3, r9
 800bb12:	460a      	mov	r2, r1
 800bb14:	eb42 0303 	adc.w	r3, r2, r3
 800bb18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bb1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb20:	685b      	ldr	r3, [r3, #4]
 800bb22:	2200      	movs	r2, #0
 800bb24:	67bb      	str	r3, [r7, #120]	; 0x78
 800bb26:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bb28:	f04f 0200 	mov.w	r2, #0
 800bb2c:	f04f 0300 	mov.w	r3, #0
 800bb30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bb34:	4649      	mov	r1, r9
 800bb36:	008b      	lsls	r3, r1, #2
 800bb38:	4641      	mov	r1, r8
 800bb3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb3e:	4641      	mov	r1, r8
 800bb40:	008a      	lsls	r2, r1, #2
 800bb42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bb46:	f7f5 f823 	bl	8000b90 <__aeabi_uldivmod>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	4b39      	ldr	r3, [pc, #228]	; (800bc34 <UART_SetConfig+0x4e4>)
 800bb50:	fba3 1302 	umull	r1, r3, r3, r2
 800bb54:	095b      	lsrs	r3, r3, #5
 800bb56:	2164      	movs	r1, #100	; 0x64
 800bb58:	fb01 f303 	mul.w	r3, r1, r3
 800bb5c:	1ad3      	subs	r3, r2, r3
 800bb5e:	011b      	lsls	r3, r3, #4
 800bb60:	3332      	adds	r3, #50	; 0x32
 800bb62:	4a34      	ldr	r2, [pc, #208]	; (800bc34 <UART_SetConfig+0x4e4>)
 800bb64:	fba2 2303 	umull	r2, r3, r2, r3
 800bb68:	095b      	lsrs	r3, r3, #5
 800bb6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb6e:	441c      	add	r4, r3
 800bb70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb74:	2200      	movs	r2, #0
 800bb76:	673b      	str	r3, [r7, #112]	; 0x70
 800bb78:	677a      	str	r2, [r7, #116]	; 0x74
 800bb7a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bb7e:	4642      	mov	r2, r8
 800bb80:	464b      	mov	r3, r9
 800bb82:	1891      	adds	r1, r2, r2
 800bb84:	60b9      	str	r1, [r7, #8]
 800bb86:	415b      	adcs	r3, r3
 800bb88:	60fb      	str	r3, [r7, #12]
 800bb8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bb8e:	4641      	mov	r1, r8
 800bb90:	1851      	adds	r1, r2, r1
 800bb92:	6039      	str	r1, [r7, #0]
 800bb94:	4649      	mov	r1, r9
 800bb96:	414b      	adcs	r3, r1
 800bb98:	607b      	str	r3, [r7, #4]
 800bb9a:	f04f 0200 	mov.w	r2, #0
 800bb9e:	f04f 0300 	mov.w	r3, #0
 800bba2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bba6:	4659      	mov	r1, fp
 800bba8:	00cb      	lsls	r3, r1, #3
 800bbaa:	4651      	mov	r1, sl
 800bbac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bbb0:	4651      	mov	r1, sl
 800bbb2:	00ca      	lsls	r2, r1, #3
 800bbb4:	4610      	mov	r0, r2
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	4603      	mov	r3, r0
 800bbba:	4642      	mov	r2, r8
 800bbbc:	189b      	adds	r3, r3, r2
 800bbbe:	66bb      	str	r3, [r7, #104]	; 0x68
 800bbc0:	464b      	mov	r3, r9
 800bbc2:	460a      	mov	r2, r1
 800bbc4:	eb42 0303 	adc.w	r3, r2, r3
 800bbc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bbca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	663b      	str	r3, [r7, #96]	; 0x60
 800bbd4:	667a      	str	r2, [r7, #100]	; 0x64
 800bbd6:	f04f 0200 	mov.w	r2, #0
 800bbda:	f04f 0300 	mov.w	r3, #0
 800bbde:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bbe2:	4649      	mov	r1, r9
 800bbe4:	008b      	lsls	r3, r1, #2
 800bbe6:	4641      	mov	r1, r8
 800bbe8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bbec:	4641      	mov	r1, r8
 800bbee:	008a      	lsls	r2, r1, #2
 800bbf0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bbf4:	f7f4 ffcc 	bl	8000b90 <__aeabi_uldivmod>
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	4b0d      	ldr	r3, [pc, #52]	; (800bc34 <UART_SetConfig+0x4e4>)
 800bbfe:	fba3 1302 	umull	r1, r3, r3, r2
 800bc02:	095b      	lsrs	r3, r3, #5
 800bc04:	2164      	movs	r1, #100	; 0x64
 800bc06:	fb01 f303 	mul.w	r3, r1, r3
 800bc0a:	1ad3      	subs	r3, r2, r3
 800bc0c:	011b      	lsls	r3, r3, #4
 800bc0e:	3332      	adds	r3, #50	; 0x32
 800bc10:	4a08      	ldr	r2, [pc, #32]	; (800bc34 <UART_SetConfig+0x4e4>)
 800bc12:	fba2 2303 	umull	r2, r3, r2, r3
 800bc16:	095b      	lsrs	r3, r3, #5
 800bc18:	f003 020f 	and.w	r2, r3, #15
 800bc1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	4422      	add	r2, r4
 800bc24:	609a      	str	r2, [r3, #8]
}
 800bc26:	bf00      	nop
 800bc28:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc32:	bf00      	nop
 800bc34:	51eb851f 	.word	0x51eb851f

0800bc38 <__errno>:
 800bc38:	4b01      	ldr	r3, [pc, #4]	; (800bc40 <__errno+0x8>)
 800bc3a:	6818      	ldr	r0, [r3, #0]
 800bc3c:	4770      	bx	lr
 800bc3e:	bf00      	nop
 800bc40:	20000140 	.word	0x20000140

0800bc44 <__libc_init_array>:
 800bc44:	b570      	push	{r4, r5, r6, lr}
 800bc46:	4d0d      	ldr	r5, [pc, #52]	; (800bc7c <__libc_init_array+0x38>)
 800bc48:	4c0d      	ldr	r4, [pc, #52]	; (800bc80 <__libc_init_array+0x3c>)
 800bc4a:	1b64      	subs	r4, r4, r5
 800bc4c:	10a4      	asrs	r4, r4, #2
 800bc4e:	2600      	movs	r6, #0
 800bc50:	42a6      	cmp	r6, r4
 800bc52:	d109      	bne.n	800bc68 <__libc_init_array+0x24>
 800bc54:	4d0b      	ldr	r5, [pc, #44]	; (800bc84 <__libc_init_array+0x40>)
 800bc56:	4c0c      	ldr	r4, [pc, #48]	; (800bc88 <__libc_init_array+0x44>)
 800bc58:	f000 f8fe 	bl	800be58 <_init>
 800bc5c:	1b64      	subs	r4, r4, r5
 800bc5e:	10a4      	asrs	r4, r4, #2
 800bc60:	2600      	movs	r6, #0
 800bc62:	42a6      	cmp	r6, r4
 800bc64:	d105      	bne.n	800bc72 <__libc_init_array+0x2e>
 800bc66:	bd70      	pop	{r4, r5, r6, pc}
 800bc68:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc6c:	4798      	blx	r3
 800bc6e:	3601      	adds	r6, #1
 800bc70:	e7ee      	b.n	800bc50 <__libc_init_array+0xc>
 800bc72:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc76:	4798      	blx	r3
 800bc78:	3601      	adds	r6, #1
 800bc7a:	e7f2      	b.n	800bc62 <__libc_init_array+0x1e>
 800bc7c:	0800be98 	.word	0x0800be98
 800bc80:	0800be98 	.word	0x0800be98
 800bc84:	0800be98 	.word	0x0800be98
 800bc88:	0800be9c 	.word	0x0800be9c

0800bc8c <memset>:
 800bc8c:	4402      	add	r2, r0
 800bc8e:	4603      	mov	r3, r0
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d100      	bne.n	800bc96 <memset+0xa>
 800bc94:	4770      	bx	lr
 800bc96:	f803 1b01 	strb.w	r1, [r3], #1
 800bc9a:	e7f9      	b.n	800bc90 <memset+0x4>

0800bc9c <sqrt>:
 800bc9c:	b538      	push	{r3, r4, r5, lr}
 800bc9e:	ed2d 8b02 	vpush	{d8}
 800bca2:	ec55 4b10 	vmov	r4, r5, d0
 800bca6:	f000 f825 	bl	800bcf4 <__ieee754_sqrt>
 800bcaa:	4622      	mov	r2, r4
 800bcac:	462b      	mov	r3, r5
 800bcae:	4620      	mov	r0, r4
 800bcb0:	4629      	mov	r1, r5
 800bcb2:	eeb0 8a40 	vmov.f32	s16, s0
 800bcb6:	eef0 8a60 	vmov.f32	s17, s1
 800bcba:	f7f4 fee3 	bl	8000a84 <__aeabi_dcmpun>
 800bcbe:	b990      	cbnz	r0, 800bce6 <sqrt+0x4a>
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	4629      	mov	r1, r5
 800bcc8:	f7f4 feb4 	bl	8000a34 <__aeabi_dcmplt>
 800bccc:	b158      	cbz	r0, 800bce6 <sqrt+0x4a>
 800bcce:	f7ff ffb3 	bl	800bc38 <__errno>
 800bcd2:	2321      	movs	r3, #33	; 0x21
 800bcd4:	6003      	str	r3, [r0, #0]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	2300      	movs	r3, #0
 800bcda:	4610      	mov	r0, r2
 800bcdc:	4619      	mov	r1, r3
 800bcde:	f7f4 fd61 	bl	80007a4 <__aeabi_ddiv>
 800bce2:	ec41 0b18 	vmov	d8, r0, r1
 800bce6:	eeb0 0a48 	vmov.f32	s0, s16
 800bcea:	eef0 0a68 	vmov.f32	s1, s17
 800bcee:	ecbd 8b02 	vpop	{d8}
 800bcf2:	bd38      	pop	{r3, r4, r5, pc}

0800bcf4 <__ieee754_sqrt>:
 800bcf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcf8:	ec55 4b10 	vmov	r4, r5, d0
 800bcfc:	4e55      	ldr	r6, [pc, #340]	; (800be54 <__ieee754_sqrt+0x160>)
 800bcfe:	43ae      	bics	r6, r5
 800bd00:	ee10 0a10 	vmov	r0, s0
 800bd04:	ee10 3a10 	vmov	r3, s0
 800bd08:	462a      	mov	r2, r5
 800bd0a:	4629      	mov	r1, r5
 800bd0c:	d110      	bne.n	800bd30 <__ieee754_sqrt+0x3c>
 800bd0e:	ee10 2a10 	vmov	r2, s0
 800bd12:	462b      	mov	r3, r5
 800bd14:	f7f4 fc1c 	bl	8000550 <__aeabi_dmul>
 800bd18:	4602      	mov	r2, r0
 800bd1a:	460b      	mov	r3, r1
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	4629      	mov	r1, r5
 800bd20:	f7f4 fa60 	bl	80001e4 <__adddf3>
 800bd24:	4604      	mov	r4, r0
 800bd26:	460d      	mov	r5, r1
 800bd28:	ec45 4b10 	vmov	d0, r4, r5
 800bd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd30:	2d00      	cmp	r5, #0
 800bd32:	dc10      	bgt.n	800bd56 <__ieee754_sqrt+0x62>
 800bd34:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bd38:	4330      	orrs	r0, r6
 800bd3a:	d0f5      	beq.n	800bd28 <__ieee754_sqrt+0x34>
 800bd3c:	b15d      	cbz	r5, 800bd56 <__ieee754_sqrt+0x62>
 800bd3e:	ee10 2a10 	vmov	r2, s0
 800bd42:	462b      	mov	r3, r5
 800bd44:	ee10 0a10 	vmov	r0, s0
 800bd48:	f7f4 fa4a 	bl	80001e0 <__aeabi_dsub>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	460b      	mov	r3, r1
 800bd50:	f7f4 fd28 	bl	80007a4 <__aeabi_ddiv>
 800bd54:	e7e6      	b.n	800bd24 <__ieee754_sqrt+0x30>
 800bd56:	1512      	asrs	r2, r2, #20
 800bd58:	d074      	beq.n	800be44 <__ieee754_sqrt+0x150>
 800bd5a:	07d4      	lsls	r4, r2, #31
 800bd5c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800bd60:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800bd64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bd68:	bf5e      	ittt	pl
 800bd6a:	0fda      	lsrpl	r2, r3, #31
 800bd6c:	005b      	lslpl	r3, r3, #1
 800bd6e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800bd72:	2400      	movs	r4, #0
 800bd74:	0fda      	lsrs	r2, r3, #31
 800bd76:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800bd7a:	107f      	asrs	r7, r7, #1
 800bd7c:	005b      	lsls	r3, r3, #1
 800bd7e:	2516      	movs	r5, #22
 800bd80:	4620      	mov	r0, r4
 800bd82:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800bd86:	1886      	adds	r6, r0, r2
 800bd88:	428e      	cmp	r6, r1
 800bd8a:	bfde      	ittt	le
 800bd8c:	1b89      	suble	r1, r1, r6
 800bd8e:	18b0      	addle	r0, r6, r2
 800bd90:	18a4      	addle	r4, r4, r2
 800bd92:	0049      	lsls	r1, r1, #1
 800bd94:	3d01      	subs	r5, #1
 800bd96:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800bd9a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800bd9e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bda2:	d1f0      	bne.n	800bd86 <__ieee754_sqrt+0x92>
 800bda4:	462a      	mov	r2, r5
 800bda6:	f04f 0e20 	mov.w	lr, #32
 800bdaa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bdae:	4281      	cmp	r1, r0
 800bdb0:	eb06 0c05 	add.w	ip, r6, r5
 800bdb4:	dc02      	bgt.n	800bdbc <__ieee754_sqrt+0xc8>
 800bdb6:	d113      	bne.n	800bde0 <__ieee754_sqrt+0xec>
 800bdb8:	459c      	cmp	ip, r3
 800bdba:	d811      	bhi.n	800bde0 <__ieee754_sqrt+0xec>
 800bdbc:	f1bc 0f00 	cmp.w	ip, #0
 800bdc0:	eb0c 0506 	add.w	r5, ip, r6
 800bdc4:	da43      	bge.n	800be4e <__ieee754_sqrt+0x15a>
 800bdc6:	2d00      	cmp	r5, #0
 800bdc8:	db41      	blt.n	800be4e <__ieee754_sqrt+0x15a>
 800bdca:	f100 0801 	add.w	r8, r0, #1
 800bdce:	1a09      	subs	r1, r1, r0
 800bdd0:	459c      	cmp	ip, r3
 800bdd2:	bf88      	it	hi
 800bdd4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800bdd8:	eba3 030c 	sub.w	r3, r3, ip
 800bddc:	4432      	add	r2, r6
 800bdde:	4640      	mov	r0, r8
 800bde0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800bde4:	f1be 0e01 	subs.w	lr, lr, #1
 800bde8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800bdec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bdf0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bdf4:	d1db      	bne.n	800bdae <__ieee754_sqrt+0xba>
 800bdf6:	430b      	orrs	r3, r1
 800bdf8:	d006      	beq.n	800be08 <__ieee754_sqrt+0x114>
 800bdfa:	1c50      	adds	r0, r2, #1
 800bdfc:	bf13      	iteet	ne
 800bdfe:	3201      	addne	r2, #1
 800be00:	3401      	addeq	r4, #1
 800be02:	4672      	moveq	r2, lr
 800be04:	f022 0201 	bicne.w	r2, r2, #1
 800be08:	1063      	asrs	r3, r4, #1
 800be0a:	0852      	lsrs	r2, r2, #1
 800be0c:	07e1      	lsls	r1, r4, #31
 800be0e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800be12:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800be16:	bf48      	it	mi
 800be18:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800be1c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800be20:	4614      	mov	r4, r2
 800be22:	e781      	b.n	800bd28 <__ieee754_sqrt+0x34>
 800be24:	0ad9      	lsrs	r1, r3, #11
 800be26:	3815      	subs	r0, #21
 800be28:	055b      	lsls	r3, r3, #21
 800be2a:	2900      	cmp	r1, #0
 800be2c:	d0fa      	beq.n	800be24 <__ieee754_sqrt+0x130>
 800be2e:	02cd      	lsls	r5, r1, #11
 800be30:	d50a      	bpl.n	800be48 <__ieee754_sqrt+0x154>
 800be32:	f1c2 0420 	rsb	r4, r2, #32
 800be36:	fa23 f404 	lsr.w	r4, r3, r4
 800be3a:	1e55      	subs	r5, r2, #1
 800be3c:	4093      	lsls	r3, r2
 800be3e:	4321      	orrs	r1, r4
 800be40:	1b42      	subs	r2, r0, r5
 800be42:	e78a      	b.n	800bd5a <__ieee754_sqrt+0x66>
 800be44:	4610      	mov	r0, r2
 800be46:	e7f0      	b.n	800be2a <__ieee754_sqrt+0x136>
 800be48:	0049      	lsls	r1, r1, #1
 800be4a:	3201      	adds	r2, #1
 800be4c:	e7ef      	b.n	800be2e <__ieee754_sqrt+0x13a>
 800be4e:	4680      	mov	r8, r0
 800be50:	e7bd      	b.n	800bdce <__ieee754_sqrt+0xda>
 800be52:	bf00      	nop
 800be54:	7ff00000 	.word	0x7ff00000

0800be58 <_init>:
 800be58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be5a:	bf00      	nop
 800be5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be5e:	bc08      	pop	{r3}
 800be60:	469e      	mov	lr, r3
 800be62:	4770      	bx	lr

0800be64 <_fini>:
 800be64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be66:	bf00      	nop
 800be68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be6a:	bc08      	pop	{r3}
 800be6c:	469e      	mov	lr, r3
 800be6e:	4770      	bx	lr
